!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=119)}([function(e,t,n){"use strict";e.exports=n(43)},function(e,t,n){e.exports=n(47)()},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o,i,a,u){if(!e){var l;if(void 0===t)l=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,r,o,i,a,u],s=0;(l=new Error(t.replace(/%s/g,(function(){return c[s++]})))).name="Invariant Violation"}throw l.framesToPop=1,l}}},function(e,t,n){"use strict";var r=function(){};e.exports=r},function(e,t){e.exports=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}},function(e,t,n){var r=n(25),o="object"==typeof self&&self&&self.Object===Object&&self,i=r||o||Function("return this")();e.exports=i},function(e,t){e.exports=function(e){return null!=e&&"object"==typeof e}},,function(e,t,n){var r=n(55),o=n(56),i=n(57),a=n(58),u=n(59);function l(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}l.prototype.clear=r,l.prototype.delete=o,l.prototype.get=i,l.prototype.has=a,l.prototype.set=u,e.exports=l},function(e,t,n){var r=n(10);e.exports=function(e,t){for(var n=e.length;n--;)if(r(e[n][0],t))return n;return-1}},function(e,t){e.exports=function(e,t){return e===t||e!=e&&t!=t}},function(e,t,n){var r=n(24),o=n(66),i=n(67),a=r?r.toStringTag:void 0;e.exports=function(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":a&&a in Object(e)?o(e):i(e)}},function(e,t,n){var r=n(14)(Object,"create");e.exports=r},function(e,t,n){var r=n(81);e.exports=function(e,t){var n=e.__data__;return r(t)?n["string"==typeof t?"string":"hash"]:n.map}},function(e,t,n){var r=n(65),o=n(71);e.exports=function(e,t){var n=o(e,t);return r(n)?n:void 0}},function(e,t,n){var r=n(11),o=n(4);e.exports=function(e){if(!o(e))return!1;var t=r(e);return"[object Function]"==t||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t}},function(e,t,n){var r=n(27);e.exports=function(e,t,n){"__proto__"==t&&r?r(e,t,{configurable:!0,enumerable:!0,value:n,writable:!0}):e[t]=n}},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){var r=n(15),o=n(32);e.exports=function(e){return null!=e&&o(e.length)&&!r(e)}},function(e,t,n){"use strict";e.exports=n(49)},function(e,t,n){"use strict";(function(e,r){var o,i=n(41);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var a=Object(i.a)(o);t.a=a}).call(this,n(22),n(50)(e))},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;function a(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,u,l=a(e),c=1;c<arguments.length;c++){for(var s in n=Object(arguments[c]))o.call(n,s)&&(l[s]=n[s]);if(r){u=r(n);for(var f=0;f<u.length;f++)i.call(n,u[f])&&(l[u[f]]=n[u[f]])}}return l}},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){var r=n(14)(n(5),"Map");e.exports=r},function(e,t,n){var r=n(5).Symbol;e.exports=r},function(e,t,n){(function(t){var n="object"==typeof t&&t&&t.Object===Object&&t;e.exports=n}).call(this,n(22))},function(e,t,n){var r=n(16),o=n(10);e.exports=function(e,t,n){(void 0===n||o(e[t],n))&&(void 0!==n||t in e)||r(e,t,n)}},function(e,t,n){var r=n(14),o=function(){try{var e=r(Object,"defineProperty");return e({},"",{}),e}catch(e){}}();e.exports=o},function(e,t,n){var r=n(95)(Object.getPrototypeOf,Object);e.exports=r},function(e,t){var n=Object.prototype;e.exports=function(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||n)}},function(e,t,n){var r=n(96),o=n(6),i=Object.prototype,a=i.hasOwnProperty,u=i.propertyIsEnumerable,l=r(function(){return arguments}())?r:function(e){return o(e)&&a.call(e,"callee")&&!u.call(e,"callee")};e.exports=l},function(e,t){var n=Array.isArray;e.exports=n},function(e,t){e.exports=function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=9007199254740991}},function(e,t,n){(function(e){var r=n(5),o=n(98),i=t&&!t.nodeType&&t,a=i&&"object"==typeof e&&e&&!e.nodeType&&e,u=a&&a.exports===i?r.Buffer:void 0,l=(u?u.isBuffer:void 0)||o;e.exports=l}).call(this,n(17)(e))},function(e,t,n){var r=n(100),o=n(101),i=n(102),a=i&&i.isTypedArray,u=a?o(a):r;e.exports=u},function(e,t){e.exports=function(e,t){if(("constructor"!==t||"function"!=typeof e[t])&&"__proto__"!=t)return e[t]}},function(e,t,n){var r=n(106),o=n(108),i=n(18);e.exports=function(e){return i(e)?r(e,!0):o(e)}},function(e,t){var n=/^(?:0|[1-9]\d*)$/;e.exports=function(e,t){var r=typeof e;return!!(t=null==t?9007199254740991:t)&&("number"==r||"symbol"!=r&&n.test(e))&&e>-1&&e%1==0&&e<t}},function(e,t){e.exports=function(e){return e}},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE){0;try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}}(),e.exports=n(44)},function(e,t,n){"use strict";var r=n(19),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},i={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},u={};function l(e){return r.isMemo(e)?a:u[e.$$typeof]||o}u[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0};var c=Object.defineProperty,s=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,p=Object.getOwnPropertyDescriptor,d=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=d(n);o&&o!==h&&e(t,o,r)}var a=s(n);f&&(a=a.concat(f(n)));for(var u=l(t),y=l(n),m=0;m<a.length;++m){var v=a[m];if(!(i[v]||r&&r[v]||y&&y[v]||u&&u[v])){var b=p(n,v);try{c(t,v,b)}catch(e){}}}}return t}},function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",(function(){return r}))},function(e,t,n){var r=n(51);e.exports=d,e.exports.parse=i,e.exports.compile=function(e,t){return u(i(e,t))},e.exports.tokensToFunction=u,e.exports.tokensToRegExp=p;var o=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function i(e,t){for(var n,r=[],i=0,a=0,u="",s=t&&t.delimiter||"/";null!=(n=o.exec(e));){var f=n[0],p=n[1],d=n.index;if(u+=e.slice(a,d),a=d+f.length,p)u+=p[1];else{var h=e[a],y=n[2],m=n[3],v=n[4],b=n[5],g=n[6],w=n[7];u&&(r.push(u),u="");var x=null!=y&&null!=h&&h!==y,E="+"===g||"*"===g,k="?"===g||"*"===g,T=n[2]||s,S=v||b;r.push({name:m||i++,prefix:y||"",delimiter:T,optional:k,repeat:E,partial:x,asterisk:!!w,pattern:S?c(S):w?".*":"[^"+l(T)+"]+?"})}}return a<e.length&&(u+=e.substr(a)),u&&r.push(u),r}function a(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function u(e){for(var t=new Array(e.length),n=0;n<e.length;n++)"object"==typeof e[n]&&(t[n]=new RegExp("^(?:"+e[n].pattern+")$"));return function(n,o){for(var i="",u=n||{},l=(o||{}).pretty?a:encodeURIComponent,c=0;c<e.length;c++){var s=e[c];if("string"!=typeof s){var f,p=u[s.name];if(null==p){if(s.optional){s.partial&&(i+=s.prefix);continue}throw new TypeError('Expected "'+s.name+'" to be defined')}if(r(p)){if(!s.repeat)throw new TypeError('Expected "'+s.name+'" to not repeat, but received `'+JSON.stringify(p)+"`");if(0===p.length){if(s.optional)continue;throw new TypeError('Expected "'+s.name+'" to not be empty')}for(var d=0;d<p.length;d++){if(f=l(p[d]),!t[c].test(f))throw new TypeError('Expected all "'+s.name+'" to match "'+s.pattern+'", but received `'+JSON.stringify(f)+"`");i+=(0===d?s.prefix:s.delimiter)+f}}else{if(f=s.asterisk?encodeURI(p).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):l(p),!t[c].test(f))throw new TypeError('Expected "'+s.name+'" to match "'+s.pattern+'", but received "'+f+'"');i+=s.prefix+f}}else i+=s}return i}}function l(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function c(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function s(e,t){return e.keys=t,e}function f(e){return e.sensitive?"":"i"}function p(e,t,n){r(t)||(n=t||n,t=[]);for(var o=(n=n||{}).strict,i=!1!==n.end,a="",u=0;u<e.length;u++){var c=e[u];if("string"==typeof c)a+=l(c);else{var p=l(c.prefix),d="(?:"+c.pattern+")";t.push(c),c.repeat&&(d+="(?:"+p+d+")*"),a+=d=c.optional?c.partial?p+"("+d+")?":"(?:"+p+"("+d+"))?":p+"("+d+")"}}var h=l(n.delimiter||"/"),y=a.slice(-h.length)===h;return o||(a=(y?a.slice(0,-h.length):a)+"(?:"+h+"(?=$))?"),a+=i?"$":o&&y?"":"(?="+h+"|$)",s(new RegExp("^"+a,f(n)),t)}function d(e,t,n){return r(t)||(n=t||n,t=[]),n=n||{},e instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return s(e,t)}(e,t):r(e)?function(e,t,n){for(var r=[],o=0;o<e.length;o++)r.push(d(e[o],t,n).source);return s(new RegExp("(?:"+r.join("|")+")",f(n)),t)}(e,t,n):function(e,t,n){return p(i(e,n),t,n)}(e,t,n)}},function(e,t,n){"use strict";
/** @license React v16.12.0
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(21),o="function"==typeof Symbol&&Symbol.for,i=o?Symbol.for("react.element"):60103,a=o?Symbol.for("react.portal"):60106,u=o?Symbol.for("react.fragment"):60107,l=o?Symbol.for("react.strict_mode"):60108,c=o?Symbol.for("react.profiler"):60114,s=o?Symbol.for("react.provider"):60109,f=o?Symbol.for("react.context"):60110,p=o?Symbol.for("react.forward_ref"):60112,d=o?Symbol.for("react.suspense"):60113;o&&Symbol.for("react.suspense_list");var h=o?Symbol.for("react.memo"):60115,y=o?Symbol.for("react.lazy"):60116;o&&Symbol.for("react.fundamental"),o&&Symbol.for("react.responder"),o&&Symbol.for("react.scope");var m="function"==typeof Symbol&&Symbol.iterator;function v(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var b={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},g={};function w(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||b}function x(){}function E(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||b}w.prototype.isReactComponent={},w.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(v(85));this.updater.enqueueSetState(this,e,t,"setState")},w.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},x.prototype=w.prototype;var k=E.prototype=new x;k.constructor=E,r(k,w.prototype),k.isPureReactComponent=!0;var T={current:null},S={current:null},_=Object.prototype.hasOwnProperty,P={key:!0,ref:!0,__self:!0,__source:!0};function C(e,t,n){var r,o={},a=null,u=null;if(null!=t)for(r in void 0!==t.ref&&(u=t.ref),void 0!==t.key&&(a=""+t.key),t)_.call(t,r)&&!P.hasOwnProperty(r)&&(o[r]=t[r]);var l=arguments.length-2;if(1===l)o.children=n;else if(1<l){for(var c=Array(l),s=0;s<l;s++)c[s]=arguments[s+2];o.children=c}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===o[r]&&(o[r]=l[r]);return{$$typeof:i,type:e,key:a,ref:u,props:o,_owner:S.current}}function O(e){return"object"==typeof e&&null!==e&&e.$$typeof===i}var j=/\/+/g,N=[];function R(e,t,n,r){if(N.length){var o=N.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function M(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>N.length&&N.push(e)}function I(e,t,n){return null==e?0:function e(t,n,r,o){var u=typeof t;"undefined"!==u&&"boolean"!==u||(t=null);var l=!1;if(null===t)l=!0;else switch(u){case"string":case"number":l=!0;break;case"object":switch(t.$$typeof){case i:case a:l=!0}}if(l)return r(o,t,""===n?"."+z(t,0):n),1;if(l=0,n=""===n?".":n+":",Array.isArray(t))for(var c=0;c<t.length;c++){var s=n+z(u=t[c],c);l+=e(u,s,r,o)}else if(null===t||"object"!=typeof t?s=null:s="function"==typeof(s=m&&t[m]||t["@@iterator"])?s:null,"function"==typeof s)for(t=s.call(t),c=0;!(u=t.next()).done;)l+=e(u=u.value,s=n+z(u,c++),r,o);else if("object"===u)throw r=""+t,Error(v(31,"[object Object]"===r?"object with keys {"+Object.keys(t).join(", ")+"}":r,""));return l}(e,"",t,n)}function z(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function U(e,t){e.func.call(e.context,t,e.count++)}function A(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?D(e,r,n,(function(e){return e})):null!=e&&(O(e)&&(e=function(e,t){return{$$typeof:i,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(j,"$&/")+"/")+n)),r.push(e))}function D(e,t,n,r,o){var i="";null!=n&&(i=(""+n).replace(j,"$&/")+"/"),I(e,A,t=R(t,i,r,o)),M(t)}function F(){var e=T.current;if(null===e)throw Error(v(321));return e}var L={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return D(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;I(e,U,t=R(null,null,t,n)),M(t)},count:function(e){return I(e,(function(){return null}),null)},toArray:function(e){var t=[];return D(e,t,null,(function(e){return e})),t},only:function(e){if(!O(e))throw Error(v(143));return e}},createRef:function(){return{current:null}},Component:w,PureComponent:E,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:s,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:p,render:e}},lazy:function(e){return{$$typeof:y,_ctor:e,_status:-1,_result:null}},memo:function(e,t){return{$$typeof:h,type:e,compare:void 0===t?null:t}},useCallback:function(e,t){return F().useCallback(e,t)},useContext:function(e,t){return F().useContext(e,t)},useEffect:function(e,t){return F().useEffect(e,t)},useImperativeHandle:function(e,t,n){return F().useImperativeHandle(e,t,n)},useDebugValue:function(){},useLayoutEffect:function(e,t){return F().useLayoutEffect(e,t)},useMemo:function(e,t){return F().useMemo(e,t)},useReducer:function(e,t,n){return F().useReducer(e,t,n)},useRef:function(e){return F().useRef(e)},useState:function(e){return F().useState(e)},Fragment:u,Profiler:c,StrictMode:l,Suspense:d,createElement:C,cloneElement:function(e,t,n){if(null==e)throw Error(v(267,e));var o=r({},e.props),a=e.key,u=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(u=t.ref,l=S.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var c=e.type.defaultProps;for(s in t)_.call(t,s)&&!P.hasOwnProperty(s)&&(o[s]=void 0===t[s]&&void 0!==c?c[s]:t[s])}var s=arguments.length-2;if(1===s)o.children=n;else if(1<s){c=Array(s);for(var f=0;f<s;f++)c[f]=arguments[f+2];o.children=c}return{$$typeof:i,type:e.type,key:a,ref:u,props:o,_owner:l}},createFactory:function(e){var t=C.bind(null,e);return t.type=e,t},isValidElement:O,version:"16.12.0",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentDispatcher:T,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:S,IsSomeRendererActing:{current:!1},assign:r}},$={default:L},W=$&&L||$;e.exports=W.default||W},function(e,t,n){"use strict";
/** @license React v16.12.0
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(0),o=n(21),i=n(45);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(a(227));var u=null,l={};function c(){if(u)for(var e in l){var t=l[e],n=u.indexOf(e);if(!(-1<n))throw Error(a(96,e));if(!f[n]){if(!t.extractEvents)throw Error(a(97,e));for(var r in f[n]=t,n=t.eventTypes){var o=void 0,i=n[r],c=t,d=r;if(p.hasOwnProperty(d))throw Error(a(99,d));p[d]=i;var h=i.phasedRegistrationNames;if(h){for(o in h)h.hasOwnProperty(o)&&s(h[o],c,d);o=!0}else i.registrationName?(s(i.registrationName,c,d),o=!0):o=!1;if(!o)throw Error(a(98,r,e))}}}}function s(e,t,n){if(d[e])throw Error(a(100,e));d[e]=t,h[e]=t.eventTypes[n].dependencies}var f=[],p={},d={},h={};function y(e,t,n,r,o,i,a,u,l){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}var m=!1,v=null,b=!1,g=null,w={onError:function(e){m=!0,v=e}};function x(e,t,n,r,o,i,a,u,l){m=!1,v=null,y.apply(w,arguments)}var E=null,k=null,T=null;function S(e,t,n){var r=e.type||"unknown-event";e.currentTarget=T(n),function(e,t,n,r,o,i,u,l,c){if(x.apply(this,arguments),m){if(!m)throw Error(a(198));var s=v;m=!1,v=null,b||(b=!0,g=s)}}(r,t,void 0,e),e.currentTarget=null}function _(e,t){if(null==t)throw Error(a(30));return null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function P(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var C=null;function O(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)S(e,t[r],n[r]);else t&&S(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function j(e){if(null!==e&&(C=_(C,e)),e=C,C=null,e){if(P(e,O),C)throw Error(a(95));if(b)throw e=g,b=!1,g=null,e}}var N={injectEventPluginOrder:function(e){if(u)throw Error(a(101));u=Array.prototype.slice.call(e),c()},injectEventPluginsByName:function(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];if(!l.hasOwnProperty(t)||l[t]!==r){if(l[t])throw Error(a(102,t));l[t]=r,n=!0}}n&&c()}};function R(e,t){var n=e.stateNode;if(!n)return null;var r=E(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}var M=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;M.hasOwnProperty("ReactCurrentDispatcher")||(M.ReactCurrentDispatcher={current:null}),M.hasOwnProperty("ReactCurrentBatchConfig")||(M.ReactCurrentBatchConfig={suspense:null});var I=/^(.*)[\\\/]/,z="function"==typeof Symbol&&Symbol.for,U=z?Symbol.for("react.element"):60103,A=z?Symbol.for("react.portal"):60106,D=z?Symbol.for("react.fragment"):60107,F=z?Symbol.for("react.strict_mode"):60108,L=z?Symbol.for("react.profiler"):60114,$=z?Symbol.for("react.provider"):60109,W=z?Symbol.for("react.context"):60110,V=z?Symbol.for("react.concurrent_mode"):60111,q=z?Symbol.for("react.forward_ref"):60112,B=z?Symbol.for("react.suspense"):60113,H=z?Symbol.for("react.suspense_list"):60120,K=z?Symbol.for("react.memo"):60115,Q=z?Symbol.for("react.lazy"):60116;z&&Symbol.for("react.fundamental"),z&&Symbol.for("react.responder"),z&&Symbol.for("react.scope");var Y="function"==typeof Symbol&&Symbol.iterator;function X(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=Y&&e[Y]||e["@@iterator"])?e:null}function G(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case D:return"Fragment";case A:return"Portal";case L:return"Profiler";case F:return"StrictMode";case B:return"Suspense";case H:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case W:return"Context.Consumer";case $:return"Context.Provider";case q:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case K:return G(e.type);case Q:if(e=1===e._status?e._result:null)return G(e)}return null}function J(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,o=e._debugSource,i=G(e.type);n=null,r&&(n=G(r.type)),r=i,i="",o?i=" (at "+o.fileName.replace(I,"")+":"+o.lineNumber+")":n&&(i=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+i}t+=n,e=e.return}while(e);return t}var Z=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),ee=null,te=null,ne=null;function re(e){if(e=k(e)){if("function"!=typeof ee)throw Error(a(280));var t=E(e.stateNode);ee(e.stateNode,e.type,t)}}function oe(e){te?ne?ne.push(e):ne=[e]:te=e}function ie(){if(te){var e=te,t=ne;if(ne=te=null,re(e),t)for(e=0;e<t.length;e++)re(t[e])}}function ae(e,t){return e(t)}function ue(e,t,n,r){return e(t,n,r)}function le(){}var ce=ae,se=!1,fe=!1;function pe(){null===te&&null===ne||(le(),ie())}new Map;var de=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,he=Object.prototype.hasOwnProperty,ye={},me={};function ve(e,t,n,r,o,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i}var be={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){be[e]=new ve(e,0,!1,e,null,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];be[t]=new ve(t,1,!1,e[1],null,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){be[e]=new ve(e,2,!1,e.toLowerCase(),null,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){be[e]=new ve(e,2,!1,e,null,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){be[e]=new ve(e,3,!1,e.toLowerCase(),null,!1)})),["checked","multiple","muted","selected"].forEach((function(e){be[e]=new ve(e,3,!0,e,null,!1)})),["capture","download"].forEach((function(e){be[e]=new ve(e,4,!1,e,null,!1)})),["cols","rows","size","span"].forEach((function(e){be[e]=new ve(e,6,!1,e,null,!1)})),["rowSpan","start"].forEach((function(e){be[e]=new ve(e,5,!1,e.toLowerCase(),null,!1)}));var ge=/[\-:]([a-z])/g;function we(e){return e[1].toUpperCase()}function xe(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function Ee(e,t,n,r){var o=be.hasOwnProperty(t)?be[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!he.call(me,e)||!he.call(ye,e)&&(de.test(e)?me[e]=!0:(ye[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function ke(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Te(e){e._valueTracker||(e._valueTracker=function(e){var t=ke(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Se(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=ke(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function _e(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Pe(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=xe(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Ce(e,t){null!=(t=t.checked)&&Ee(e,"checked",t,!1)}function Oe(e,t){Ce(e,t);var n=xe(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?Ne(e,t.type,n):t.hasOwnProperty("defaultValue")&&Ne(e,t.type,xe(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function je(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function Ne(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function Re(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function Me(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+xe(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function Ie(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ze(e,t){var n=t.value;if(null==n){if(n=t.defaultValue,null!=(t=t.children)){if(null!=n)throw Error(a(92));if(Array.isArray(t)){if(!(1>=t.length))throw Error(a(93));t=t[0]}n=t}null==n&&(n="")}e._wrapperState={initialValue:xe(n)}}function Ue(e,t){var n=xe(t.value),r=xe(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function Ae(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(ge,we);be[t]=new ve(t,1,!1,e,null,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(ge,we);be[t]=new ve(t,1,!1,e,"http://www.w3.org/1999/xlink",!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(ge,we);be[t]=new ve(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1)})),["tabIndex","crossOrigin"].forEach((function(e){be[e]=new ve(e,1,!1,e.toLowerCase(),null,!1)})),be.xlinkHref=new ve("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0),["src","href","action","formAction"].forEach((function(e){be[e]=new ve(e,1,!1,e.toLowerCase(),null,!0)}));var De="http://www.w3.org/1999/xhtml",Fe="http://www.w3.org/2000/svg";function Le(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function $e(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Le(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var We,Ve=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,o){MSApp.execUnsafeLocalFunction((function(){return e(t,n)}))}:e}((function(e,t){if(e.namespaceURI!==Fe||"innerHTML"in e)e.innerHTML=t;else{for((We=We||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=We.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}}));function qe(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}function Be(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var He={animationend:Be("Animation","AnimationEnd"),animationiteration:Be("Animation","AnimationIteration"),animationstart:Be("Animation","AnimationStart"),transitionend:Be("Transition","TransitionEnd")},Ke={},Qe={};function Ye(e){if(Ke[e])return Ke[e];if(!He[e])return e;var t,n=He[e];for(t in n)if(n.hasOwnProperty(t)&&t in Qe)return Ke[e]=n[t];return e}Z&&(Qe=document.createElement("div").style,"AnimationEvent"in window||(delete He.animationend.animation,delete He.animationiteration.animation,delete He.animationstart.animation),"TransitionEvent"in window||delete He.transitionend.transition);var Xe=Ye("animationend"),Ge=Ye("animationiteration"),Je=Ye("animationstart"),Ze=Ye("transitionend"),et="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" ");function tt(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).effectTag)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function nt(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function rt(e){if(tt(e)!==e)throw Error(a(188))}function ot(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=tt(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var i=o.alternate;if(null===i){if(null!==(r=o.return)){n=r;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===n)return rt(o),e;if(i===r)return rt(o),t;i=i.sibling}throw Error(a(188))}if(n.return!==r.return)n=o,r=i;else{for(var u=!1,l=o.child;l;){if(l===n){u=!0,n=o,r=i;break}if(l===r){u=!0,r=o,n=i;break}l=l.sibling}if(!u){for(l=i.child;l;){if(l===n){u=!0,n=i,r=o;break}if(l===r){u=!0,r=i,n=o;break}l=l.sibling}if(!u)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}var it,at,ut,lt=!1,ct=[],st=null,ft=null,pt=null,dt=new Map,ht=new Map,yt=[],mt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit".split(" "),vt="focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture".split(" ");function bt(e,t,n,r){return{blockedOn:e,topLevelType:t,eventSystemFlags:32|n,nativeEvent:r}}function gt(e,t){switch(e){case"focus":case"blur":st=null;break;case"dragenter":case"dragleave":ft=null;break;case"mouseover":case"mouseout":pt=null;break;case"pointerover":case"pointerout":dt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":ht.delete(t.pointerId)}}function wt(e,t,n,r,o){return null===e||e.nativeEvent!==o?(e=bt(t,n,r,o),null!==t&&(null!==(t=cr(t))&&at(t)),e):(e.eventSystemFlags|=r,e)}function xt(e){var t=lr(e.target);if(null!==t){var n=tt(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=nt(n)))return e.blockedOn=t,void i.unstable_runWithPriority(e.priority,(function(){ut(n)}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Et(e){if(null!==e.blockedOn)return!1;var t=Nn(e.topLevelType,e.eventSystemFlags,e.nativeEvent);if(null!==t){var n=cr(t);return null!==n&&at(n),e.blockedOn=t,!1}return!0}function kt(e,t,n){Et(e)&&n.delete(t)}function Tt(){for(lt=!1;0<ct.length;){var e=ct[0];if(null!==e.blockedOn){null!==(e=cr(e.blockedOn))&&it(e);break}var t=Nn(e.topLevelType,e.eventSystemFlags,e.nativeEvent);null!==t?e.blockedOn=t:ct.shift()}null!==st&&Et(st)&&(st=null),null!==ft&&Et(ft)&&(ft=null),null!==pt&&Et(pt)&&(pt=null),dt.forEach(kt),ht.forEach(kt)}function St(e,t){e.blockedOn===t&&(e.blockedOn=null,lt||(lt=!0,i.unstable_scheduleCallback(i.unstable_NormalPriority,Tt)))}function _t(e){function t(t){return St(t,e)}if(0<ct.length){St(ct[0],e);for(var n=1;n<ct.length;n++){var r=ct[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==st&&St(st,e),null!==ft&&St(ft,e),null!==pt&&St(pt,e),dt.forEach(t),ht.forEach(t),n=0;n<yt.length;n++)(r=yt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<yt.length&&null===(n=yt[0]).blockedOn;)xt(n),null===n.blockedOn&&yt.shift()}function Pt(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function Ct(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function Ot(e,t,n){(t=R(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=_(n._dispatchListeners,t),n._dispatchInstances=_(n._dispatchInstances,e))}function jt(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=Ct(t);for(t=n.length;0<t--;)Ot(n[t],"captured",e);for(t=0;t<n.length;t++)Ot(n[t],"bubbled",e)}}function Nt(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=R(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=_(n._dispatchListeners,t),n._dispatchInstances=_(n._dispatchInstances,e))}function Rt(e){e&&e.dispatchConfig.registrationName&&Nt(e._targetInst,null,e)}function Mt(e){P(e,jt)}function It(){return!0}function zt(){return!1}function Ut(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?It:zt,this.isPropagationStopped=zt,this}function At(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function Dt(e){if(!(e instanceof this))throw Error(a(279));e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function Ft(e){e.eventPool=[],e.getPooled=At,e.release=Dt}o(Ut.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=It)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=It)},persist:function(){this.isPersistent=It},isPersistent:zt,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=zt,this._dispatchInstances=this._dispatchListeners=null}}),Ut.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},Ut.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var i=new t;return o(i,n.prototype),n.prototype=i,n.prototype.constructor=n,n.Interface=o({},r.Interface,e),n.extend=r.extend,Ft(n),n},Ft(Ut);var Lt=Ut.extend({animationName:null,elapsedTime:null,pseudoElement:null}),$t=Ut.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),Wt=Ut.extend({view:null,detail:null}),Vt=Wt.extend({relatedTarget:null});function qt(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var Bt={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Ht={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Kt={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Qt(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Kt[e])&&!!t[e]}function Yt(){return Qt}for(var Xt=Wt.extend({key:function(e){if(e.key){var t=Bt[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=qt(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Ht[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Yt,charCode:function(e){return"keypress"===e.type?qt(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?qt(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Gt=0,Jt=0,Zt=!1,en=!1,tn=Wt.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Yt,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=Gt;return Gt=e.screenX,Zt?"mousemove"===e.type?e.screenX-t:0:(Zt=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=Jt;return Jt=e.screenY,en?"mousemove"===e.type?e.screenY-t:0:(en=!0,0)}}),nn=tn.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),rn=tn.extend({dataTransfer:null}),on=Wt.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Yt}),an=Ut.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),un=tn.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),ln=[["blur","blur",0],["cancel","cancel",0],["click","click",0],["close","close",0],["contextmenu","contextMenu",0],["copy","copy",0],["cut","cut",0],["auxclick","auxClick",0],["dblclick","doubleClick",0],["dragend","dragEnd",0],["dragstart","dragStart",0],["drop","drop",0],["focus","focus",0],["input","input",0],["invalid","invalid",0],["keydown","keyDown",0],["keypress","keyPress",0],["keyup","keyUp",0],["mousedown","mouseDown",0],["mouseup","mouseUp",0],["paste","paste",0],["pause","pause",0],["play","play",0],["pointercancel","pointerCancel",0],["pointerdown","pointerDown",0],["pointerup","pointerUp",0],["ratechange","rateChange",0],["reset","reset",0],["seeked","seeked",0],["submit","submit",0],["touchcancel","touchCancel",0],["touchend","touchEnd",0],["touchstart","touchStart",0],["volumechange","volumeChange",0],["drag","drag",1],["dragenter","dragEnter",1],["dragexit","dragExit",1],["dragleave","dragLeave",1],["dragover","dragOver",1],["mousemove","mouseMove",1],["mouseout","mouseOut",1],["mouseover","mouseOver",1],["pointermove","pointerMove",1],["pointerout","pointerOut",1],["pointerover","pointerOver",1],["scroll","scroll",1],["toggle","toggle",1],["touchmove","touchMove",1],["wheel","wheel",1],["abort","abort",2],[Xe,"animationEnd",2],[Ge,"animationIteration",2],[Je,"animationStart",2],["canplay","canPlay",2],["canplaythrough","canPlayThrough",2],["durationchange","durationChange",2],["emptied","emptied",2],["encrypted","encrypted",2],["ended","ended",2],["error","error",2],["gotpointercapture","gotPointerCapture",2],["load","load",2],["loadeddata","loadedData",2],["loadedmetadata","loadedMetadata",2],["loadstart","loadStart",2],["lostpointercapture","lostPointerCapture",2],["playing","playing",2],["progress","progress",2],["seeking","seeking",2],["stalled","stalled",2],["suspend","suspend",2],["timeupdate","timeUpdate",2],[Ze,"transitionEnd",2],["waiting","waiting",2]],cn={},sn={},fn=0;fn<ln.length;fn++){var pn=ln[fn],dn=pn[0],hn=pn[1],yn=pn[2],mn="on"+(hn[0].toUpperCase()+hn.slice(1)),vn={phasedRegistrationNames:{bubbled:mn,captured:mn+"Capture"},dependencies:[dn],eventPriority:yn};cn[hn]=vn,sn[dn]=vn}var bn={eventTypes:cn,getEventPriority:function(e){return void 0!==(e=sn[e])?e.eventPriority:2},extractEvents:function(e,t,n,r){var o=sn[e];if(!o)return null;switch(e){case"keypress":if(0===qt(n))return null;case"keydown":case"keyup":e=Xt;break;case"blur":case"focus":e=Vt;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=tn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=rn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=on;break;case Xe:case Ge:case Je:e=Lt;break;case Ze:e=an;break;case"scroll":e=Wt;break;case"wheel":e=un;break;case"copy":case"cut":case"paste":e=$t;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=nn;break;default:e=Ut}return Mt(t=e.getPooled(o,t,n,r)),t}},gn=i.unstable_UserBlockingPriority,wn=i.unstable_runWithPriority,xn=bn.getEventPriority,En=[];function kn(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r=n;if(3===r.tag)r=r.stateNode.containerInfo;else{for(;r.return;)r=r.return;r=3!==r.tag?null:r.stateNode.containerInfo}if(!r)break;5!==(t=n.tag)&&6!==t||e.ancestors.push(n),n=lr(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var o=Pt(e.nativeEvent);r=e.topLevelType;for(var i=e.nativeEvent,a=e.eventSystemFlags,u=null,l=0;l<f.length;l++){var c=f[l];c&&(c=c.extractEvents(r,t,i,o,a))&&(u=_(u,c))}j(u)}}var Tn=!0;function Sn(e,t){_n(t,e,!1)}function _n(e,t,n){switch(xn(t)){case 0:var r=Pn.bind(null,t,1);break;case 1:r=Cn.bind(null,t,1);break;default:r=jn.bind(null,t,1)}n?e.addEventListener(t,r,!0):e.addEventListener(t,r,!1)}function Pn(e,t,n){se||le();var r=jn,o=se;se=!0;try{ue(r,e,t,n)}finally{(se=o)||pe()}}function Cn(e,t,n){wn(gn,jn.bind(null,e,t,n))}function On(e,t,n,r){if(En.length){var o=En.pop();o.topLevelType=e,o.eventSystemFlags=t,o.nativeEvent=n,o.targetInst=r,e=o}else e={topLevelType:e,eventSystemFlags:t,nativeEvent:n,targetInst:r,ancestors:[]};try{if(t=kn,n=e,fe)t(n,void 0);else{fe=!0;try{ce(t,n,void 0)}finally{fe=!1,pe()}}}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,En.length<10&&En.push(e)}}function jn(e,t,n){if(Tn)if(0<ct.length&&-1<mt.indexOf(e))e=bt(null,e,t,n),ct.push(e);else{var r=Nn(e,t,n);null===r?gt(e,n):-1<mt.indexOf(e)?(e=bt(r,e,t,n),ct.push(e)):function(e,t,n,r){switch(t){case"focus":return st=wt(st,e,t,n,r),!0;case"dragenter":return ft=wt(ft,e,t,n,r),!0;case"mouseover":return pt=wt(pt,e,t,n,r),!0;case"pointerover":var o=r.pointerId;return dt.set(o,wt(dt.get(o)||null,e,t,n,r)),!0;case"gotpointercapture":return o=r.pointerId,ht.set(o,wt(ht.get(o)||null,e,t,n,r)),!0}return!1}(r,e,t,n)||(gt(e,n),On(e,t,n,null))}}function Nn(e,t,n){var r=Pt(n);if(null!==(r=lr(r))){var o=tt(r);if(null===o)r=null;else{var i=o.tag;if(13===i){if(null!==(r=nt(o)))return r;r=null}else if(3===i){if(o.stateNode.hydrate)return 3===o.tag?o.stateNode.containerInfo:null;r=null}else o!==r&&(r=null)}}return On(e,t,n,r),null}function Rn(e){if(!Z)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}var Mn=new("function"==typeof WeakMap?WeakMap:Map);function In(e){var t=Mn.get(e);return void 0===t&&(t=new Set,Mn.set(e,t)),t}function zn(e,t,n){if(!n.has(e)){switch(e){case"scroll":_n(t,"scroll",!0);break;case"focus":case"blur":_n(t,"focus",!0),_n(t,"blur",!0),n.add("blur"),n.add("focus");break;case"cancel":case"close":Rn(e)&&_n(t,e,!0);break;case"invalid":case"submit":case"reset":break;default:-1===et.indexOf(e)&&Sn(e,t)}n.add(e)}}var Un={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},An=["Webkit","ms","Moz","O"];function Dn(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||Un.hasOwnProperty(e)&&Un[e]?(""+t).trim():t+"px"}function Fn(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=Dn(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(Un).forEach((function(e){An.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Un[t]=Un[e]}))}));var Ln=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function $n(e,t){if(t){if(Ln[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e,""));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if(!("object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62,""))}}function Wn(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Vn(e,t){var n=In(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=h[t];for(var r=0;r<t.length;r++)zn(t[r],e,n)}function qn(){}function Bn(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Hn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Kn(e,t){var n,r=Hn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Hn(r)}}function Qn(){for(var e=window,t=Bn();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=Bn((e=t.contentWindow).document)}return t}function Yn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var Xn=null,Gn=null;function Jn(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Zn(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var er="function"==typeof setTimeout?setTimeout:void 0,tr="function"==typeof clearTimeout?clearTimeout:void 0;function nr(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function rr(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var or=Math.random().toString(36).slice(2),ir="__reactInternalInstance$"+or,ar="__reactEventHandlers$"+or,ur="__reactContainere$"+or;function lr(e){var t=e[ir];if(t)return t;for(var n=e.parentNode;n;){if(t=n[ur]||n[ir]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=rr(e);null!==e;){if(n=e[ir])return n;e=rr(e)}return t}n=(e=n).parentNode}return null}function cr(e){return!(e=e[ir]||e[ur])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function sr(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function fr(e){return e[ar]||null}var pr=null,dr=null,hr=null;function yr(){if(hr)return hr;var e,t,n=dr,r=n.length,o="value"in pr?pr.value:pr.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return hr=o.slice(e,1<t?1-t:void 0)}var mr=Ut.extend({data:null}),vr=Ut.extend({data:null}),br=[9,13,27,32],gr=Z&&"CompositionEvent"in window,wr=null;Z&&"documentMode"in document&&(wr=document.documentMode);var xr=Z&&"TextEvent"in window&&!wr,Er=Z&&(!gr||wr&&8<wr&&11>=wr),kr=String.fromCharCode(32),Tr={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},Sr=!1;function _r(e,t){switch(e){case"keyup":return-1!==br.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function Pr(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Cr=!1;var Or={eventTypes:Tr,extractEvents:function(e,t,n,r){var o;if(gr)e:{switch(e){case"compositionstart":var i=Tr.compositionStart;break e;case"compositionend":i=Tr.compositionEnd;break e;case"compositionupdate":i=Tr.compositionUpdate;break e}i=void 0}else Cr?_r(e,n)&&(i=Tr.compositionEnd):"keydown"===e&&229===n.keyCode&&(i=Tr.compositionStart);return i?(Er&&"ko"!==n.locale&&(Cr||i!==Tr.compositionStart?i===Tr.compositionEnd&&Cr&&(o=yr()):(dr="value"in(pr=r)?pr.value:pr.textContent,Cr=!0)),i=mr.getPooled(i,t,n,r),o?i.data=o:null!==(o=Pr(n))&&(i.data=o),Mt(i),o=i):o=null,(e=xr?function(e,t){switch(e){case"compositionend":return Pr(t);case"keypress":return 32!==t.which?null:(Sr=!0,kr);case"textInput":return(e=t.data)===kr&&Sr?null:e;default:return null}}(e,n):function(e,t){if(Cr)return"compositionend"===e||!gr&&_r(e,t)?(e=yr(),hr=dr=pr=null,Cr=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Er&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=vr.getPooled(Tr.beforeInput,t,n,r)).data=e,Mt(t)):t=null,null===o?t:null===t?o:[o,t]}},jr={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Nr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!jr[e.type]:"textarea"===t}var Rr={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function Mr(e,t,n){return(e=Ut.getPooled(Rr.change,e,t,n)).type="change",oe(n),Mt(e),e}var Ir=null,zr=null;function Ur(e){j(e)}function Ar(e){if(Se(sr(e)))return e}function Dr(e,t){if("change"===e)return t}var Fr=!1;function Lr(){Ir&&(Ir.detachEvent("onpropertychange",$r),zr=Ir=null)}function $r(e){if("value"===e.propertyName&&Ar(zr))if(e=Mr(zr,e,Pt(e)),se)j(e);else{se=!0;try{ae(Ur,e)}finally{se=!1,pe()}}}function Wr(e,t,n){"focus"===e?(Lr(),zr=n,(Ir=t).attachEvent("onpropertychange",$r)):"blur"===e&&Lr()}function Vr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Ar(zr)}function qr(e,t){if("click"===e)return Ar(t)}function Br(e,t){if("input"===e||"change"===e)return Ar(t)}Z&&(Fr=Rn("input")&&(!document.documentMode||9<document.documentMode));var Hr,Kr={eventTypes:Rr,_isInputEventSupported:Fr,extractEvents:function(e,t,n,r){var o=t?sr(t):window,i=o.nodeName&&o.nodeName.toLowerCase();if("select"===i||"input"===i&&"file"===o.type)var a=Dr;else if(Nr(o))if(Fr)a=Br;else{a=Vr;var u=Wr}else(i=o.nodeName)&&"input"===i.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(a=qr);if(a&&(a=a(e,t)))return Mr(a,n,r);u&&u(e,o,t),"blur"===e&&(e=o._wrapperState)&&e.controlled&&"number"===o.type&&Ne(o,"number",o.value)}},Qr={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Yr={eventTypes:Qr,extractEvents:function(e,t,n,r,o){var i="mouseover"===e||"pointerover"===e,a="mouseout"===e||"pointerout"===e;if(i&&0==(32&o)&&(n.relatedTarget||n.fromElement)||!a&&!i)return null;if(o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window,a?(a=t,null!==(t=(t=n.relatedTarget||n.toElement)?lr(t):null)&&(t!==(i=tt(t))||5!==t.tag&&6!==t.tag)&&(t=null)):a=null,a===t)return null;if("mouseout"===e||"mouseover"===e)var u=tn,l=Qr.mouseLeave,c=Qr.mouseEnter,s="mouse";else"pointerout"!==e&&"pointerover"!==e||(u=nn,l=Qr.pointerLeave,c=Qr.pointerEnter,s="pointer");if(e=null==a?o:sr(a),o=null==t?o:sr(t),(l=u.getPooled(l,a,n,r)).type=s+"leave",l.target=e,l.relatedTarget=o,(r=u.getPooled(c,t,n,r)).type=s+"enter",r.target=o,r.relatedTarget=e,s=t,(u=a)&&s)e:{for(e=s,a=0,t=c=u;t;t=Ct(t))a++;for(t=0,o=e;o;o=Ct(o))t++;for(;0<a-t;)c=Ct(c),a--;for(;0<t-a;)e=Ct(e),t--;for(;a--;){if(c===e||c===e.alternate)break e;c=Ct(c),e=Ct(e)}c=null}else c=null;for(e=c,c=[];u&&u!==e&&(null===(a=u.alternate)||a!==e);)c.push(u),u=Ct(u);for(u=[];s&&s!==e&&(null===(a=s.alternate)||a!==e);)u.push(s),s=Ct(s);for(s=0;s<c.length;s++)Nt(c[s],"bubbled",l);for(s=u.length;0<s--;)Nt(u[s],"captured",r);return n===Hr?(Hr=null,[l]):(Hr=n,[l,r])}};var Xr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},Gr=Object.prototype.hasOwnProperty;function Jr(e,t){if(Xr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!Gr.call(t,n[r])||!Xr(e[n[r]],t[n[r]]))return!1;return!0}var Zr=Z&&"documentMode"in document&&11>=document.documentMode,eo={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},to=null,no=null,ro=null,oo=!1;function io(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return oo||null==to||to!==Bn(n)?null:("selectionStart"in(n=to)&&Yn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},ro&&Jr(ro,n)?null:(ro=n,(e=Ut.getPooled(eo.select,no,e,t)).type="select",e.target=to,Mt(e),e))}var ao={eventTypes:eo,extractEvents:function(e,t,n,r){var o,i=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(o=!i)){e:{i=In(i),o=h.onSelect;for(var a=0;a<o.length;a++)if(!i.has(o[a])){i=!1;break e}i=!0}o=!i}if(o)return null;switch(i=t?sr(t):window,e){case"focus":(Nr(i)||"true"===i.contentEditable)&&(to=i,no=t,ro=null);break;case"blur":ro=no=to=null;break;case"mousedown":oo=!0;break;case"contextmenu":case"mouseup":case"dragend":return oo=!1,io(n,r);case"selectionchange":if(Zr)break;case"keydown":case"keyup":return io(n,r)}return null}};N.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),E=fr,k=cr,T=sr,N.injectEventPluginsByName({SimpleEventPlugin:bn,EnterLeaveEventPlugin:Yr,ChangeEventPlugin:Kr,SelectEventPlugin:ao,BeforeInputEventPlugin:Or}),new Set;var uo=[],lo=-1;function co(e){0>lo||(e.current=uo[lo],uo[lo]=null,lo--)}function so(e,t){lo++,uo[lo]=e.current,e.current=t}var fo={},po={current:fo},ho={current:!1},yo=fo;function mo(e,t){var n=e.type.contextTypes;if(!n)return fo;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function vo(e){return null!=(e=e.childContextTypes)}function bo(e){co(ho),co(po)}function go(e){co(ho),co(po)}function wo(e,t,n){if(po.current!==fo)throw Error(a(168));so(po,t),so(ho,n)}function xo(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())if(!(i in e))throw Error(a(108,G(t)||"Unknown",i));return o({},n,{},r)}function Eo(e){var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||fo,yo=po.current,so(po,t),so(ho,ho.current),!0}function ko(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(t=xo(e,t,yo),r.__reactInternalMemoizedMergedChildContext=t,co(ho),co(po),so(po,t)):co(ho),so(ho,n)}var To=i.unstable_runWithPriority,So=i.unstable_scheduleCallback,_o=i.unstable_cancelCallback,Po=i.unstable_shouldYield,Co=i.unstable_requestPaint,Oo=i.unstable_now,jo=i.unstable_getCurrentPriorityLevel,No=i.unstable_ImmediatePriority,Ro=i.unstable_UserBlockingPriority,Mo=i.unstable_NormalPriority,Io=i.unstable_LowPriority,zo=i.unstable_IdlePriority,Uo={},Ao=void 0!==Co?Co:function(){},Do=null,Fo=null,Lo=!1,$o=Oo(),Wo=1e4>$o?Oo:function(){return Oo()-$o};function Vo(){switch(jo()){case No:return 99;case Ro:return 98;case Mo:return 97;case Io:return 96;case zo:return 95;default:throw Error(a(332))}}function qo(e){switch(e){case 99:return No;case 98:return Ro;case 97:return Mo;case 96:return Io;case 95:return zo;default:throw Error(a(332))}}function Bo(e,t){return e=qo(e),To(e,t)}function Ho(e,t,n){return e=qo(e),So(e,t,n)}function Ko(e){return null===Do?(Do=[e],Fo=So(No,Yo)):Do.push(e),Uo}function Qo(){if(null!==Fo){var e=Fo;Fo=null,_o(e)}Yo()}function Yo(){if(!Lo&&null!==Do){Lo=!0;var e=0;try{var t=Do;Bo(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Do=null}catch(t){throw null!==Do&&(Do=Do.slice(e+1)),So(No,Qo),t}finally{Lo=!1}}}var Xo=3;function Go(e,t,n){return 1073741821-(1+((1073741821-e+t/10)/(n/=10)|0))*n}function Jo(e,t){if(e&&e.defaultProps)for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var Zo={current:null},ei=null,ti=null,ni=null;function ri(){ni=ti=ei=null}function oi(e,t){var n=e.type._context;so(Zo,n._currentValue),n._currentValue=t}function ii(e){var t=Zo.current;co(Zo),e.type._context._currentValue=t}function ai(e,t){for(;null!==e;){var n=e.alternate;if(e.childExpirationTime<t)e.childExpirationTime=t,null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t);else{if(!(null!==n&&n.childExpirationTime<t))break;n.childExpirationTime=t}e=e.return}}function ui(e,t){ei=e,ni=ti=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(e.expirationTime>=t&&($a=!0),e.firstContext=null)}function li(e,t){if(ni!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(ni=e,t=1073741823),t={context:e,observedBits:t,next:null},null===ti){if(null===ei)throw Error(a(308));ti=t,ei.dependencies={expirationTime:0,firstContext:t,responders:null}}else ti=ti.next=t;return e._currentValue}var ci=!1;function si(e){return{baseState:e,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function fi(e){return{baseState:e.baseState,firstUpdate:e.firstUpdate,lastUpdate:e.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function pi(e,t){return{expirationTime:e,suspenseConfig:t,tag:0,payload:null,callback:null,next:null,nextEffect:null}}function di(e,t){null===e.lastUpdate?e.firstUpdate=e.lastUpdate=t:(e.lastUpdate.next=t,e.lastUpdate=t)}function hi(e,t){var n=e.alternate;if(null===n){var r=e.updateQueue,o=null;null===r&&(r=e.updateQueue=si(e.memoizedState))}else r=e.updateQueue,o=n.updateQueue,null===r?null===o?(r=e.updateQueue=si(e.memoizedState),o=n.updateQueue=si(n.memoizedState)):r=e.updateQueue=fi(o):null===o&&(o=n.updateQueue=fi(r));null===o||r===o?di(r,t):null===r.lastUpdate||null===o.lastUpdate?(di(r,t),di(o,t)):(di(r,t),o.lastUpdate=t)}function yi(e,t){var n=e.updateQueue;null===(n=null===n?e.updateQueue=si(e.memoizedState):mi(e,n)).lastCapturedUpdate?n.firstCapturedUpdate=n.lastCapturedUpdate=t:(n.lastCapturedUpdate.next=t,n.lastCapturedUpdate=t)}function mi(e,t){var n=e.alternate;return null!==n&&t===n.updateQueue&&(t=e.updateQueue=fi(t)),t}function vi(e,t,n,r,i,a){switch(n.tag){case 1:return"function"==typeof(e=n.payload)?e.call(a,r,i):e;case 3:e.effectTag=-4097&e.effectTag|64;case 0:if(null==(i="function"==typeof(e=n.payload)?e.call(a,r,i):e))break;return o({},r,i);case 2:ci=!0}return r}function bi(e,t,n,r,o){ci=!1;for(var i=(t=mi(e,t)).baseState,a=null,u=0,l=t.firstUpdate,c=i;null!==l;){var s=l.expirationTime;s<o?(null===a&&(a=l,i=c),u<s&&(u=s)):(fl(s,l.suspenseConfig),c=vi(e,0,l,c,n,r),null!==l.callback&&(e.effectTag|=32,l.nextEffect=null,null===t.lastEffect?t.firstEffect=t.lastEffect=l:(t.lastEffect.nextEffect=l,t.lastEffect=l))),l=l.next}for(s=null,l=t.firstCapturedUpdate;null!==l;){var f=l.expirationTime;f<o?(null===s&&(s=l,null===a&&(i=c)),u<f&&(u=f)):(c=vi(e,0,l,c,n,r),null!==l.callback&&(e.effectTag|=32,l.nextEffect=null,null===t.lastCapturedEffect?t.firstCapturedEffect=t.lastCapturedEffect=l:(t.lastCapturedEffect.nextEffect=l,t.lastCapturedEffect=l))),l=l.next}null===a&&(t.lastUpdate=null),null===s?t.lastCapturedUpdate=null:e.effectTag|=32,null===a&&null===s&&(i=c),t.baseState=i,t.firstUpdate=a,t.firstCapturedUpdate=s,pl(u),e.expirationTime=u,e.memoizedState=c}function gi(e,t,n){null!==t.firstCapturedUpdate&&(null!==t.lastUpdate&&(t.lastUpdate.next=t.firstCapturedUpdate,t.lastUpdate=t.lastCapturedUpdate),t.firstCapturedUpdate=t.lastCapturedUpdate=null),wi(t.firstEffect,n),t.firstEffect=t.lastEffect=null,wi(t.firstCapturedEffect,n),t.firstCapturedEffect=t.lastCapturedEffect=null}function wi(e,t){for(;null!==e;){var n=e.callback;if(null!==n){e.callback=null;var r=t;if("function"!=typeof n)throw Error(a(191,n));n.call(r)}e=e.nextEffect}}var xi=M.ReactCurrentBatchConfig,Ei=(new r.Component).refs;function ki(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,null!==(r=e.updateQueue)&&0===e.expirationTime&&(r.baseState=n)}var Ti={isMounted:function(e){return!!(e=e._reactInternalFiber)&&tt(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=Ju(),o=xi.suspense;(o=pi(r=Zu(r,e,o),o)).payload=t,null!=n&&(o.callback=n),hi(e,o),el(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=Ju(),o=xi.suspense;(o=pi(r=Zu(r,e,o),o)).tag=1,o.payload=t,null!=n&&(o.callback=n),hi(e,o),el(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=Ju(),r=xi.suspense;(r=pi(n=Zu(n,e,r),r)).tag=2,null!=t&&(r.callback=t),hi(e,r),el(e,n)}};function Si(e,t,n,r,o,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,a):!t.prototype||!t.prototype.isPureReactComponent||(!Jr(n,r)||!Jr(o,i))}function _i(e,t,n){var r=!1,o=fo,i=t.contextType;return"object"==typeof i&&null!==i?i=li(i):(o=vo(t)?yo:po.current,i=(r=null!=(r=t.contextTypes))?mo(e,o):fo),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=Ti,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),t}function Pi(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&Ti.enqueueReplaceState(t,t.state,null)}function Ci(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=Ei;var i=t.contextType;"object"==typeof i&&null!==i?o.context=li(i):(i=vo(t)?yo:po.current,o.context=mo(e,i)),null!==(i=e.updateQueue)&&(bi(e,i,n,o,r),o.state=e.memoizedState),"function"==typeof(i=t.getDerivedStateFromProps)&&(ki(e,t,i,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&Ti.enqueueReplaceState(o,o.state,null),null!==(i=e.updateQueue)&&(bi(e,i,n,o,r),o.state=e.memoizedState)),"function"==typeof o.componentDidMount&&(e.effectTag|=4)}var Oi=Array.isArray;function ji(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===Ei&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function Ni(e,t){if("textarea"!==e.type)throw Error(a(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,""))}function Ri(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t,n){return(e=Rl(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function u(t){return e&&null===t.alternate&&(t.effectTag=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=zl(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function c(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=ji(e,t,n),r.return=e,r):((r=Ml(n.type,n.key,n.props,null,e.mode,r)).ref=ji(e,t,n),r.return=e,r)}function s(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Ul(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,i){return null===t||7!==t.tag?((t=Il(n,e.mode,r,i)).return=e,t):((t=o(t,n)).return=e,t)}function p(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=zl(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case U:return(n=Ml(t.type,t.key,t.props,null,e.mode,n)).ref=ji(e,null,t),n.return=e,n;case A:return(t=Ul(t,e.mode,n)).return=e,t}if(Oi(t)||X(t))return(t=Il(t,e.mode,n,null)).return=e,t;Ni(e,t)}return null}function d(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case U:return n.key===o?n.type===D?f(e,t,n.props.children,r,o):c(e,t,n,r):null;case A:return n.key===o?s(e,t,n,r):null}if(Oi(n)||X(n))return null!==o?null:f(e,t,n,r,null);Ni(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case U:return e=e.get(null===r.key?n:r.key)||null,r.type===D?f(t,e,r.props.children,o,r.key):c(t,e,r,o);case A:return s(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(Oi(r)||X(r))return f(t,e=e.get(n)||null,r,o,null);Ni(t,r)}return null}function y(o,a,u,l){for(var c=null,s=null,f=a,y=a=0,m=null;null!==f&&y<u.length;y++){f.index>y?(m=f,f=null):m=f.sibling;var v=d(o,f,u[y],l);if(null===v){null===f&&(f=m);break}e&&f&&null===v.alternate&&t(o,f),a=i(v,a,y),null===s?c=v:s.sibling=v,s=v,f=m}if(y===u.length)return n(o,f),c;if(null===f){for(;y<u.length;y++)null!==(f=p(o,u[y],l))&&(a=i(f,a,y),null===s?c=f:s.sibling=f,s=f);return c}for(f=r(o,f);y<u.length;y++)null!==(m=h(f,o,y,u[y],l))&&(e&&null!==m.alternate&&f.delete(null===m.key?y:m.key),a=i(m,a,y),null===s?c=m:s.sibling=m,s=m);return e&&f.forEach((function(e){return t(o,e)})),c}function m(o,u,l,c){var s=X(l);if("function"!=typeof s)throw Error(a(150));if(null==(l=s.call(l)))throw Error(a(151));for(var f=s=null,y=u,m=u=0,v=null,b=l.next();null!==y&&!b.done;m++,b=l.next()){y.index>m?(v=y,y=null):v=y.sibling;var g=d(o,y,b.value,c);if(null===g){null===y&&(y=v);break}e&&y&&null===g.alternate&&t(o,y),u=i(g,u,m),null===f?s=g:f.sibling=g,f=g,y=v}if(b.done)return n(o,y),s;if(null===y){for(;!b.done;m++,b=l.next())null!==(b=p(o,b.value,c))&&(u=i(b,u,m),null===f?s=b:f.sibling=b,f=b);return s}for(y=r(o,y);!b.done;m++,b=l.next())null!==(b=h(y,o,m,b.value,c))&&(e&&null!==b.alternate&&y.delete(null===b.key?m:b.key),u=i(b,u,m),null===f?s=b:f.sibling=b,f=b);return e&&y.forEach((function(e){return t(o,e)})),s}return function(e,r,i,l){var c="object"==typeof i&&null!==i&&i.type===D&&null===i.key;c&&(i=i.props.children);var s="object"==typeof i&&null!==i;if(s)switch(i.$$typeof){case U:e:{for(s=i.key,c=r;null!==c;){if(c.key===s){if(7===c.tag?i.type===D:c.elementType===i.type){n(e,c.sibling),(r=o(c,i.type===D?i.props.children:i.props)).ref=ji(e,c,i),r.return=e,e=r;break e}n(e,c);break}t(e,c),c=c.sibling}i.type===D?((r=Il(i.props.children,e.mode,l,i.key)).return=e,e=r):((l=Ml(i.type,i.key,i.props,null,e.mode,l)).ref=ji(e,r,i),l.return=e,e=l)}return u(e);case A:e:{for(c=i.key;null!==r;){if(r.key===c){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=o(r,i.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Ul(i,e.mode,l)).return=e,e=r}return u(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,i)).return=e,e=r):(n(e,r),(r=zl(i,e.mode,l)).return=e,e=r),u(e);if(Oi(i))return y(e,r,i,l);if(X(i))return m(e,r,i,l);if(s&&Ni(e,i),void 0===i&&!c)switch(e.tag){case 1:case 0:throw e=e.type,Error(a(152,e.displayName||e.name||"Component"))}return n(e,r)}}var Mi=Ri(!0),Ii=Ri(!1),zi={},Ui={current:zi},Ai={current:zi},Di={current:zi};function Fi(e){if(e===zi)throw Error(a(174));return e}function Li(e,t){so(Di,t),so(Ai,e),so(Ui,zi);var n=t.nodeType;switch(n){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:$e(null,"");break;default:t=$e(t=(n=8===n?t.parentNode:t).namespaceURI||null,n=n.tagName)}co(Ui),so(Ui,t)}function $i(e){co(Ui),co(Ai),co(Di)}function Wi(e){Fi(Di.current);var t=Fi(Ui.current),n=$e(t,e.type);t!==n&&(so(Ai,e),so(Ui,n))}function Vi(e){Ai.current===e&&(co(Ui),co(Ai))}var qi={current:0};function Bi(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.effectTag))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function Hi(e,t){return{responder:e,props:t}}var Ki=M.ReactCurrentDispatcher,Qi=M.ReactCurrentBatchConfig,Yi=0,Xi=null,Gi=null,Ji=null,Zi=null,ea=null,ta=null,na=0,ra=null,oa=0,ia=!1,aa=null,ua=0;function la(){throw Error(a(321))}function ca(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Xr(e[n],t[n]))return!1;return!0}function sa(e,t,n,r,o,i){if(Yi=i,Xi=t,Ji=null!==e?e.memoizedState:null,Ki.current=null===Ji?Oa:ja,t=n(r,o),ia){do{ia=!1,ua+=1,Ji=null!==e?e.memoizedState:null,ta=Zi,ra=ea=Gi=null,Ki.current=ja,t=n(r,o)}while(ia);aa=null,ua=0}if(Ki.current=Ca,(e=Xi).memoizedState=Zi,e.expirationTime=na,e.updateQueue=ra,e.effectTag|=oa,e=null!==Gi&&null!==Gi.next,Yi=0,ta=ea=Zi=Ji=Gi=Xi=null,na=0,ra=null,oa=0,e)throw Error(a(300));return t}function fa(){Ki.current=Ca,Yi=0,ta=ea=Zi=Ji=Gi=Xi=null,na=0,ra=null,oa=0,ia=!1,aa=null,ua=0}function pa(){var e={memoizedState:null,baseState:null,queue:null,baseUpdate:null,next:null};return null===ea?Zi=ea=e:ea=ea.next=e,ea}function da(){if(null!==ta)ta=(ea=ta).next,Ji=null!==(Gi=Ji)?Gi.next:null;else{if(null===Ji)throw Error(a(310));var e={memoizedState:(Gi=Ji).memoizedState,baseState:Gi.baseState,queue:Gi.queue,baseUpdate:Gi.baseUpdate,next:null};ea=null===ea?Zi=e:ea.next=e,Ji=Gi.next}return ea}function ha(e,t){return"function"==typeof t?t(e):t}function ya(e){var t=da(),n=t.queue;if(null===n)throw Error(a(311));if(n.lastRenderedReducer=e,0<ua){var r=n.dispatch;if(null!==aa){var o=aa.get(n);if(void 0!==o){aa.delete(n);var i=t.memoizedState;do{i=e(i,o.action),o=o.next}while(null!==o);return Xr(i,t.memoizedState)||($a=!0),t.memoizedState=i,t.baseUpdate===n.last&&(t.baseState=i),n.lastRenderedState=i,[i,r]}}return[t.memoizedState,r]}r=n.last;var u=t.baseUpdate;if(i=t.baseState,null!==u?(null!==r&&(r.next=null),r=u.next):r=null!==r?r.next:null,null!==r){var l=o=null,c=r,s=!1;do{var f=c.expirationTime;f<Yi?(s||(s=!0,l=u,o=i),f>na&&pl(na=f)):(fl(f,c.suspenseConfig),i=c.eagerReducer===e?c.eagerState:e(i,c.action)),u=c,c=c.next}while(null!==c&&c!==r);s||(l=u,o=i),Xr(i,t.memoizedState)||($a=!0),t.memoizedState=i,t.baseUpdate=l,t.baseState=o,n.lastRenderedState=i}return[t.memoizedState,n.dispatch]}function ma(e){var t=pa();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={last:null,dispatch:null,lastRenderedReducer:ha,lastRenderedState:e}).dispatch=Pa.bind(null,Xi,e),[t.memoizedState,e]}function va(e){return ya(ha)}function ba(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===ra?(ra={lastEffect:null}).lastEffect=e.next=e:null===(t=ra.lastEffect)?ra.lastEffect=e.next=e:(n=t.next,t.next=e,e.next=n,ra.lastEffect=e),e}function ga(e,t,n,r){var o=pa();oa|=e,o.memoizedState=ba(t,n,void 0,void 0===r?null:r)}function wa(e,t,n,r){var o=da();r=void 0===r?null:r;var i=void 0;if(null!==Gi){var a=Gi.memoizedState;if(i=a.destroy,null!==r&&ca(r,a.deps))return void ba(0,n,i,r)}oa|=e,o.memoizedState=ba(t,n,i,r)}function xa(e,t){return ga(516,192,e,t)}function Ea(e,t){return wa(516,192,e,t)}function ka(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Ta(){}function Sa(e,t){return pa().memoizedState=[e,void 0===t?null:t],e}function _a(e,t){var n=da();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ca(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Pa(e,t,n){if(!(25>ua))throw Error(a(301));var r=e.alternate;if(e===Xi||null!==r&&r===Xi)if(ia=!0,e={expirationTime:Yi,suspenseConfig:null,action:n,eagerReducer:null,eagerState:null,next:null},null===aa&&(aa=new Map),void 0===(n=aa.get(t)))aa.set(t,e);else{for(t=n;null!==t.next;)t=t.next;t.next=e}else{var o=Ju(),i=xi.suspense;i={expirationTime:o=Zu(o,e,i),suspenseConfig:i,action:n,eagerReducer:null,eagerState:null,next:null};var u=t.last;if(null===u)i.next=i;else{var l=u.next;null!==l&&(i.next=l),u.next=i}if(t.last=i,0===e.expirationTime&&(null===r||0===r.expirationTime)&&null!==(r=t.lastRenderedReducer))try{var c=t.lastRenderedState,s=r(c,n);if(i.eagerReducer=r,i.eagerState=s,Xr(s,c))return}catch(e){}el(e,o)}}var Ca={readContext:li,useCallback:la,useContext:la,useEffect:la,useImperativeHandle:la,useLayoutEffect:la,useMemo:la,useReducer:la,useRef:la,useState:la,useDebugValue:la,useResponder:la,useDeferredValue:la,useTransition:la},Oa={readContext:li,useCallback:Sa,useContext:li,useEffect:xa,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,ga(4,36,ka.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ga(4,36,e,t)},useMemo:function(e,t){var n=pa();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=pa();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={last:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Pa.bind(null,Xi,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},pa().memoizedState=e},useState:ma,useDebugValue:Ta,useResponder:Hi,useDeferredValue:function(e,t){var n=ma(e),r=n[0],o=n[1];return xa((function(){i.unstable_next((function(){var n=Qi.suspense;Qi.suspense=void 0===t?null:t;try{o(e)}finally{Qi.suspense=n}}))}),[e,t]),r},useTransition:function(e){var t=ma(!1),n=t[0],r=t[1];return[Sa((function(t){r(!0),i.unstable_next((function(){var n=Qi.suspense;Qi.suspense=void 0===e?null:e;try{r(!1),t()}finally{Qi.suspense=n}}))}),[e,n]),n]}},ja={readContext:li,useCallback:_a,useContext:li,useEffect:Ea,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,wa(4,36,ka.bind(null,t,e),n)},useLayoutEffect:function(e,t){return wa(4,36,e,t)},useMemo:function(e,t){var n=da();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ca(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)},useReducer:ya,useRef:function(){return da().memoizedState},useState:va,useDebugValue:Ta,useResponder:Hi,useDeferredValue:function(e,t){var n=va(),r=n[0],o=n[1];return Ea((function(){i.unstable_next((function(){var n=Qi.suspense;Qi.suspense=void 0===t?null:t;try{o(e)}finally{Qi.suspense=n}}))}),[e,t]),r},useTransition:function(e){var t=va(),n=t[0],r=t[1];return[_a((function(t){r(!0),i.unstable_next((function(){var n=Qi.suspense;Qi.suspense=void 0===e?null:e;try{r(!1),t()}finally{Qi.suspense=n}}))}),[e,n]),n]}},Na=null,Ra=null,Ma=!1;function Ia(e,t){var n=jl(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function za(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Ua(e){if(Ma){var t=Ra;if(t){var n=t;if(!za(e,t)){if(!(t=nr(n.nextSibling))||!za(e,t))return e.effectTag=-1025&e.effectTag|2,Ma=!1,void(Na=e);Ia(Na,n)}Na=e,Ra=nr(t.firstChild)}else e.effectTag=-1025&e.effectTag|2,Ma=!1,Na=e}}function Aa(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Na=e}function Da(e){if(e!==Na)return!1;if(!Ma)return Aa(e),Ma=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Zn(t,e.memoizedProps))for(t=Ra;t;)Ia(e,t),t=nr(t.nextSibling);if(Aa(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){Ra=nr(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}Ra=null}}else Ra=Na?nr(e.stateNode.nextSibling):null;return!0}function Fa(){Ra=Na=null,Ma=!1}var La=M.ReactCurrentOwner,$a=!1;function Wa(e,t,n,r){t.child=null===e?Ii(t,null,n,r):Mi(t,e.child,n,r)}function Va(e,t,n,r,o){n=n.render;var i=t.ref;return ui(t,o),r=sa(e,t,n,r,i,o),null===e||$a?(t.effectTag|=1,Wa(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),iu(e,t,o))}function qa(e,t,n,r,o,i){if(null===e){var a=n.type;return"function"!=typeof a||Nl(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Ml(n.type,null,r,null,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,Ba(e,t,a,r,o,i))}return a=e.child,o<i&&(o=a.memoizedProps,(n=null!==(n=n.compare)?n:Jr)(o,r)&&e.ref===t.ref)?iu(e,t,i):(t.effectTag|=1,(e=Rl(a,r)).ref=t.ref,e.return=t,t.child=e)}function Ba(e,t,n,r,o,i){return null!==e&&Jr(e.memoizedProps,r)&&e.ref===t.ref&&($a=!1,o<i)?iu(e,t,i):Ka(e,t,n,r,i)}function Ha(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function Ka(e,t,n,r,o){var i=vo(n)?yo:po.current;return i=mo(t,i),ui(t,o),n=sa(e,t,n,r,i,o),null===e||$a?(t.effectTag|=1,Wa(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),iu(e,t,o))}function Qa(e,t,n,r,o){if(vo(n)){var i=!0;Eo(t)}else i=!1;if(ui(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),_i(t,n,r),Ci(t,n,r,o),r=!0;else if(null===e){var a=t.stateNode,u=t.memoizedProps;a.props=u;var l=a.context,c=n.contextType;"object"==typeof c&&null!==c?c=li(c):c=mo(t,c=vo(n)?yo:po.current);var s=n.getDerivedStateFromProps,f="function"==typeof s||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==r||l!==c)&&Pi(t,a,r,c),ci=!1;var p=t.memoizedState;l=a.state=p;var d=t.updateQueue;null!==d&&(bi(t,d,r,a,o),l=t.memoizedState),u!==r||p!==l||ho.current||ci?("function"==typeof s&&(ki(t,n,s,r),l=t.memoizedState),(u=ci||Si(t,n,u,r,p,l,c))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.effectTag|=4)):("function"==typeof a.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=l),a.props=r,a.state=l,a.context=c,r=u):("function"==typeof a.componentDidMount&&(t.effectTag|=4),r=!1)}else a=t.stateNode,u=t.memoizedProps,a.props=t.type===t.elementType?u:Jo(t.type,u),l=a.context,"object"==typeof(c=n.contextType)&&null!==c?c=li(c):c=mo(t,c=vo(n)?yo:po.current),(f="function"==typeof(s=n.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==r||l!==c)&&Pi(t,a,r,c),ci=!1,l=t.memoizedState,p=a.state=l,null!==(d=t.updateQueue)&&(bi(t,d,r,a,o),p=t.memoizedState),u!==r||l!==p||ho.current||ci?("function"==typeof s&&(ki(t,n,s,r),p=t.memoizedState),(s=ci||Si(t,n,u,r,l,p,c))?(f||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,p,c),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,p,c)),"function"==typeof a.componentDidUpdate&&(t.effectTag|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof a.componentDidUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=p),a.props=r,a.state=p,a.context=c,r=s):("function"!=typeof a.componentDidUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=256),r=!1);return Ya(e,t,n,r,i,o)}function Ya(e,t,n,r,o,i){Ha(e,t);var a=0!=(64&t.effectTag);if(!r&&!a)return o&&ko(t,n,!1),iu(e,t,i);r=t.stateNode,La.current=t;var u=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&a?(t.child=Mi(t,e.child,null,i),t.child=Mi(t,null,u,i)):Wa(e,t,u,i),t.memoizedState=r.state,o&&ko(t,n,!0),t.child}function Xa(e){var t=e.stateNode;t.pendingContext?wo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&wo(0,t.context,!1),Li(e,t.containerInfo)}var Ga,Ja,Za,eu={dehydrated:null,retryTime:0};function tu(e,t,n){var r,o=t.mode,i=t.pendingProps,a=qi.current,u=!1;if((r=0!=(64&t.effectTag))||(r=0!=(2&a)&&(null===e||null!==e.memoizedState)),r?(u=!0,t.effectTag&=-65):null!==e&&null===e.memoizedState||void 0===i.fallback||!0===i.unstable_avoidThisFallback||(a|=1),so(qi,1&a),null===e){if(void 0!==i.fallback&&Ua(t),u){if(u=i.fallback,(i=Il(null,o,0,null)).return=t,0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,i.child=e;null!==e;)e.return=i,e=e.sibling;return(n=Il(u,o,n,null)).return=t,i.sibling=n,t.memoizedState=eu,t.child=i,n}return o=i.children,t.memoizedState=null,t.child=Ii(t,null,o,n)}if(null!==e.memoizedState){if(o=(e=e.child).sibling,u){if(i=i.fallback,(n=Rl(e,e.pendingProps)).return=t,0==(2&t.mode)&&(u=null!==t.memoizedState?t.child.child:t.child)!==e.child)for(n.child=u;null!==u;)u.return=n,u=u.sibling;return(o=Rl(o,i,o.expirationTime)).return=t,n.sibling=o,n.childExpirationTime=0,t.memoizedState=eu,t.child=n,o}return n=Mi(t,e.child,i.children,n),t.memoizedState=null,t.child=n}if(e=e.child,u){if(u=i.fallback,(i=Il(null,o,0,null)).return=t,i.child=e,null!==e&&(e.return=i),0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,i.child=e;null!==e;)e.return=i,e=e.sibling;return(n=Il(u,o,n,null)).return=t,i.sibling=n,n.effectTag|=2,i.childExpirationTime=0,t.memoizedState=eu,t.child=i,n}return t.memoizedState=null,t.child=Mi(t,e,i.children,n)}function nu(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t),ai(e.return,t)}function ru(e,t,n,r,o,i){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,last:r,tail:n,tailExpiration:0,tailMode:o,lastEffect:i}:(a.isBackwards=t,a.rendering=null,a.last=r,a.tail=n,a.tailExpiration=0,a.tailMode=o,a.lastEffect=i)}function ou(e,t,n){var r=t.pendingProps,o=r.revealOrder,i=r.tail;if(Wa(e,t,r.children,n),0!=(2&(r=qi.current)))r=1&r|2,t.effectTag|=64;else{if(null!==e&&0!=(64&e.effectTag))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&nu(e,n);else if(19===e.tag)nu(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(so(qi,r),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===Bi(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),ru(t,!1,o,n,i,t.lastEffect);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===Bi(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}ru(t,!0,n,null,i,t.lastEffect);break;case"together":ru(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function iu(e,t,n){null!==e&&(t.dependencies=e.dependencies);var r=t.expirationTime;if(0!==r&&pl(r),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=Rl(e=t.child,e.pendingProps,e.expirationTime),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Rl(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}function au(e){e.effectTag|=4}function uu(e,t){switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function lu(e){switch(e.tag){case 1:vo(e.type)&&bo();var t=e.effectTag;return 4096&t?(e.effectTag=-4097&t|64,e):null;case 3:if($i(),go(),0!=(64&(t=e.effectTag)))throw Error(a(285));return e.effectTag=-4097&t|64,e;case 5:return Vi(e),null;case 13:return co(qi),4096&(t=e.effectTag)?(e.effectTag=-4097&t|64,e):null;case 19:return co(qi),null;case 4:return $i(),null;case 10:return ii(e),null;default:return null}}function cu(e,t){return{value:e,source:t,stack:J(t)}}Ga=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Ja=function(e,t,n,r,i){var a=e.memoizedProps;if(a!==r){var u,l,c=t.stateNode;switch(Fi(Ui.current),e=null,n){case"input":a=_e(c,a),r=_e(c,r),e=[];break;case"option":a=Re(c,a),r=Re(c,r),e=[];break;case"select":a=o({},a,{value:void 0}),r=o({},r,{value:void 0}),e=[];break;case"textarea":a=Ie(c,a),r=Ie(c,r),e=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(c.onclick=qn)}for(u in $n(n,r),n=null,a)if(!r.hasOwnProperty(u)&&a.hasOwnProperty(u)&&null!=a[u])if("style"===u)for(l in c=a[u])c.hasOwnProperty(l)&&(n||(n={}),n[l]="");else"dangerouslySetInnerHTML"!==u&&"children"!==u&&"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(d.hasOwnProperty(u)?e||(e=[]):(e=e||[]).push(u,null));for(u in r){var s=r[u];if(c=null!=a?a[u]:void 0,r.hasOwnProperty(u)&&s!==c&&(null!=s||null!=c))if("style"===u)if(c){for(l in c)!c.hasOwnProperty(l)||s&&s.hasOwnProperty(l)||(n||(n={}),n[l]="");for(l in s)s.hasOwnProperty(l)&&c[l]!==s[l]&&(n||(n={}),n[l]=s[l])}else n||(e||(e=[]),e.push(u,n)),n=s;else"dangerouslySetInnerHTML"===u?(s=s?s.__html:void 0,c=c?c.__html:void 0,null!=s&&c!==s&&(e=e||[]).push(u,""+s)):"children"===u?c===s||"string"!=typeof s&&"number"!=typeof s||(e=e||[]).push(u,""+s):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&(d.hasOwnProperty(u)?(null!=s&&Vn(i,u),e||c===s||(e=[])):(e=e||[]).push(u,s))}n&&(e=e||[]).push("style",n),i=e,(t.updateQueue=i)&&au(t)}},Za=function(e,t,n,r){n!==r&&au(t)};var su="function"==typeof WeakSet?WeakSet:Set;function fu(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=J(n)),null!==n&&G(n.type),t=t.value,null!==e&&1===e.tag&&G(e.type);try{console.error(t)}catch(e){setTimeout((function(){throw e}))}}function pu(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Tl(e,t)}else t.current=null}function du(e,t){switch(t.tag){case 0:case 11:case 15:hu(2,0,t);break;case 1:if(256&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Jo(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}break;case 3:case 5:case 6:case 4:case 17:break;default:throw Error(a(163))}}function hu(e,t,n){if(null!==(n=null!==(n=n.updateQueue)?n.lastEffect:null)){var r=n=n.next;do{if(0!=(r.tag&e)){var o=r.destroy;r.destroy=void 0,void 0!==o&&o()}0!=(r.tag&t)&&(o=r.create,r.destroy=o()),r=r.next}while(r!==n)}}function yu(e,t,n){switch("function"==typeof Cl&&Cl(t),t.tag){case 0:case 11:case 14:case 15:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var r=e.next;Bo(97<n?97:n,(function(){var e=r;do{var n=e.destroy;if(void 0!==n){var o=t;try{n()}catch(e){Tl(o,e)}}e=e.next}while(e!==r)}))}break;case 1:pu(t),"function"==typeof(n=t.stateNode).componentWillUnmount&&function(e,t){try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){Tl(e,t)}}(t,n);break;case 5:pu(t);break;case 4:gu(e,t,n)}}function mu(e){var t=e.alternate;e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.alternate=null,e.firstEffect=null,e.lastEffect=null,e.pendingProps=null,e.memoizedProps=null,null!==t&&mu(t)}function vu(e){return 5===e.tag||3===e.tag||4===e.tag}function bu(e){e:{for(var t=e.return;null!==t;){if(vu(t)){var n=t;break e}t=t.return}throw Error(a(160))}switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(a(161))}16&n.effectTag&&(qe(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||vu(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var o=e;;){var i=5===o.tag||6===o.tag;if(i){var u=i?o.stateNode:o.stateNode.instance;if(n)if(r){var l=u;u=n,8===(i=t).nodeType?i.parentNode.insertBefore(l,u):i.insertBefore(l,u)}else t.insertBefore(u,n);else r?(8===(l=t).nodeType?(i=l.parentNode).insertBefore(u,l):(i=l).appendChild(u),null!=(l=l._reactRootContainer)||null!==i.onclick||(i.onclick=qn)):t.appendChild(u)}else if(4!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===e)break;for(;null===o.sibling;){if(null===o.return||o.return===e)return;o=o.return}o.sibling.return=o.return,o=o.sibling}}function gu(e,t,n){for(var r,o,i=t,u=!1;;){if(!u){u=i.return;e:for(;;){if(null===u)throw Error(a(160));switch(r=u.stateNode,u.tag){case 5:o=!1;break e;case 3:case 4:r=r.containerInfo,o=!0;break e}u=u.return}u=!0}if(5===i.tag||6===i.tag){e:for(var l=e,c=i,s=n,f=c;;)if(yu(l,f,s),null!==f.child&&4!==f.tag)f.child.return=f,f=f.child;else{if(f===c)break;for(;null===f.sibling;){if(null===f.return||f.return===c)break e;f=f.return}f.sibling.return=f.return,f=f.sibling}o?(l=r,c=i.stateNode,8===l.nodeType?l.parentNode.removeChild(c):l.removeChild(c)):r.removeChild(i.stateNode)}else if(4===i.tag){if(null!==i.child){r=i.stateNode.containerInfo,o=!0,i.child.return=i,i=i.child;continue}}else if(yu(e,i,n),null!==i.child){i.child.return=i,i=i.child;continue}if(i===t)break;for(;null===i.sibling;){if(null===i.return||i.return===t)return;4===(i=i.return).tag&&(u=!1)}i.sibling.return=i.return,i=i.sibling}}function wu(e,t){switch(t.tag){case 0:case 11:case 14:case 15:hu(4,8,t);break;case 1:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,o=null!==e?e.memoizedProps:r;e=t.type;var i=t.updateQueue;if(t.updateQueue=null,null!==i){for(n[ar]=r,"input"===e&&"radio"===r.type&&null!=r.name&&Ce(n,r),Wn(e,o),t=Wn(e,r),o=0;o<i.length;o+=2){var u=i[o],l=i[o+1];"style"===u?Fn(n,l):"dangerouslySetInnerHTML"===u?Ve(n,l):"children"===u?qe(n,l):Ee(n,u,l,t)}switch(e){case"input":Oe(n,r);break;case"textarea":Ue(n,r);break;case"select":t=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(e=r.value)?Me(n,!!r.multiple,e,!1):t!==!!r.multiple&&(null!=r.defaultValue?Me(n,!!r.multiple,r.defaultValue,!0):Me(n,!!r.multiple,r.multiple?[]:"",!1))}}}break;case 6:if(null===t.stateNode)throw Error(a(162));t.stateNode.nodeValue=t.memoizedProps;break;case 3:(t=t.stateNode).hydrate&&(t.hydrate=!1,_t(t.containerInfo));break;case 12:break;case 13:if(n=t,null===t.memoizedState?r=!1:(r=!0,n=t.child,Lu=Wo()),null!==n)e:for(e=n;;){if(5===e.tag)i=e.stateNode,r?"function"==typeof(i=i.style).setProperty?i.setProperty("display","none","important"):i.display="none":(i=e.stateNode,o=null!=(o=e.memoizedProps.style)&&o.hasOwnProperty("display")?o.display:null,i.style.display=Dn("display",o));else if(6===e.tag)e.stateNode.nodeValue=r?"":e.memoizedProps;else{if(13===e.tag&&null!==e.memoizedState&&null===e.memoizedState.dehydrated){(i=e.child.sibling).return=e,e=i;continue}if(null!==e.child){e.child.return=e,e=e.child;continue}}if(e===n)break e;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}xu(t);break;case 19:xu(t);break;case 17:case 20:case 21:break;default:throw Error(a(163))}}function xu(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new su),t.forEach((function(t){var r=_l.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}var Eu="function"==typeof WeakMap?WeakMap:Map;function ku(e,t,n){(n=pi(n,null)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Wu||(Wu=!0,Vu=r),fu(e,t)},n}function Tu(e,t,n){(n=pi(n,null)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return fu(e,t),r(o)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===qu?qu=new Set([this]):qu.add(this),fu(e,t));var n=t.stack;this.componentDidCatch(t.value,{componentStack:null!==n?n:""})}),n}var Su,_u=Math.ceil,Pu=M.ReactCurrentDispatcher,Cu=M.ReactCurrentOwner,Ou=0,ju=null,Nu=null,Ru=0,Mu=0,Iu=null,zu=1073741823,Uu=1073741823,Au=null,Du=0,Fu=!1,Lu=0,$u=null,Wu=!1,Vu=null,qu=null,Bu=!1,Hu=null,Ku=90,Qu=null,Yu=0,Xu=null,Gu=0;function Ju(){return 0!=(48&Ou)?1073741821-(Wo()/10|0):0!==Gu?Gu:Gu=1073741821-(Wo()/10|0)}function Zu(e,t,n){if(0==(2&(t=t.mode)))return 1073741823;var r=Vo();if(0==(4&t))return 99===r?1073741823:1073741822;if(0!=(16&Ou))return Ru;if(null!==n)e=Go(e,0|n.timeoutMs||5e3,250);else switch(r){case 99:e=1073741823;break;case 98:e=Go(e,150,100);break;case 97:case 96:e=Go(e,5e3,250);break;case 95:e=2;break;default:throw Error(a(326))}return null!==ju&&e===Ru&&--e,e}function el(e,t){if(50<Yu)throw Yu=0,Xu=null,Error(a(185));if(null!==(e=tl(e,t))){var n=Vo();1073741823===t?0!=(8&Ou)&&0==(48&Ou)?il(e):(rl(e),0===Ou&&Qo()):rl(e),0==(4&Ou)||98!==n&&99!==n||(null===Qu?Qu=new Map([[e,t]]):(void 0===(n=Qu.get(e))||n>t)&&Qu.set(e,t))}}function tl(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,o=null;if(null===r&&3===e.tag)o=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){o=r.stateNode;break}r=r.return}return null!==o&&(ju===o&&(pl(t),4===Mu&&Fl(o,Ru)),Ll(o,t)),o}function nl(e){var t=e.lastExpiredTime;return 0!==t?t:Dl(e,t=e.firstPendingTime)?(t=e.lastPingedTime)>(e=e.nextKnownPendingLevel)?t:e:t}function rl(e){if(0!==e.lastExpiredTime)e.callbackExpirationTime=1073741823,e.callbackPriority=99,e.callbackNode=Ko(il.bind(null,e));else{var t=nl(e),n=e.callbackNode;if(0===t)null!==n&&(e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90);else{var r=Ju();if(1073741823===t?r=99:1===t||2===t?r=95:r=0>=(r=10*(1073741821-t)-10*(1073741821-r))?99:250>=r?98:5250>=r?97:95,null!==n){var o=e.callbackPriority;if(e.callbackExpirationTime===t&&o>=r)return;n!==Uo&&_o(n)}e.callbackExpirationTime=t,e.callbackPriority=r,t=1073741823===t?Ko(il.bind(null,e)):Ho(r,ol.bind(null,e),{timeout:10*(1073741821-t)-Wo()}),e.callbackNode=t}}}function ol(e,t){if(Gu=0,t)return $l(e,t=Ju()),rl(e),null;var n=nl(e);if(0!==n){if(t=e.callbackNode,0!=(48&Ou))throw Error(a(327));if(xl(),e===ju&&n===Ru||ll(e,n),null!==Nu){var r=Ou;Ou|=16;for(var o=sl();;)try{hl();break}catch(t){cl(e,t)}if(ri(),Ou=r,Pu.current=o,1===Mu)throw t=Iu,ll(e,n),Fl(e,n),rl(e),t;if(null===Nu)switch(o=e.finishedWork=e.current.alternate,e.finishedExpirationTime=n,r=Mu,ju=null,r){case 0:case 1:throw Error(a(345));case 2:$l(e,2<n?2:n);break;case 3:if(Fl(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=vl(o)),1073741823===zu&&10<(o=Lu+500-Wo())){if(Fu){var i=e.lastPingedTime;if(0===i||i>=n){e.lastPingedTime=n,ll(e,n);break}}if(0!==(i=nl(e))&&i!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}e.timeoutHandle=er(bl.bind(null,e),o);break}bl(e);break;case 4:if(Fl(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=vl(o)),Fu&&(0===(o=e.lastPingedTime)||o>=n)){e.lastPingedTime=n,ll(e,n);break}if(0!==(o=nl(e))&&o!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}if(1073741823!==Uu?r=10*(1073741821-Uu)-Wo():1073741823===zu?r=0:(r=10*(1073741821-zu)-5e3,0>(r=(o=Wo())-r)&&(r=0),(n=10*(1073741821-n)-o)<(r=(120>r?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*_u(r/1960))-r)&&(r=n)),10<r){e.timeoutHandle=er(bl.bind(null,e),r);break}bl(e);break;case 5:if(1073741823!==zu&&null!==Au){i=zu;var u=Au;if(0>=(r=0|u.busyMinDurationMs)?r=0:(o=0|u.busyDelayMs,r=(i=Wo()-(10*(1073741821-i)-(0|u.timeoutMs||5e3)))<=o?0:o+r-i),10<r){Fl(e,n),e.timeoutHandle=er(bl.bind(null,e),r);break}}bl(e);break;default:throw Error(a(329))}if(rl(e),e.callbackNode===t)return ol.bind(null,e)}}return null}function il(e){var t=e.lastExpiredTime;if(t=0!==t?t:1073741823,e.finishedExpirationTime===t)bl(e);else{if(0!=(48&Ou))throw Error(a(327));if(xl(),e===ju&&t===Ru||ll(e,t),null!==Nu){var n=Ou;Ou|=16;for(var r=sl();;)try{dl();break}catch(t){cl(e,t)}if(ri(),Ou=n,Pu.current=r,1===Mu)throw n=Iu,ll(e,t),Fl(e,t),rl(e),n;if(null!==Nu)throw Error(a(261));e.finishedWork=e.current.alternate,e.finishedExpirationTime=t,ju=null,bl(e),rl(e)}}return null}function al(e,t){var n=Ou;Ou|=1;try{return e(t)}finally{0===(Ou=n)&&Qo()}}function ul(e,t){var n=Ou;Ou&=-2,Ou|=8;try{return e(t)}finally{0===(Ou=n)&&Qo()}}function ll(e,t){e.finishedWork=null,e.finishedExpirationTime=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,tr(n)),null!==Nu)for(n=Nu.return;null!==n;){var r=n;switch(r.tag){case 1:var o=r.type.childContextTypes;null!=o&&bo();break;case 3:$i(),go();break;case 5:Vi(r);break;case 4:$i();break;case 13:case 19:co(qi);break;case 10:ii(r)}n=n.return}ju=e,Nu=Rl(e.current,null),Ru=t,Mu=0,Iu=null,Uu=zu=1073741823,Au=null,Du=0,Fu=!1}function cl(e,t){for(;;){try{if(ri(),fa(),null===Nu||null===Nu.return)return Mu=1,Iu=t,null;e:{var n=e,r=Nu.return,o=Nu,i=t;if(t=Ru,o.effectTag|=2048,o.firstEffect=o.lastEffect=null,null!==i&&"object"==typeof i&&"function"==typeof i.then){var a=i,u=0!=(1&qi.current),l=r;do{var c;if(c=13===l.tag){var s=l.memoizedState;if(null!==s)c=null!==s.dehydrated;else{var f=l.memoizedProps;c=void 0!==f.fallback&&(!0!==f.unstable_avoidThisFallback||!u)}}if(c){var p=l.updateQueue;if(null===p){var d=new Set;d.add(a),l.updateQueue=d}else p.add(a);if(0==(2&l.mode)){if(l.effectTag|=64,o.effectTag&=-2981,1===o.tag)if(null===o.alternate)o.tag=17;else{var h=pi(1073741823,null);h.tag=2,hi(o,h)}o.expirationTime=1073741823;break e}i=void 0,o=t;var y=n.pingCache;if(null===y?(y=n.pingCache=new Eu,i=new Set,y.set(a,i)):void 0===(i=y.get(a))&&(i=new Set,y.set(a,i)),!i.has(o)){i.add(o);var m=Sl.bind(null,n,a,o);a.then(m,m)}l.effectTag|=4096,l.expirationTime=t;break e}l=l.return}while(null!==l);i=Error((G(o.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+J(o))}5!==Mu&&(Mu=2),i=cu(i,o),l=r;do{switch(l.tag){case 3:a=i,l.effectTag|=4096,l.expirationTime=t,yi(l,ku(l,a,t));break e;case 1:a=i;var v=l.type,b=l.stateNode;if(0==(64&l.effectTag)&&("function"==typeof v.getDerivedStateFromError||null!==b&&"function"==typeof b.componentDidCatch&&(null===qu||!qu.has(b)))){l.effectTag|=4096,l.expirationTime=t,yi(l,Tu(l,a,t));break e}}l=l.return}while(null!==l)}Nu=ml(Nu)}catch(e){t=e;continue}break}}function sl(){var e=Pu.current;return Pu.current=Ca,null===e?Ca:e}function fl(e,t){e<zu&&2<e&&(zu=e),null!==t&&e<Uu&&2<e&&(Uu=e,Au=t)}function pl(e){e>Du&&(Du=e)}function dl(){for(;null!==Nu;)Nu=yl(Nu)}function hl(){for(;null!==Nu&&!Po();)Nu=yl(Nu)}function yl(e){var t=Su(e.alternate,e,Ru);return e.memoizedProps=e.pendingProps,null===t&&(t=ml(e)),Cu.current=null,t}function ml(e){Nu=e;do{var t=Nu.alternate;if(e=Nu.return,0==(2048&Nu.effectTag)){e:{var n=t,r=Ru,i=(t=Nu).pendingProps;switch(t.tag){case 2:case 16:break;case 15:case 0:break;case 1:vo(t.type)&&bo();break;case 3:$i(),go(),(i=t.stateNode).pendingContext&&(i.context=i.pendingContext,i.pendingContext=null),(null===n||null===n.child)&&Da(t)&&au(t);break;case 5:Vi(t),r=Fi(Di.current);var u=t.type;if(null!==n&&null!=t.stateNode)Ja(n,t,u,i,r),n.ref!==t.ref&&(t.effectTag|=128);else if(i){var l=Fi(Ui.current);if(Da(t)){var c=(i=t).stateNode;n=i.type;var s=i.memoizedProps,f=r;switch(c[ir]=i,c[ar]=s,u=void 0,r=c,n){case"iframe":case"object":case"embed":Sn("load",r);break;case"video":case"audio":for(c=0;c<et.length;c++)Sn(et[c],r);break;case"source":Sn("error",r);break;case"img":case"image":case"link":Sn("error",r),Sn("load",r);break;case"form":Sn("reset",r),Sn("submit",r);break;case"details":Sn("toggle",r);break;case"input":Pe(r,s),Sn("invalid",r),Vn(f,"onChange");break;case"select":r._wrapperState={wasMultiple:!!s.multiple},Sn("invalid",r),Vn(f,"onChange");break;case"textarea":ze(r,s),Sn("invalid",r),Vn(f,"onChange")}for(u in $n(n,s),c=null,s)s.hasOwnProperty(u)&&(l=s[u],"children"===u?"string"==typeof l?r.textContent!==l&&(c=["children",l]):"number"==typeof l&&r.textContent!==""+l&&(c=["children",""+l]):d.hasOwnProperty(u)&&null!=l&&Vn(f,u));switch(n){case"input":Te(r),je(r,s,!0);break;case"textarea":Te(r),Ae(r);break;case"select":case"option":break;default:"function"==typeof s.onClick&&(r.onclick=qn)}u=c,i.updateQueue=u,(i=null!==u)&&au(t)}else{n=t,f=u,s=i,c=9===r.nodeType?r:r.ownerDocument,l===De&&(l=Le(f)),l===De?"script"===f?((s=c.createElement("div")).innerHTML="<script><\/script>",c=s.removeChild(s.firstChild)):"string"==typeof s.is?c=c.createElement(f,{is:s.is}):(c=c.createElement(f),"select"===f&&(f=c,s.multiple?f.multiple=!0:s.size&&(f.size=s.size))):c=c.createElementNS(l,f),(s=c)[ir]=n,s[ar]=i,Ga(s,t),t.stateNode=s;var p=r,h=Wn(f=u,n=i);switch(f){case"iframe":case"object":case"embed":Sn("load",s),r=n;break;case"video":case"audio":for(r=0;r<et.length;r++)Sn(et[r],s);r=n;break;case"source":Sn("error",s),r=n;break;case"img":case"image":case"link":Sn("error",s),Sn("load",s),r=n;break;case"form":Sn("reset",s),Sn("submit",s),r=n;break;case"details":Sn("toggle",s),r=n;break;case"input":Pe(s,n),r=_e(s,n),Sn("invalid",s),Vn(p,"onChange");break;case"option":r=Re(s,n);break;case"select":s._wrapperState={wasMultiple:!!n.multiple},r=o({},n,{value:void 0}),Sn("invalid",s),Vn(p,"onChange");break;case"textarea":ze(s,n),r=Ie(s,n),Sn("invalid",s),Vn(p,"onChange");break;default:r=n}$n(f,r),c=void 0,l=f;var y=s,m=r;for(c in m)if(m.hasOwnProperty(c)){var v=m[c];"style"===c?Fn(y,v):"dangerouslySetInnerHTML"===c?null!=(v=v?v.__html:void 0)&&Ve(y,v):"children"===c?"string"==typeof v?("textarea"!==l||""!==v)&&qe(y,v):"number"==typeof v&&qe(y,""+v):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(d.hasOwnProperty(c)?null!=v&&Vn(p,c):null!=v&&Ee(y,c,v,h))}switch(f){case"input":Te(s),je(s,n,!1);break;case"textarea":Te(s),Ae(s);break;case"option":null!=n.value&&s.setAttribute("value",""+xe(n.value));break;case"select":(r=s).multiple=!!n.multiple,null!=(s=n.value)?Me(r,!!n.multiple,s,!1):null!=n.defaultValue&&Me(r,!!n.multiple,n.defaultValue,!0);break;default:"function"==typeof r.onClick&&(s.onclick=qn)}(i=Jn(u,i))&&au(t)}null!==t.ref&&(t.effectTag|=128)}else if(null===t.stateNode)throw Error(a(166));break;case 6:if(n&&null!=t.stateNode)Za(0,t,n.memoizedProps,i);else{if("string"!=typeof i&&null===t.stateNode)throw Error(a(166));r=Fi(Di.current),Fi(Ui.current),Da(t)?(u=(i=t).stateNode,r=i.memoizedProps,u[ir]=i,(i=u.nodeValue!==r)&&au(t)):(u=t,(i=(9===r.nodeType?r:r.ownerDocument).createTextNode(i))[ir]=u,t.stateNode=i)}break;case 11:break;case 13:if(co(qi),i=t.memoizedState,0!=(64&t.effectTag)){t.expirationTime=r;break e}i=null!==i,u=!1,null===n?void 0!==t.memoizedProps.fallback&&Da(t):(u=null!==(r=n.memoizedState),i||null===r||null!==(r=n.child.sibling)&&(null!==(s=t.firstEffect)?(t.firstEffect=r,r.nextEffect=s):(t.firstEffect=t.lastEffect=r,r.nextEffect=null),r.effectTag=8)),i&&!u&&0!=(2&t.mode)&&(null===n&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&qi.current)?0===Mu&&(Mu=3):(0!==Mu&&3!==Mu||(Mu=4),0!==Du&&null!==ju&&(Fl(ju,Ru),Ll(ju,Du)))),(i||u)&&(t.effectTag|=4);break;case 7:case 8:case 12:break;case 4:$i();break;case 10:ii(t);break;case 9:case 14:break;case 17:vo(t.type)&&bo();break;case 19:if(co(qi),null===(i=t.memoizedState))break;if(u=0!=(64&t.effectTag),null===(s=i.rendering)){if(u)uu(i,!1);else if(0!==Mu||null!==n&&0!=(64&n.effectTag))for(n=t.child;null!==n;){if(null!==(s=Bi(n))){for(t.effectTag|=64,uu(i,!1),null!==(u=s.updateQueue)&&(t.updateQueue=u,t.effectTag|=4),null===i.lastEffect&&(t.firstEffect=null),t.lastEffect=i.lastEffect,i=r,u=t.child;null!==u;)n=i,(r=u).effectTag&=2,r.nextEffect=null,r.firstEffect=null,r.lastEffect=null,null===(s=r.alternate)?(r.childExpirationTime=0,r.expirationTime=n,r.child=null,r.memoizedProps=null,r.memoizedState=null,r.updateQueue=null,r.dependencies=null):(r.childExpirationTime=s.childExpirationTime,r.expirationTime=s.expirationTime,r.child=s.child,r.memoizedProps=s.memoizedProps,r.memoizedState=s.memoizedState,r.updateQueue=s.updateQueue,n=s.dependencies,r.dependencies=null===n?null:{expirationTime:n.expirationTime,firstContext:n.firstContext,responders:n.responders}),u=u.sibling;so(qi,1&qi.current|2),t=t.child;break e}n=n.sibling}}else{if(!u)if(null!==(n=Bi(s))){if(t.effectTag|=64,u=!0,null!==(r=n.updateQueue)&&(t.updateQueue=r,t.effectTag|=4),uu(i,!0),null===i.tail&&"hidden"===i.tailMode&&!s.alternate){null!==(t=t.lastEffect=i.lastEffect)&&(t.nextEffect=null);break}}else Wo()>i.tailExpiration&&1<r&&(t.effectTag|=64,u=!0,uu(i,!1),t.expirationTime=t.childExpirationTime=r-1);i.isBackwards?(s.sibling=t.child,t.child=s):(null!==(r=i.last)?r.sibling=s:t.child=s,i.last=s)}if(null!==i.tail){0===i.tailExpiration&&(i.tailExpiration=Wo()+500),r=i.tail,i.rendering=r,i.tail=r.sibling,i.lastEffect=t.lastEffect,r.sibling=null,i=qi.current,so(qi,i=u?1&i|2:1&i),t=r;break e}break;case 20:case 21:break;default:throw Error(a(156,t.tag))}t=null}if(i=Nu,1===Ru||1!==i.childExpirationTime){for(u=0,r=i.child;null!==r;)(n=r.expirationTime)>u&&(u=n),(s=r.childExpirationTime)>u&&(u=s),r=r.sibling;i.childExpirationTime=u}if(null!==t)return t;null!==e&&0==(2048&e.effectTag)&&(null===e.firstEffect&&(e.firstEffect=Nu.firstEffect),null!==Nu.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=Nu.firstEffect),e.lastEffect=Nu.lastEffect),1<Nu.effectTag&&(null!==e.lastEffect?e.lastEffect.nextEffect=Nu:e.firstEffect=Nu,e.lastEffect=Nu))}else{if(null!==(t=lu(Nu)))return t.effectTag&=2047,t;null!==e&&(e.firstEffect=e.lastEffect=null,e.effectTag|=2048)}if(null!==(t=Nu.sibling))return t;Nu=e}while(null!==Nu);return 0===Mu&&(Mu=5),null}function vl(e){var t=e.expirationTime;return t>(e=e.childExpirationTime)?t:e}function bl(e){var t=Vo();return Bo(99,gl.bind(null,e,t)),null}function gl(e,t){do{xl()}while(null!==Hu);if(0!=(48&Ou))throw Error(a(327));var n=e.finishedWork,r=e.finishedExpirationTime;if(null===n)return null;if(e.finishedWork=null,e.finishedExpirationTime=0,n===e.current)throw Error(a(177));e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90,e.nextKnownPendingLevel=0;var o=vl(n);if(e.firstPendingTime=o,r<=e.lastSuspendedTime?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:r<=e.firstSuspendedTime&&(e.firstSuspendedTime=r-1),r<=e.lastPingedTime&&(e.lastPingedTime=0),r<=e.lastExpiredTime&&(e.lastExpiredTime=0),e===ju&&(Nu=ju=null,Ru=0),1<n.effectTag?null!==n.lastEffect?(n.lastEffect.nextEffect=n,o=n.firstEffect):o=n:o=n.firstEffect,null!==o){var i=Ou;Ou|=32,Cu.current=null,Xn=Tn;var u=Qn();if(Yn(u)){if("selectionStart"in u)var l={start:u.selectionStart,end:u.selectionEnd};else e:{var c=(l=(l=u.ownerDocument)&&l.defaultView||window).getSelection&&l.getSelection();if(c&&0!==c.rangeCount){l=c.anchorNode;var s=c.anchorOffset,f=c.focusNode;c=c.focusOffset;try{l.nodeType,f.nodeType}catch(e){l=null;break e}var p=0,d=-1,h=-1,y=0,m=0,v=u,b=null;t:for(;;){for(var g;v!==l||0!==s&&3!==v.nodeType||(d=p+s),v!==f||0!==c&&3!==v.nodeType||(h=p+c),3===v.nodeType&&(p+=v.nodeValue.length),null!==(g=v.firstChild);)b=v,v=g;for(;;){if(v===u)break t;if(b===l&&++y===s&&(d=p),b===f&&++m===c&&(h=p),null!==(g=v.nextSibling))break;b=(v=b).parentNode}v=g}l=-1===d||-1===h?null:{start:d,end:h}}else l=null}l=l||{start:0,end:0}}else l=null;Gn={focusedElem:u,selectionRange:l},Tn=!1,$u=o;do{try{wl()}catch(e){if(null===$u)throw Error(a(330));Tl($u,e),$u=$u.nextEffect}}while(null!==$u);$u=o;do{try{for(u=e,l=t;null!==$u;){var w=$u.effectTag;if(16&w&&qe($u.stateNode,""),128&w){var x=$u.alternate;if(null!==x){var E=x.ref;null!==E&&("function"==typeof E?E(null):E.current=null)}}switch(1038&w){case 2:bu($u),$u.effectTag&=-3;break;case 6:bu($u),$u.effectTag&=-3,wu($u.alternate,$u);break;case 1024:$u.effectTag&=-1025;break;case 1028:$u.effectTag&=-1025,wu($u.alternate,$u);break;case 4:wu($u.alternate,$u);break;case 8:gu(u,s=$u,l),mu(s)}$u=$u.nextEffect}}catch(e){if(null===$u)throw Error(a(330));Tl($u,e),$u=$u.nextEffect}}while(null!==$u);if(E=Gn,x=Qn(),w=E.focusedElem,l=E.selectionRange,x!==w&&w&&w.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(w.ownerDocument.documentElement,w)){null!==l&&Yn(w)&&(x=l.start,void 0===(E=l.end)&&(E=x),"selectionStart"in w?(w.selectionStart=x,w.selectionEnd=Math.min(E,w.value.length)):(E=(x=w.ownerDocument||document)&&x.defaultView||window).getSelection&&(E=E.getSelection(),s=w.textContent.length,u=Math.min(l.start,s),l=void 0===l.end?u:Math.min(l.end,s),!E.extend&&u>l&&(s=l,l=u,u=s),s=Kn(w,u),f=Kn(w,l),s&&f&&(1!==E.rangeCount||E.anchorNode!==s.node||E.anchorOffset!==s.offset||E.focusNode!==f.node||E.focusOffset!==f.offset)&&((x=x.createRange()).setStart(s.node,s.offset),E.removeAllRanges(),u>l?(E.addRange(x),E.extend(f.node,f.offset)):(x.setEnd(f.node,f.offset),E.addRange(x))))),x=[];for(E=w;E=E.parentNode;)1===E.nodeType&&x.push({element:E,left:E.scrollLeft,top:E.scrollTop});for("function"==typeof w.focus&&w.focus(),w=0;w<x.length;w++)(E=x[w]).element.scrollLeft=E.left,E.element.scrollTop=E.top}Gn=null,Tn=!!Xn,Xn=null,e.current=n,$u=o;do{try{for(w=r;null!==$u;){var k=$u.effectTag;if(36&k){var T=$u.alternate;switch(E=w,(x=$u).tag){case 0:case 11:case 15:hu(16,32,x);break;case 1:var S=x.stateNode;if(4&x.effectTag)if(null===T)S.componentDidMount();else{var _=x.elementType===x.type?T.memoizedProps:Jo(x.type,T.memoizedProps);S.componentDidUpdate(_,T.memoizedState,S.__reactInternalSnapshotBeforeUpdate)}var P=x.updateQueue;null!==P&&gi(0,P,S);break;case 3:var C=x.updateQueue;if(null!==C){if(u=null,null!==x.child)switch(x.child.tag){case 5:u=x.child.stateNode;break;case 1:u=x.child.stateNode}gi(0,C,u)}break;case 5:var O=x.stateNode;null===T&&4&x.effectTag&&Jn(x.type,x.memoizedProps)&&O.focus();break;case 6:case 4:case 12:break;case 13:if(null===x.memoizedState){var j=x.alternate;if(null!==j){var N=j.memoizedState;if(null!==N){var R=N.dehydrated;null!==R&&_t(R)}}}break;case 19:case 17:case 20:case 21:break;default:throw Error(a(163))}}if(128&k){x=void 0;var M=$u.ref;if(null!==M){var I=$u.stateNode;switch($u.tag){case 5:x=I;break;default:x=I}"function"==typeof M?M(x):M.current=x}}$u=$u.nextEffect}}catch(e){if(null===$u)throw Error(a(330));Tl($u,e),$u=$u.nextEffect}}while(null!==$u);$u=null,Ao(),Ou=i}else e.current=n;if(Bu)Bu=!1,Hu=e,Ku=t;else for($u=o;null!==$u;)t=$u.nextEffect,$u.nextEffect=null,$u=t;if(0===(t=e.firstPendingTime)&&(qu=null),1073741823===t?e===Xu?Yu++:(Yu=0,Xu=e):Yu=0,"function"==typeof Pl&&Pl(n.stateNode,r),rl(e),Wu)throw Wu=!1,e=Vu,Vu=null,e;return 0!=(8&Ou)?null:(Qo(),null)}function wl(){for(;null!==$u;){var e=$u.effectTag;0!=(256&e)&&du($u.alternate,$u),0==(512&e)||Bu||(Bu=!0,Ho(97,(function(){return xl(),null}))),$u=$u.nextEffect}}function xl(){if(90!==Ku){var e=97<Ku?97:Ku;return Ku=90,Bo(e,El)}}function El(){if(null===Hu)return!1;var e=Hu;if(Hu=null,0!=(48&Ou))throw Error(a(331));var t=Ou;for(Ou|=32,e=e.current.firstEffect;null!==e;){try{var n=e;if(0!=(512&n.effectTag))switch(n.tag){case 0:case 11:case 15:hu(128,0,n),hu(0,64,n)}}catch(t){if(null===e)throw Error(a(330));Tl(e,t)}n=e.nextEffect,e.nextEffect=null,e=n}return Ou=t,Qo(),!0}function kl(e,t,n){hi(e,t=ku(e,t=cu(n,t),1073741823)),null!==(e=tl(e,1073741823))&&rl(e)}function Tl(e,t){if(3===e.tag)kl(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){kl(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===qu||!qu.has(r))){hi(n,e=Tu(n,e=cu(t,e),1073741823)),null!==(n=tl(n,1073741823))&&rl(n);break}}n=n.return}}function Sl(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),ju===e&&Ru===n?4===Mu||3===Mu&&1073741823===zu&&Wo()-Lu<500?ll(e,Ru):Fu=!0:Dl(e,n)&&(0!==(t=e.lastPingedTime)&&t<n||(e.lastPingedTime=n,e.finishedExpirationTime===n&&(e.finishedExpirationTime=0,e.finishedWork=null),rl(e)))}function _l(e,t){var n=e.stateNode;null!==n&&n.delete(t),0===(t=0)&&(t=Zu(t=Ju(),e,null)),null!==(e=tl(e,t))&&rl(e)}Su=function(e,t,n){var r=t.expirationTime;if(null!==e){var o=t.pendingProps;if(e.memoizedProps!==o||ho.current)$a=!0;else{if(r<n){switch($a=!1,t.tag){case 3:Xa(t),Fa();break;case 5:if(Wi(t),4&t.mode&&1!==n&&o.hidden)return t.expirationTime=t.childExpirationTime=1,null;break;case 1:vo(t.type)&&Eo(t);break;case 4:Li(t,t.stateNode.containerInfo);break;case 10:oi(t,t.memoizedProps.value);break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?tu(e,t,n):(so(qi,1&qi.current),null!==(t=iu(e,t,n))?t.sibling:null);so(qi,1&qi.current);break;case 19:if(r=t.childExpirationTime>=n,0!=(64&e.effectTag)){if(r)return ou(e,t,n);t.effectTag|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null),so(qi,qi.current),!r)return null}return iu(e,t,n)}$a=!1}}else $a=!1;switch(t.expirationTime=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,o=mo(t,po.current),ui(t,n),o=sa(null,t,r,e,o,n),t.effectTag|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,fa(),vo(r)){var i=!0;Eo(t)}else i=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null;var u=r.getDerivedStateFromProps;"function"==typeof u&&ki(t,r,u,e),o.updater=Ti,t.stateNode=o,o._reactInternalFiber=t,Ci(t,r,e,n),t=Ya(null,t,r,!0,i,n)}else t.tag=0,Wa(null,t,o,n),t=t.child;return t;case 16:if(o=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,function(e){if(-1===e._status){e._status=0;var t=e._ctor;t=t(),e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}}(o),1!==o._status)throw o._result;switch(o=o._result,t.type=o,i=t.tag=function(e){if("function"==typeof e)return Nl(e)?1:0;if(null!=e){if((e=e.$$typeof)===q)return 11;if(e===K)return 14}return 2}(o),e=Jo(o,e),i){case 0:t=Ka(null,t,o,e,n);break;case 1:t=Qa(null,t,o,e,n);break;case 11:t=Va(null,t,o,e,n);break;case 14:t=qa(null,t,o,Jo(o.type,e),r,n);break;default:throw Error(a(306,o,""))}return t;case 0:return r=t.type,o=t.pendingProps,Ka(e,t,r,o=t.elementType===r?o:Jo(r,o),n);case 1:return r=t.type,o=t.pendingProps,Qa(e,t,r,o=t.elementType===r?o:Jo(r,o),n);case 3:if(Xa(t),null===(r=t.updateQueue))throw Error(a(282));if(o=null!==(o=t.memoizedState)?o.element:null,bi(t,r,t.pendingProps,null,n),(r=t.memoizedState.element)===o)Fa(),t=iu(e,t,n);else{if((o=t.stateNode.hydrate)&&(Ra=nr(t.stateNode.containerInfo.firstChild),Na=t,o=Ma=!0),o)for(n=Ii(t,null,r,n),t.child=n;n;)n.effectTag=-3&n.effectTag|1024,n=n.sibling;else Wa(e,t,r,n),Fa();t=t.child}return t;case 5:return Wi(t),null===e&&Ua(t),r=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,u=o.children,Zn(r,o)?u=null:null!==i&&Zn(r,i)&&(t.effectTag|=16),Ha(e,t),4&t.mode&&1!==n&&o.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(Wa(e,t,u,n),t=t.child),t;case 6:return null===e&&Ua(t),null;case 13:return tu(e,t,n);case 4:return Li(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Mi(t,null,r,n):Wa(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,Va(e,t,r,o=t.elementType===r?o:Jo(r,o),n);case 7:return Wa(e,t,t.pendingProps,n),t.child;case 8:case 12:return Wa(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,o=t.pendingProps,u=t.memoizedProps,oi(t,i=o.value),null!==u){var l=u.value;if(0===(i=Xr(l,i)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(l,i):1073741823))){if(u.children===o.children&&!ho.current){t=iu(e,t,n);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){var c=l.dependencies;if(null!==c){u=l.child;for(var s=c.firstContext;null!==s;){if(s.context===r&&0!=(s.observedBits&i)){1===l.tag&&((s=pi(n,null)).tag=2,hi(l,s)),l.expirationTime<n&&(l.expirationTime=n),null!==(s=l.alternate)&&s.expirationTime<n&&(s.expirationTime=n),ai(l.return,n),c.expirationTime<n&&(c.expirationTime=n);break}s=s.next}}else u=10===l.tag&&l.type===t.type?null:l.child;if(null!==u)u.return=l;else for(u=l;null!==u;){if(u===t){u=null;break}if(null!==(l=u.sibling)){l.return=u.return,u=l;break}u=u.return}l=u}}Wa(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(i=t.pendingProps).children,ui(t,n),r=r(o=li(o,i.unstable_observedBits)),t.effectTag|=1,Wa(e,t,r,n),t.child;case 14:return i=Jo(o=t.type,t.pendingProps),qa(e,t,o,i=Jo(o.type,i),r,n);case 15:return Ba(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Jo(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,vo(r)?(e=!0,Eo(t)):e=!1,ui(t,n),_i(t,r,o),Ci(t,r,o,n),Ya(null,t,r,!0,e,n);case 19:return ou(e,t,n)}throw Error(a(156,t.tag))};var Pl=null,Cl=null;function Ol(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function jl(e,t,n,r){return new Ol(e,t,n,r)}function Nl(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Rl(e,t){var n=e.alternate;return null===n?((n=jl(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{expirationTime:t.expirationTime,firstContext:t.firstContext,responders:t.responders},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Ml(e,t,n,r,o,i){var u=2;if(r=e,"function"==typeof e)Nl(e)&&(u=1);else if("string"==typeof e)u=5;else e:switch(e){case D:return Il(n.children,o,i,t);case V:u=8,o|=7;break;case F:u=8,o|=1;break;case L:return(e=jl(12,n,t,8|o)).elementType=L,e.type=L,e.expirationTime=i,e;case B:return(e=jl(13,n,t,o)).type=B,e.elementType=B,e.expirationTime=i,e;case H:return(e=jl(19,n,t,o)).elementType=H,e.expirationTime=i,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case $:u=10;break e;case W:u=9;break e;case q:u=11;break e;case K:u=14;break e;case Q:u=16,r=null;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=jl(u,n,t,o)).elementType=e,t.type=r,t.expirationTime=i,t}function Il(e,t,n,r){return(e=jl(7,e,r,t)).expirationTime=n,e}function zl(e,t,n){return(e=jl(6,e,null,t)).expirationTime=n,e}function Ul(e,t,n){return(t=jl(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Al(e,t,n){this.tag=t,this.current=null,this.containerInfo=e,this.pingCache=this.pendingChildren=null,this.finishedExpirationTime=0,this.finishedWork=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=90,this.lastExpiredTime=this.lastPingedTime=this.nextKnownPendingLevel=this.lastSuspendedTime=this.firstSuspendedTime=this.firstPendingTime=0}function Dl(e,t){var n=e.firstSuspendedTime;return e=e.lastSuspendedTime,0!==n&&n>=t&&e<=t}function Fl(e,t){var n=e.firstSuspendedTime,r=e.lastSuspendedTime;n<t&&(e.firstSuspendedTime=t),(r>t||0===n)&&(e.lastSuspendedTime=t),t<=e.lastPingedTime&&(e.lastPingedTime=0),t<=e.lastExpiredTime&&(e.lastExpiredTime=0)}function Ll(e,t){t>e.firstPendingTime&&(e.firstPendingTime=t);var n=e.firstSuspendedTime;0!==n&&(t>=n?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:t>=e.lastSuspendedTime&&(e.lastSuspendedTime=t+1),t>e.nextKnownPendingLevel&&(e.nextKnownPendingLevel=t))}function $l(e,t){var n=e.lastExpiredTime;(0===n||n>t)&&(e.lastExpiredTime=t)}function Wl(e,t,n,r){var o=t.current,i=Ju(),u=xi.suspense;i=Zu(i,o,u);e:if(n){t:{if(tt(n=n._reactInternalFiber)!==n||1!==n.tag)throw Error(a(170));var l=n;do{switch(l.tag){case 3:l=l.stateNode.context;break t;case 1:if(vo(l.type)){l=l.stateNode.__reactInternalMemoizedMergedChildContext;break t}}l=l.return}while(null!==l);throw Error(a(171))}if(1===n.tag){var c=n.type;if(vo(c)){n=xo(n,c,l);break e}}n=l}else n=fo;return null===t.context?t.context=n:t.pendingContext=n,(t=pi(i,u)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),hi(o,t),el(o,i),i}function Vl(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function ql(e,t){null!==(e=e.memoizedState)&&null!==e.dehydrated&&e.retryTime<t&&(e.retryTime=t)}function Bl(e,t){ql(e,t),(e=e.alternate)&&ql(e,t)}function Hl(e,t,n){var r=new Al(e,t,n=null!=n&&!0===n.hydrate),o=jl(3,null,null,2===t?7:1===t?3:0);r.current=o,o.stateNode=r,e[ur]=r.current,n&&0!==t&&function(e){var t=In(e);mt.forEach((function(n){zn(n,e,t)})),vt.forEach((function(n){zn(n,e,t)}))}(9===e.nodeType?e:e.ownerDocument),this._internalRoot=r}function Kl(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Ql(e,t,n,r,o){var i=n._reactRootContainer;if(i){var a=i._internalRoot;if("function"==typeof o){var u=o;o=function(){var e=Vl(a);u.call(e)}}Wl(t,a,e,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Hl(e,0,t?{hydrate:!0}:void 0)}(n,r),a=i._internalRoot,"function"==typeof o){var l=o;o=function(){var e=Vl(a);l.call(e)}}ul((function(){Wl(t,a,e,o)}))}return Vl(a)}function Yl(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:A,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Xl(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Kl(t))throw Error(a(200));return Yl(e,t,null,n)}Hl.prototype.render=function(e,t){Wl(e,this._internalRoot,null,void 0===t?null:t)},Hl.prototype.unmount=function(e){var t=this._internalRoot,n=void 0===e?null:e,r=t.containerInfo;Wl(null,t,null,(function(){r[ur]=null,null!==n&&n()}))},it=function(e){if(13===e.tag){var t=Go(Ju(),150,100);el(e,t),Bl(e,t)}},at=function(e){if(13===e.tag){Ju();var t=Xo++;el(e,t),Bl(e,t)}},ut=function(e){if(13===e.tag){var t=Ju();el(e,t=Zu(t,e,null)),Bl(e,t)}},ee=function(e,t,n){switch(t){case"input":if(Oe(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=fr(r);if(!o)throw Error(a(90));Se(r),Oe(r,o)}}}break;case"textarea":Ue(e,n);break;case"select":null!=(t=n.value)&&Me(e,!!n.multiple,t,!1)}},ae=al,ue=function(e,t,n,r){var o=Ou;Ou|=4;try{return Bo(98,e.bind(null,t,n,r))}finally{0===(Ou=o)&&Qo()}},le=function(){0==(49&Ou)&&(function(){if(null!==Qu){var e=Qu;Qu=null,e.forEach((function(e,t){$l(t,e),rl(t)})),Qo()}}(),xl())},ce=function(e,t){var n=Ou;Ou|=2;try{return e(t)}finally{0===(Ou=n)&&Qo()}};var Gl,Jl,Zl={createPortal:Xl,findDOMNode:function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw Error(a(268,Object.keys(e)))}return e=null===(e=ot(t))?null:e.stateNode},hydrate:function(e,t,n){if(!Kl(t))throw Error(a(200));return Ql(null,e,t,!0,n)},render:function(e,t,n){if(!Kl(t))throw Error(a(200));return Ql(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){if(!Kl(n))throw Error(a(200));if(null==e||void 0===e._reactInternalFiber)throw Error(a(38));return Ql(e,t,n,!1,r)},unmountComponentAtNode:function(e){if(!Kl(e))throw Error(a(40));return!!e._reactRootContainer&&(ul((function(){Ql(null,null,e,!1,(function(){e._reactRootContainer=null,e[ur]=null}))})),!0)},unstable_createPortal:function(){return Xl.apply(void 0,arguments)},unstable_batchedUpdates:al,flushSync:function(e,t){if(0!=(48&Ou))throw Error(a(187));var n=Ou;Ou|=1;try{return Bo(99,e.bind(null,t))}finally{Ou=n,Qo()}},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{Events:[cr,sr,fr,N.injectEventPluginsByName,p,Mt,function(e){P(e,Rt)},oe,ie,jn,j,xl,{current:!1}]}};Jl=(Gl={findFiberByHostInstance:lr,bundleType:0,version:"16.12.0",rendererPackageName:"react-dom"}).findFiberByHostInstance,function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Pl=function(e){try{t.onCommitFiberRoot(n,e,void 0,64==(64&e.current.effectTag))}catch(e){}},Cl=function(e){try{t.onCommitFiberUnmount(n,e)}catch(e){}}}catch(e){}}(o({},Gl,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:M.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=ot(e))?null:e.stateNode},findFiberByHostInstance:function(e){return Jl?Jl(e):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null}));var ec={default:Zl},tc=ec&&Zl||ec;e.exports=tc.default||tc},function(e,t,n){"use strict";e.exports=n(46)},function(e,t,n){"use strict";
/** @license React v0.18.0
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r,o,i,a,u;if(Object.defineProperty(t,"__esModule",{value:!0}),"undefined"==typeof window||"function"!=typeof MessageChannel){var l=null,c=null,s=function(){if(null!==l)try{var e=t.unstable_now();l(!0,e),l=null}catch(e){throw setTimeout(s,0),e}},f=Date.now();t.unstable_now=function(){return Date.now()-f},r=function(e){null!==l?setTimeout(r,0,e):(l=e,setTimeout(s,0))},o=function(e,t){c=setTimeout(e,t)},i=function(){clearTimeout(c)},a=function(){return!1},u=t.unstable_forceFrameRate=function(){}}else{var p=window.performance,d=window.Date,h=window.setTimeout,y=window.clearTimeout;if("undefined"!=typeof console){var m=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof m&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")}if("object"==typeof p&&"function"==typeof p.now)t.unstable_now=function(){return p.now()};else{var v=d.now();t.unstable_now=function(){return d.now()-v}}var b=!1,g=null,w=-1,x=5,E=0;a=function(){return t.unstable_now()>=E},u=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):x=0<e?Math.floor(1e3/e):5};var k=new MessageChannel,T=k.port2;k.port1.onmessage=function(){if(null!==g){var e=t.unstable_now();E=e+x;try{g(!0,e)?T.postMessage(null):(b=!1,g=null)}catch(e){throw T.postMessage(null),e}}else b=!1},r=function(e){g=e,b||(b=!0,T.postMessage(null))},o=function(e,n){w=h((function(){e(t.unstable_now())}),n)},i=function(){y(w),w=-1}}function S(e,t){var n=e.length;e.push(t);e:for(;;){var r=Math.floor((n-1)/2),o=e[r];if(!(void 0!==o&&0<C(o,t)))break e;e[r]=t,e[n]=o,n=r}}function _(e){return void 0===(e=e[0])?null:e}function P(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length;r<o;){var i=2*(r+1)-1,a=e[i],u=i+1,l=e[u];if(void 0!==a&&0>C(a,n))void 0!==l&&0>C(l,a)?(e[r]=l,e[u]=n,r=u):(e[r]=a,e[i]=n,r=i);else{if(!(void 0!==l&&0>C(l,n)))break e;e[r]=l,e[u]=n,r=u}}}return t}return null}function C(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var O=[],j=[],N=1,R=null,M=3,I=!1,z=!1,U=!1;function A(e){for(var t=_(j);null!==t;){if(null===t.callback)P(j);else{if(!(t.startTime<=e))break;P(j),t.sortIndex=t.expirationTime,S(O,t)}t=_(j)}}function D(e){if(U=!1,A(e),!z)if(null!==_(O))z=!0,r(F);else{var t=_(j);null!==t&&o(D,t.startTime-e)}}function F(e,n){z=!1,U&&(U=!1,i()),I=!0;var r=M;try{for(A(n),R=_(O);null!==R&&(!(R.expirationTime>n)||e&&!a());){var u=R.callback;if(null!==u){R.callback=null,M=R.priorityLevel;var l=u(R.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?R.callback=l:R===_(O)&&P(O),A(n)}else P(O);R=_(O)}if(null!==R)var c=!0;else{var s=_(j);null!==s&&o(D,s.startTime-n),c=!1}return c}finally{R=null,M=r,I=!1}}function L(e){switch(e){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1e4;default:return 5e3}}var $=u;t.unstable_ImmediatePriority=1,t.unstable_UserBlockingPriority=2,t.unstable_NormalPriority=3,t.unstable_IdlePriority=5,t.unstable_LowPriority=4,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=M;M=e;try{return t()}finally{M=n}},t.unstable_next=function(e){switch(M){case 1:case 2:case 3:var t=3;break;default:t=M}var n=M;M=t;try{return e()}finally{M=n}},t.unstable_scheduleCallback=function(e,n,a){var u=t.unstable_now();if("object"==typeof a&&null!==a){var l=a.delay;l="number"==typeof l&&0<l?u+l:u,a="number"==typeof a.timeout?a.timeout:L(e)}else a=L(e),l=u;return e={id:N++,callback:n,priorityLevel:e,startTime:l,expirationTime:a=l+a,sortIndex:-1},l>u?(e.sortIndex=l,S(j,e),null===_(O)&&e===_(j)&&(U?i():U=!0,o(D,l-u))):(e.sortIndex=a,S(O,e),z||I||(z=!0,r(F))),e},t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_wrapCallback=function(e){var t=M;return function(){var n=M;M=t;try{return e.apply(this,arguments)}finally{M=n}}},t.unstable_getCurrentPriorityLevel=function(){return M},t.unstable_shouldYield=function(){var e=t.unstable_now();A(e);var n=_(O);return n!==R&&null!==R&&null!==n&&null!==n.callback&&n.startTime<=e&&n.expirationTime<R.expirationTime||a()},t.unstable_requestPaint=$,t.unstable_continueExecution=function(){z||I||(z=!0,r(F))},t.unstable_pauseExecution=function(){},t.unstable_getFirstCallbackNode=function(){return _(O)},t.unstable_Profiling=null},function(e,t,n){"use strict";var r=n(48);function o(){}function i(){}i.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,i,a){if(a!==r){var u=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw u.name="Invariant Violation",u}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:o};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";
/** @license React v16.8.6
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&Symbol.for,o=r?Symbol.for("react.element"):60103,i=r?Symbol.for("react.portal"):60106,a=r?Symbol.for("react.fragment"):60107,u=r?Symbol.for("react.strict_mode"):60108,l=r?Symbol.for("react.profiler"):60114,c=r?Symbol.for("react.provider"):60109,s=r?Symbol.for("react.context"):60110,f=r?Symbol.for("react.async_mode"):60111,p=r?Symbol.for("react.concurrent_mode"):60111,d=r?Symbol.for("react.forward_ref"):60112,h=r?Symbol.for("react.suspense"):60113,y=r?Symbol.for("react.memo"):60115,m=r?Symbol.for("react.lazy"):60116;function v(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case o:switch(e=e.type){case f:case p:case a:case l:case u:case h:return e;default:switch(e=e&&e.$$typeof){case s:case d:case c:return e;default:return t}}case m:case y:case i:return t}}}function b(e){return v(e)===p}t.typeOf=v,t.AsyncMode=f,t.ConcurrentMode=p,t.ContextConsumer=s,t.ContextProvider=c,t.Element=o,t.ForwardRef=d,t.Fragment=a,t.Lazy=m,t.Memo=y,t.Portal=i,t.Profiler=l,t.StrictMode=u,t.Suspense=h,t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===p||e===l||e===u||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===m||e.$$typeof===y||e.$$typeof===c||e.$$typeof===s||e.$$typeof===d)},t.isAsyncMode=function(e){return b(e)||v(e)===f},t.isConcurrentMode=b,t.isContextConsumer=function(e){return v(e)===s},t.isContextProvider=function(e){return v(e)===c},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===o},t.isForwardRef=function(e){return v(e)===d},t.isFragment=function(e){return v(e)===a},t.isLazy=function(e){return v(e)===m},t.isMemo=function(e){return v(e)===y},t.isPortal=function(e){return v(e)===i},t.isProfiler=function(e){return v(e)===l},t.isStrictMode=function(e){return v(e)===u},t.isSuspense=function(e){return v(e)===h}},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t){e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},function(e,t,n){var r=n(53),o=n(110)((function(e,t,n){r(e,t,n)}));e.exports=o},function(e,t,n){var r=n(54),o=n(26),i=n(85),a=n(87),u=n(4),l=n(36),c=n(35);e.exports=function e(t,n,s,f,p){t!==n&&i(n,(function(i,l){if(p||(p=new r),u(i))a(t,n,l,s,e,f,p);else{var d=f?f(c(t,l),i,l+"",t,n,p):void 0;void 0===d&&(d=i),o(t,l,d)}}),l)}},function(e,t,n){var r=n(8),o=n(60),i=n(61),a=n(62),u=n(63),l=n(64);function c(e){var t=this.__data__=new r(e);this.size=t.size}c.prototype.clear=o,c.prototype.delete=i,c.prototype.get=a,c.prototype.has=u,c.prototype.set=l,e.exports=c},function(e,t){e.exports=function(){this.__data__=[],this.size=0}},function(e,t,n){var r=n(9),o=Array.prototype.splice;e.exports=function(e){var t=this.__data__,n=r(t,e);return!(n<0)&&(n==t.length-1?t.pop():o.call(t,n,1),--this.size,!0)}},function(e,t,n){var r=n(9);e.exports=function(e){var t=this.__data__,n=r(t,e);return n<0?void 0:t[n][1]}},function(e,t,n){var r=n(9);e.exports=function(e){return r(this.__data__,e)>-1}},function(e,t,n){var r=n(9);e.exports=function(e,t){var n=this.__data__,o=r(n,e);return o<0?(++this.size,n.push([e,t])):n[o][1]=t,this}},function(e,t,n){var r=n(8);e.exports=function(){this.__data__=new r,this.size=0}},function(e,t){e.exports=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n}},function(e,t){e.exports=function(e){return this.__data__.get(e)}},function(e,t){e.exports=function(e){return this.__data__.has(e)}},function(e,t,n){var r=n(8),o=n(23),i=n(72);e.exports=function(e,t){var n=this.__data__;if(n instanceof r){var a=n.__data__;if(!o||a.length<199)return a.push([e,t]),this.size=++n.size,this;n=this.__data__=new i(a)}return n.set(e,t),this.size=n.size,this}},function(e,t,n){var r=n(15),o=n(68),i=n(4),a=n(70),u=/^\[object .+?Constructor\]$/,l=Function.prototype,c=Object.prototype,s=l.toString,f=c.hasOwnProperty,p=RegExp("^"+s.call(f).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");e.exports=function(e){return!(!i(e)||o(e))&&(r(e)?p:u).test(a(e))}},function(e,t,n){var r=n(24),o=Object.prototype,i=o.hasOwnProperty,a=o.toString,u=r?r.toStringTag:void 0;e.exports=function(e){var t=i.call(e,u),n=e[u];try{e[u]=void 0;var r=!0}catch(e){}var o=a.call(e);return r&&(t?e[u]=n:delete e[u]),o}},function(e,t){var n=Object.prototype.toString;e.exports=function(e){return n.call(e)}},function(e,t,n){var r,o=n(69),i=(r=/[^.]+$/.exec(o&&o.keys&&o.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"";e.exports=function(e){return!!i&&i in e}},function(e,t,n){var r=n(5)["__core-js_shared__"];e.exports=r},function(e,t){var n=Function.prototype.toString;e.exports=function(e){if(null!=e){try{return n.call(e)}catch(e){}try{return e+""}catch(e){}}return""}},function(e,t){e.exports=function(e,t){return null==e?void 0:e[t]}},function(e,t,n){var r=n(73),o=n(80),i=n(82),a=n(83),u=n(84);function l(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}l.prototype.clear=r,l.prototype.delete=o,l.prototype.get=i,l.prototype.has=a,l.prototype.set=u,e.exports=l},function(e,t,n){var r=n(74),o=n(8),i=n(23);e.exports=function(){this.size=0,this.__data__={hash:new r,map:new(i||o),string:new r}}},function(e,t,n){var r=n(75),o=n(76),i=n(77),a=n(78),u=n(79);function l(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}l.prototype.clear=r,l.prototype.delete=o,l.prototype.get=i,l.prototype.has=a,l.prototype.set=u,e.exports=l},function(e,t,n){var r=n(12);e.exports=function(){this.__data__=r?r(null):{},this.size=0}},function(e,t){e.exports=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t}},function(e,t,n){var r=n(12),o=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;if(r){var n=t[e];return"__lodash_hash_undefined__"===n?void 0:n}return o.call(t,e)?t[e]:void 0}},function(e,t,n){var r=n(12),o=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;return r?void 0!==t[e]:o.call(t,e)}},function(e,t,n){var r=n(12);e.exports=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=r&&void 0===t?"__lodash_hash_undefined__":t,this}},function(e,t,n){var r=n(13);e.exports=function(e){var t=r(this,e).delete(e);return this.size-=t?1:0,t}},function(e,t){e.exports=function(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e}},function(e,t,n){var r=n(13);e.exports=function(e){return r(this,e).get(e)}},function(e,t,n){var r=n(13);e.exports=function(e){return r(this,e).has(e)}},function(e,t,n){var r=n(13);e.exports=function(e,t){var n=r(this,e),o=n.size;return n.set(e,t),this.size+=n.size==o?0:1,this}},function(e,t,n){var r=n(86)();e.exports=r},function(e,t){e.exports=function(e){return function(t,n,r){for(var o=-1,i=Object(t),a=r(t),u=a.length;u--;){var l=a[e?u:++o];if(!1===n(i[l],l,i))break}return t}}},function(e,t,n){var r=n(26),o=n(88),i=n(89),a=n(92),u=n(93),l=n(30),c=n(31),s=n(97),f=n(33),p=n(15),d=n(4),h=n(99),y=n(34),m=n(35),v=n(103);e.exports=function(e,t,n,b,g,w,x){var E=m(e,n),k=m(t,n),T=x.get(k);if(T)r(e,n,T);else{var S=w?w(E,k,n+"",e,t,x):void 0,_=void 0===S;if(_){var P=c(k),C=!P&&f(k),O=!P&&!C&&y(k);S=k,P||C||O?c(E)?S=E:s(E)?S=a(E):C?(_=!1,S=o(k,!0)):O?(_=!1,S=i(k,!0)):S=[]:h(k)||l(k)?(S=E,l(E)?S=v(E):d(E)&&!p(E)||(S=u(k))):_=!1}_&&(x.set(k,S),g(S,k,b,w,x),x.delete(k)),r(e,n,S)}}},function(e,t,n){(function(e){var r=n(5),o=t&&!t.nodeType&&t,i=o&&"object"==typeof e&&e&&!e.nodeType&&e,a=i&&i.exports===o?r.Buffer:void 0,u=a?a.allocUnsafe:void 0;e.exports=function(e,t){if(t)return e.slice();var n=e.length,r=u?u(n):new e.constructor(n);return e.copy(r),r}}).call(this,n(17)(e))},function(e,t,n){var r=n(90);e.exports=function(e,t){var n=t?r(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.length)}},function(e,t,n){var r=n(91);e.exports=function(e){var t=new e.constructor(e.byteLength);return new r(t).set(new r(e)),t}},function(e,t,n){var r=n(5).Uint8Array;e.exports=r},function(e,t){e.exports=function(e,t){var n=-1,r=e.length;for(t||(t=Array(r));++n<r;)t[n]=e[n];return t}},function(e,t,n){var r=n(94),o=n(28),i=n(29);e.exports=function(e){return"function"!=typeof e.constructor||i(e)?{}:r(o(e))}},function(e,t,n){var r=n(4),o=Object.create,i=function(){function e(){}return function(t){if(!r(t))return{};if(o)return o(t);e.prototype=t;var n=new e;return e.prototype=void 0,n}}();e.exports=i},function(e,t){e.exports=function(e,t){return function(n){return e(t(n))}}},function(e,t,n){var r=n(11),o=n(6);e.exports=function(e){return o(e)&&"[object Arguments]"==r(e)}},function(e,t,n){var r=n(18),o=n(6);e.exports=function(e){return o(e)&&r(e)}},function(e,t){e.exports=function(){return!1}},function(e,t,n){var r=n(11),o=n(28),i=n(6),a=Function.prototype,u=Object.prototype,l=a.toString,c=u.hasOwnProperty,s=l.call(Object);e.exports=function(e){if(!i(e)||"[object Object]"!=r(e))return!1;var t=o(e);if(null===t)return!0;var n=c.call(t,"constructor")&&t.constructor;return"function"==typeof n&&n instanceof n&&l.call(n)==s}},function(e,t,n){var r=n(11),o=n(32),i=n(6),a={};a["[object Float32Array]"]=a["[object Float64Array]"]=a["[object Int8Array]"]=a["[object Int16Array]"]=a["[object Int32Array]"]=a["[object Uint8Array]"]=a["[object Uint8ClampedArray]"]=a["[object Uint16Array]"]=a["[object Uint32Array]"]=!0,a["[object Arguments]"]=a["[object Array]"]=a["[object ArrayBuffer]"]=a["[object Boolean]"]=a["[object DataView]"]=a["[object Date]"]=a["[object Error]"]=a["[object Function]"]=a["[object Map]"]=a["[object Number]"]=a["[object Object]"]=a["[object RegExp]"]=a["[object Set]"]=a["[object String]"]=a["[object WeakMap]"]=!1,e.exports=function(e){return i(e)&&o(e.length)&&!!a[r(e)]}},function(e,t){e.exports=function(e){return function(t){return e(t)}}},function(e,t,n){(function(e){var r=n(25),o=t&&!t.nodeType&&t,i=o&&"object"==typeof e&&e&&!e.nodeType&&e,a=i&&i.exports===o&&r.process,u=function(){try{var e=i&&i.require&&i.require("util").types;return e||a&&a.binding&&a.binding("util")}catch(e){}}();e.exports=u}).call(this,n(17)(e))},function(e,t,n){var r=n(104),o=n(36);e.exports=function(e){return r(e,o(e))}},function(e,t,n){var r=n(105),o=n(16);e.exports=function(e,t,n,i){var a=!n;n||(n={});for(var u=-1,l=t.length;++u<l;){var c=t[u],s=i?i(n[c],e[c],c,n,e):void 0;void 0===s&&(s=e[c]),a?o(n,c,s):r(n,c,s)}return n}},function(e,t,n){var r=n(16),o=n(10),i=Object.prototype.hasOwnProperty;e.exports=function(e,t,n){var a=e[t];i.call(e,t)&&o(a,n)&&(void 0!==n||t in e)||r(e,t,n)}},function(e,t,n){var r=n(107),o=n(30),i=n(31),a=n(33),u=n(37),l=n(34),c=Object.prototype.hasOwnProperty;e.exports=function(e,t){var n=i(e),s=!n&&o(e),f=!n&&!s&&a(e),p=!n&&!s&&!f&&l(e),d=n||s||f||p,h=d?r(e.length,String):[],y=h.length;for(var m in e)!t&&!c.call(e,m)||d&&("length"==m||f&&("offset"==m||"parent"==m)||p&&("buffer"==m||"byteLength"==m||"byteOffset"==m)||u(m,y))||h.push(m);return h}},function(e,t){e.exports=function(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}},function(e,t,n){var r=n(4),o=n(29),i=n(109),a=Object.prototype.hasOwnProperty;e.exports=function(e){if(!r(e))return i(e);var t=o(e),n=[];for(var u in e)("constructor"!=u||!t&&a.call(e,u))&&n.push(u);return n}},function(e,t){e.exports=function(e){var t=[];if(null!=e)for(var n in Object(e))t.push(n);return t}},function(e,t,n){var r=n(111),o=n(118);e.exports=function(e){return r((function(t,n){var r=-1,i=n.length,a=i>1?n[i-1]:void 0,u=i>2?n[2]:void 0;for(a=e.length>3&&"function"==typeof a?(i--,a):void 0,u&&o(n[0],n[1],u)&&(a=i<3?void 0:a,i=1),t=Object(t);++r<i;){var l=n[r];l&&e(t,l,r,a)}return t}))}},function(e,t,n){var r=n(38),o=n(112),i=n(114);e.exports=function(e,t){return i(o(e,t,r),e+"")}},function(e,t,n){var r=n(113),o=Math.max;e.exports=function(e,t,n){return t=o(void 0===t?e.length-1:t,0),function(){for(var i=arguments,a=-1,u=o(i.length-t,0),l=Array(u);++a<u;)l[a]=i[t+a];a=-1;for(var c=Array(t+1);++a<t;)c[a]=i[a];return c[t]=n(l),r(e,this,c)}}},function(e,t){e.exports=function(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)}},function(e,t,n){var r=n(115),o=n(117)(r);e.exports=o},function(e,t,n){var r=n(116),o=n(27),i=n(38),a=o?function(e,t){return o(e,"toString",{configurable:!0,enumerable:!1,value:r(t),writable:!0})}:i;e.exports=a},function(e,t){e.exports=function(e){return function(){return e}}},function(e,t){var n=Date.now;e.exports=function(e){var t=0,r=0;return function(){var o=n(),i=16-(o-r);if(r=o,i>0){if(++t>=800)return arguments[0]}else t=0;return e.apply(void 0,arguments)}}},function(e,t,n){var r=n(10),o=n(18),i=n(37),a=n(4);e.exports=function(e,t,n){if(!a(n))return!1;var u=typeof t;return!!("number"==u?o(n)&&i(t,n.length):"string"==u&&t in n)&&r(n[t],e)}},function(e,t,n){"use strict";n.r(t);var r=n(0),o=n.n(r),i=n(39),a=n.n(i);function u(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}var l=n(1),c=n.n(l),s=c.a.shape({trySubscribe:c.a.func.isRequired,tryUnsubscribe:c.a.func.isRequired,notifyNestedSubs:c.a.func.isRequired,isSubscribed:c.a.func.isRequired}),f=c.a.shape({subscribe:c.a.func.isRequired,dispatch:c.a.func.isRequired,getState:c.a.func.isRequired});o.a.forwardRef;var p=function(e){var t;void 0===e&&(e="store");var n=e+"Subscription",o=function(t){u(i,t);var o=i.prototype;function i(n,r){var o;return(o=t.call(this,n,r)||this)[e]=n.store,o}return o.getChildContext=function(){var t;return(t={})[e]=this[e],t[n]=null,t},o.render=function(){return r.Children.only(this.props.children)},i}(r.Component);return o.propTypes={store:f.isRequired,children:c.a.element.isRequired},o.childContextTypes=((t={})[e]=f.isRequired,t[n]=s,t),o}();function d(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function h(){return(h=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function y(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}var m=n(40),v=n.n(m),b=n(2),g=n.n(b),w=n(19),x={notify:function(){}};var E=function(){function e(e,t,n){this.store=e,this.parentSub=t,this.onStateChange=n,this.unsubscribe=null,this.listeners=x}var t=e.prototype;return t.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},t.notifyNestedSubs=function(){this.listeners.notify()},t.isSubscribed=function(){return Boolean(this.unsubscribe)},t.trySubscribe=function(){var e,t;this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.onStateChange):this.store.subscribe(this.onStateChange),this.listeners=(e=[],t=[],{clear:function(){t=null,e=null},notify:function(){for(var n=e=t,r=0;r<n.length;r++)n[r]()},get:function(){return t},subscribe:function(n){var r=!0;return t===e&&(t=e.slice()),t.push(n),function(){r&&null!==e&&(r=!1,t===e&&(t=e.slice()),t.splice(t.indexOf(n),1))}}}))},t.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=x)},e}(),k=void 0!==o.a.forwardRef,T=0,S={};function _(){}function P(e,t){var n,o;void 0===t&&(t={});var i=t,a=i.getDisplayName,l=void 0===a?function(e){return"ConnectAdvanced("+e+")"}:a,c=i.methodName,p=void 0===c?"connectAdvanced":c,m=i.renderCountProp,b=void 0===m?void 0:m,x=i.shouldHandleStateChanges,P=void 0===x||x,C=i.storeKey,O=void 0===C?"store":C,j=i.withRef,N=void 0!==j&&j,R=y(i,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef"]),M=O+"Subscription",I=T++,z=((n={})[O]=f,n[M]=s,n),U=((o={})[M]=s,o);return function(t){g()(Object(w.isValidElementType)(t),"You must pass a component to the function returned by "+p+". Instead received "+JSON.stringify(t));var n=t.displayName||t.name||"Component",o=l(n),i=h({},R,{getDisplayName:l,methodName:p,renderCountProp:b,shouldHandleStateChanges:P,storeKey:O,withRef:N,displayName:o,wrappedComponentName:n,WrappedComponent:t}),a=function(n){function a(e,t){var r;return(r=n.call(this,e,t)||this).version=I,r.state={},r.renderCount=0,r.store=e[O]||t[O],r.propsMode=Boolean(e[O]),r.setWrappedInstance=r.setWrappedInstance.bind(d(d(r))),g()(r.store,'Could not find "'+O+'" in either the context or props of "'+o+'". Either wrap the root component in a <Provider>, or explicitly pass "'+O+'" as a prop to "'+o+'".'),r.initSelector(),r.initSubscription(),r}u(a,n);var l=a.prototype;return l.getChildContext=function(){var e,t=this.propsMode?null:this.subscription;return(e={})[M]=t||this.context[M],e},l.componentDidMount=function(){P&&(this.subscription.trySubscribe(),this.selector.run(this.props),this.selector.shouldComponentUpdate&&this.forceUpdate())},l.componentWillReceiveProps=function(e){this.selector.run(e)},l.shouldComponentUpdate=function(){return this.selector.shouldComponentUpdate},l.componentWillUnmount=function(){this.subscription&&this.subscription.tryUnsubscribe(),this.subscription=null,this.notifyNestedSubs=_,this.store=null,this.selector.run=_,this.selector.shouldComponentUpdate=!1},l.getWrappedInstance=function(){return g()(N,"To access the wrapped instance, you need to specify { withRef: true } in the options argument of the "+p+"() call."),this.wrappedInstance},l.setWrappedInstance=function(e){this.wrappedInstance=e},l.initSelector=function(){var t=e(this.store.dispatch,i);this.selector=function(e,t){var n={run:function(r){try{var o=e(t.getState(),r);(o!==n.props||n.error)&&(n.shouldComponentUpdate=!0,n.props=o,n.error=null)}catch(e){n.shouldComponentUpdate=!0,n.error=e}}};return n}(t,this.store),this.selector.run(this.props)},l.initSubscription=function(){if(P){var e=(this.propsMode?this.props:this.context)[M];this.subscription=new E(this.store,e,this.onStateChange.bind(this)),this.notifyNestedSubs=this.subscription.notifyNestedSubs.bind(this.subscription)}},l.onStateChange=function(){this.selector.run(this.props),this.selector.shouldComponentUpdate?(this.componentDidUpdate=this.notifyNestedSubsOnComponentDidUpdate,this.setState(S)):this.notifyNestedSubs()},l.notifyNestedSubsOnComponentDidUpdate=function(){this.componentDidUpdate=void 0,this.notifyNestedSubs()},l.isSubscribed=function(){return Boolean(this.subscription)&&this.subscription.isSubscribed()},l.addExtraProps=function(e){if(!(N||b||this.propsMode&&this.subscription))return e;var t=h({},e);return N&&(t.ref=this.setWrappedInstance),b&&(t[b]=this.renderCount++),this.propsMode&&this.subscription&&(t[M]=this.subscription),t},l.render=function(){var e=this.selector;if(e.shouldComponentUpdate=!1,e.error)throw e.error;return Object(r.createElement)(t,this.addExtraProps(e.props))},a}(r.Component);return k&&(a.prototype.UNSAFE_componentWillReceiveProps=a.prototype.componentWillReceiveProps,delete a.prototype.componentWillReceiveProps),a.WrappedComponent=t,a.displayName=o,a.childContextTypes=U,a.contextTypes=z,a.propTypes=z,v()(a,t)}}var C=Object.prototype.hasOwnProperty;function O(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function j(e,t){if(O(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var o=0;o<n.length;o++)if(!C.call(t,n[o])||!O(e[n[o]],t[n[o]]))return!1;return!0}var N=n(20),R=function(){return Math.random().toString(36).substring(7).split("").join(".")},M={INIT:"@@redux/INIT"+R(),REPLACE:"@@redux/REPLACE"+R(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+R()}};function I(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function z(e,t,n){var r;if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.");if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(z)(e,t)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var o=e,i=t,a=[],u=a,l=!1;function c(){u===a&&(u=a.slice())}function s(){if(l)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return i}function f(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(l)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribelistener for more details.");var t=!0;return c(),u.push(e),function(){if(t){if(l)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribelistener for more details.");t=!1,c();var n=u.indexOf(e);u.splice(n,1),a=null}}}function p(e){if(!I(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(l)throw new Error("Reducers may not dispatch actions.");try{l=!0,i=o(i,e)}finally{l=!1}for(var t=a=u,n=0;n<t.length;n++){(0,t[n])()}return e}function d(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");o=e,p({type:M.REPLACE})}function h(){var e,t=f;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(s())}return n(),{unsubscribe:t(n)}}})[N.a]=function(){return this},e}return p({type:M.INIT}),(r={dispatch:p,subscribe:f,getState:s,replaceReducer:d})[N.a]=h,r}function U(e,t){var n=t&&t.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function A(e,t){return function(){return t(e.apply(this,arguments))}}function D(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function F(e,t){var n=Object.keys(e);return Object.getOwnPropertySymbols&&n.push.apply(n,Object.getOwnPropertySymbols(e)),t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n}function L(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?F(n,!0).forEach((function(t){D(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):F(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function W(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}function V(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},o={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},i=t.map((function(e){return e(o)}));return L({},n,{dispatch:r=W.apply(void 0,i)(n.dispatch)})}}}function q(e){return function(t,n){var r=e(t,n);function o(){return r}return o.dependsOnOwnProps=!1,o}}function B(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function H(e,t){return function(t,n){n.displayName;var r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=B(e);var o=r(t,n);return"function"==typeof o&&(r.mapToProps=o,r.dependsOnOwnProps=B(o),o=r(t,n)),o},r}}var K=[function(e){return"function"==typeof e?H(e):void 0},function(e){return e?void 0:q((function(e){return{dispatch:e}}))},function(e){return e&&"object"==typeof e?q((function(t){return function(e,t){if("function"==typeof e)return A(e,t);if("object"!=typeof e||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":typeof e)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');var n={};for(var r in e){var o=e[r];"function"==typeof o&&(n[r]=A(o,t))}return n}(e,t)})):void 0}];var Q=[function(e){return"function"==typeof e?H(e):void 0},function(e){return e?void 0:q((function(){return{}}))}];function Y(e,t,n){return h({},n,e,t)}var X=[function(e){return"function"==typeof e?function(e){return function(t,n){n.displayName;var r,o=n.pure,i=n.areMergedPropsEqual,a=!1;return function(t,n,u){var l=e(t,n,u);return a?o&&i(l,r)||(r=l):(a=!0,r=l),r}}}(e):void 0},function(e){return e?void 0:function(){return Y}}];function G(e,t,n,r){return function(o,i){return n(e(o,i),t(r,i),i)}}function J(e,t,n,r,o){var i,a,u,l,c,s=o.areStatesEqual,f=o.areOwnPropsEqual,p=o.areStatePropsEqual,d=!1;function h(o,d){var h,y,m=!f(d,a),v=!s(o,i);return i=o,a=d,m&&v?(u=e(i,a),t.dependsOnOwnProps&&(l=t(r,a)),c=n(u,l,a)):m?(e.dependsOnOwnProps&&(u=e(i,a)),t.dependsOnOwnProps&&(l=t(r,a)),c=n(u,l,a)):v?(h=e(i,a),y=!p(h,u),u=h,y&&(c=n(u,l,a)),c):c}return function(o,s){return d?h(o,s):(u=e(i=o,a=s),l=t(r,a),c=n(u,l,a),d=!0,c)}}function Z(e,t){var n=t.initMapStateToProps,r=t.initMapDispatchToProps,o=t.initMergeProps,i=y(t,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),a=n(e,i),u=r(e,i),l=o(e,i);return(i.pure?J:G)(a,u,l,e,i)}function ee(e,t,n){for(var r=t.length-1;r>=0;r--){var o=t[r](e);if(o)return o}return function(t,r){throw new Error("Invalid value of type "+typeof e+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function te(e,t){return e===t}var ne,re,oe,ie,ae,ue,le,ce,se,fe,pe,de,he=(oe=(re=void 0===ne?{}:ne).connectHOC,ie=void 0===oe?P:oe,ae=re.mapStateToPropsFactories,ue=void 0===ae?Q:ae,le=re.mapDispatchToPropsFactories,ce=void 0===le?K:le,se=re.mergePropsFactories,fe=void 0===se?X:se,pe=re.selectorFactory,de=void 0===pe?Z:pe,function(e,t,n,r){void 0===r&&(r={});var o=r,i=o.pure,a=void 0===i||i,u=o.areStatesEqual,l=void 0===u?te:u,c=o.areOwnPropsEqual,s=void 0===c?j:c,f=o.areStatePropsEqual,p=void 0===f?j:f,d=o.areMergedPropsEqual,m=void 0===d?j:d,v=y(o,["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"]),b=ee(e,ue,"mapStateToProps"),g=ee(t,ce,"mapDispatchToProps"),w=ee(n,fe,"mergeProps");return ie(de,h({methodName:"connect",getDisplayName:function(e){return"Connect("+e+")"},shouldHandleStateChanges:Boolean(e),initMapStateToProps:b,initMapDispatchToProps:g,initMergeProps:w,pure:a,areStatesEqual:l,areOwnPropsEqual:s,areStatePropsEqual:p,areMergedPropsEqual:m},v))}),ye=n(3),me=n.n(ye);function ve(e){return"/"===e.charAt(0)}function be(e,t){for(var n=t,r=n+1,o=e.length;r<o;n+=1,r+=1)e[n]=e[r];e.pop()}var ge=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=e&&e.split("/")||[],r=t&&t.split("/")||[],o=e&&ve(e),i=t&&ve(t),a=o||i;if(e&&ve(e)?r=n:n.length&&(r.pop(),r=r.concat(n)),!r.length)return"/";var u=void 0;if(r.length){var l=r[r.length-1];u="."===l||".."===l||""===l}else u=!1;for(var c=0,s=r.length;s>=0;s--){var f=r[s];"."===f?be(r,s):".."===f?(be(r,s),c++):c&&(be(r,s),c--)}if(!a)for(;c--;c)r.unshift("..");!a||""===r[0]||r[0]&&ve(r[0])||r.unshift("");var p=r.join("/");return u&&"/"!==p.substr(-1)&&(p+="/"),p},we="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};var xe=function e(t,n){if(t===n)return!0;if(null==t||null==n)return!1;if(Array.isArray(t))return Array.isArray(n)&&t.length===n.length&&t.every((function(t,r){return e(t,n[r])}));var r=void 0===t?"undefined":we(t);if(r!==(void 0===n?"undefined":we(n)))return!1;if("object"===r){var o=t.valueOf(),i=n.valueOf();if(o!==t||i!==n)return e(o,i);var a=Object.keys(t),u=Object.keys(n);return a.length===u.length&&a.every((function(r){return e(t[r],n[r])}))}return!1};var Ee=function(e,t){if(!e)throw new Error("Invariant failed")};function ke(e){return"/"===e.charAt(0)?e:"/"+e}function Te(e){return"/"===e.charAt(0)?e.substr(1):e}function Se(e,t){return function(e,t){return new RegExp("^"+t+"(\\/|\\?|#|$)","i").test(e)}(e,t)?e.substr(t.length):e}function _e(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e}function Pe(e){var t=e.pathname,n=e.search,r=e.hash,o=t||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o}function Ce(e,t,n,r){var o;"string"==typeof e?(o=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var i=t.indexOf("?");return-1!==i&&(n=t.substr(i),t=t.substr(0,i)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e)).state=t:(void 0===(o=h({},e)).pathname&&(o.pathname=""),o.search?"?"!==o.search.charAt(0)&&(o.search="?"+o.search):o.search="",o.hash?"#"!==o.hash.charAt(0)&&(o.hash="#"+o.hash):o.hash="",void 0!==t&&void 0===o.state&&(o.state=t));try{o.pathname=decodeURI(o.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+o.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(o.key=n),r?o.pathname?"/"!==o.pathname.charAt(0)&&(o.pathname=ge(o.pathname,r.pathname)):o.pathname=r.pathname:o.pathname||(o.pathname="/"),o}function Oe(){var e=null;var t=[];return{setPrompt:function(t){return e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,o){if(null!=e){var i="function"==typeof e?e(t,n):e;"string"==typeof i?"function"==typeof r?r(i,o):o(!0):o(!1!==i)}else o(!0)},appendListener:function(e){var n=!0;function r(){n&&e.apply(void 0,arguments)}return t.push(r),function(){n=!1,t=t.filter((function(e){return e!==r}))}},notifyListeners:function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach((function(e){return e.apply(void 0,n)}))}}}var je=!("undefined"==typeof window||!window.document||!window.document.createElement);function Ne(e,t){t(window.confirm(e))}var Re={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+Te(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:Te,decodePath:ke},slash:{encodePath:ke,decodePath:ke}};function Me(){var e=window.location.href,t=e.indexOf("#");return-1===t?"":e.substring(t+1)}function Ie(e){var t=window.location.href.indexOf("#");window.location.replace(window.location.href.slice(0,t>=0?t:0)+"#"+e)}function ze(e){void 0===e&&(e={}),je||Ee(!1);var t=window.history,n=(window.navigator.userAgent.indexOf("Firefox"),e),r=n.getUserConfirmation,o=void 0===r?Ne:r,i=n.hashType,a=void 0===i?"slash":i,u=e.basename?_e(ke(e.basename)):"",l=Re[a],c=l.encodePath,s=l.decodePath;function f(){var e=s(Me());return u&&(e=Se(e,u)),Ce(e)}var p=Oe();function d(e){h(_,e),_.length=t.length,p.notifyListeners(_.location,_.action)}var y=!1,m=null;function v(){var e,t,n=Me(),r=c(n);if(n!==r)Ie(r);else{var i=f(),a=_.location;if(!y&&(t=i,(e=a).pathname===t.pathname&&e.search===t.search&&e.hash===t.hash&&e.key===t.key&&xe(e.state,t.state)))return;if(m===Pe(i))return;m=null,function(e){if(y)y=!1,d();else{p.confirmTransitionTo(e,"POP",o,(function(t){t?d({action:"POP",location:e}):function(e){var t=_.location,n=x.lastIndexOf(Pe(t));-1===n&&(n=0);var r=x.lastIndexOf(Pe(e));-1===r&&(r=0);var o=n-r;o&&(y=!0,E(o))}(e)}))}}(i)}}var b=Me(),g=c(b);b!==g&&Ie(g);var w=f(),x=[Pe(w)];function E(e){t.go(e)}var k=0;function T(e){1===(k+=e)&&1===e?window.addEventListener("hashchange",v):0===k&&window.removeEventListener("hashchange",v)}var S=!1;var _={length:t.length,action:"POP",location:w,createHref:function(e){return"#"+c(u+Pe(e))},push:function(e,t){var n=Ce(e,void 0,void 0,_.location);p.confirmTransitionTo(n,"PUSH",o,(function(e){if(e){var t=Pe(n),r=c(u+t);if(Me()!==r){m=t,function(e){window.location.hash=e}(r);var o=x.lastIndexOf(Pe(_.location)),i=x.slice(0,-1===o?0:o+1);i.push(t),x=i,d({action:"PUSH",location:n})}else d()}}))},replace:function(e,t){var n=Ce(e,void 0,void 0,_.location);p.confirmTransitionTo(n,"REPLACE",o,(function(e){if(e){var t=Pe(n),r=c(u+t);Me()!==r&&(m=t,Ie(r));var o=x.indexOf(Pe(_.location));-1!==o&&(x[o]=t),d({action:"REPLACE",location:n})}}))},go:E,goBack:function(){E(-1)},goForward:function(){E(1)},block:function(e){void 0===e&&(e=!1);var t=p.setPrompt(e);return S||(T(1),S=!0),function(){return S&&(S=!1,T(-1)),t()}},listen:function(e){var t=p.appendListener(e);return T(1),function(){T(-1),t()}}};return _}var Ue=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function Ae(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function De(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var Fe=function(e){function t(){var n,r;Ae(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=De(this,e.call.apply(e,[this].concat(i))),r.state={match:r.computeMatch(r.props.history.location.pathname)},De(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:Ue({},this.context.router,{history:this.props.history,route:{location:this.props.history.location,match:this.state.match}})}},t.prototype.computeMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}},t.prototype.componentWillMount=function(){var e=this,t=this.props,n=t.children,r=t.history;g()(null==n||1===o.a.Children.count(n),"A <Router> may have only one child element"),this.unlisten=r.listen((function(){e.setState({match:e.computeMatch(r.location.pathname)})}))},t.prototype.componentWillReceiveProps=function(e){me()(this.props.history===e.history,"You cannot change <Router history>")},t.prototype.componentWillUnmount=function(){this.unlisten()},t.prototype.render=function(){var e=this.props.children;return e?o.a.Children.only(e):null},t}(o.a.Component);Fe.propTypes={history:c.a.object.isRequired,children:c.a.node},Fe.contextTypes={router:c.a.object},Fe.childContextTypes={router:c.a.object.isRequired};var Le=Fe;function $e(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function We(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var Ve=function(e){function t(){var n,r;$e(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=We(this,e.call.apply(e,[this].concat(i))),r.history=ze(r.props),We(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){me()(!this.props.history,"<HashRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { HashRouter as Router }`.")},t.prototype.render=function(){return o.a.createElement(Le,{history:this.history,children:this.props.children})},t}(o.a.Component);Ve.propTypes={basename:c.a.string,getUserConfirmation:c.a.func,hashType:c.a.oneOf(["hashbang","noslash","slash"]),children:c.a.node};var qe=Ve,Be=n(42),He=n.n(Be),Ke={},Qe=0,Ye=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=Ke[n]||(Ke[n]={});if(r[e])return r[e];var o=[],i={re:He()(e,o,t),keys:o};return Qe<1e4&&(r[e]=i,Qe++),i},Xe=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments[2];"string"==typeof t&&(t={path:t});var r=t,o=r.path,i=r.exact,a=void 0!==i&&i,u=r.strict,l=void 0!==u&&u,c=r.sensitive,s=void 0!==c&&c;if(null==o)return n;var f=Ye(o,{end:a,strict:l,sensitive:s}),p=f.re,d=f.keys,h=p.exec(e);if(!h)return null;var y=h[0],m=h.slice(1),v=e===y;return a&&!v?null:{path:o,url:"/"===o&&""===y?"/":y,isExact:v,params:d.reduce((function(e,t,n){return e[t.name]=m[n],e}),{})}};function Ge(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Je(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var Ze=function(e){function t(){return Ge(this,t),Je(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){g()(this.context.router,"You should not use <Switch> outside a <Router>")},t.prototype.componentWillReceiveProps=function(e){me()(!(e.location&&!this.props.location),'<Switch> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.'),me()(!(!e.location&&this.props.location),'<Switch> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.')},t.prototype.render=function(){var e=this.context.router.route,t=this.props.children,n=this.props.location||e.location,r=void 0,i=void 0;return o.a.Children.forEach(t,(function(t){if(null==r&&o.a.isValidElement(t)){var a=t.props,u=a.path,l=a.exact,c=a.strict,s=a.sensitive,f=a.from,p=u||f;i=t,r=Xe(n.pathname,{path:p,exact:l,strict:c,sensitive:s},e.match)}})),r?o.a.cloneElement(i,{location:n,computedMatch:r}):null},t}(o.a.Component);Ze.contextTypes={router:c.a.shape({route:c.a.object.isRequired}).isRequired},Ze.propTypes={children:c.a.node,location:c.a.object};var et=Ze,tt=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function nt(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function rt(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var ot=function(e){return 0===o.a.Children.count(e)},it=function(e){function t(){var n,r;nt(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=rt(this,e.call.apply(e,[this].concat(i))),r.state={match:r.computeMatch(r.props,r.context.router)},rt(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:tt({},this.context.router,{route:{location:this.props.location||this.context.router.route.location,match:this.state.match}})}},t.prototype.computeMatch=function(e,t){var n=e.computedMatch,r=e.location,o=e.path,i=e.strict,a=e.exact,u=e.sensitive;if(n)return n;g()(t,"You should not use <Route> or withRouter() outside a <Router>");var l=t.route,c=(r||l.location).pathname;return Xe(c,{path:o,strict:i,exact:a,sensitive:u},l.match)},t.prototype.componentWillMount=function(){me()(!(this.props.component&&this.props.render),"You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored"),me()(!(this.props.component&&this.props.children&&!ot(this.props.children)),"You should not use <Route component> and <Route children> in the same route; <Route children> will be ignored"),me()(!(this.props.render&&this.props.children&&!ot(this.props.children)),"You should not use <Route render> and <Route children> in the same route; <Route children> will be ignored")},t.prototype.componentWillReceiveProps=function(e,t){me()(!(e.location&&!this.props.location),'<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.'),me()(!(!e.location&&this.props.location),'<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.'),this.setState({match:this.computeMatch(e,t.router)})},t.prototype.render=function(){var e=this.state.match,t=this.props,n=t.children,r=t.component,i=t.render,a=this.context.router,u=a.history,l=a.route,c=a.staticContext,s={match:e,location:this.props.location||l.location,history:u,staticContext:c};return r?e?o.a.createElement(r,s):null:i?e?i(s):null:"function"==typeof n?n(s):n&&!ot(n)?o.a.Children.only(n):null},t}(o.a.Component);it.propTypes={computedMatch:c.a.object,path:c.a.string,exact:c.a.bool,strict:c.a.bool,sensitive:c.a.bool,component:c.a.func,render:c.a.func,children:c.a.oneOfType([c.a.func,c.a.node]),location:c.a.object},it.contextTypes={router:c.a.shape({history:c.a.object.isRequired,route:c.a.object.isRequired,staticContext:c.a.object})},it.childContextTypes={router:c.a.object.isRequired};var at=it,ut=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function lt(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function ct(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var st=function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)},ft=function(e){function t(){var n,r;lt(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=ct(this,e.call.apply(e,[this].concat(i))),r.handleClick=function(e){if(r.props.onClick&&r.props.onClick(e),!e.defaultPrevented&&0===e.button&&!r.props.target&&!st(e)){e.preventDefault();var t=r.context.router.history,n=r.props,o=n.replace,i=n.to;o?t.replace(i):t.push(i)}},ct(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.render=function(){var e=this.props,t=(e.replace,e.to),n=e.innerRef,r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["replace","to","innerRef"]);g()(this.context.router,"You should not use <Link> outside a <Router>"),g()(void 0!==t,'You must specify the "to" property');var i=this.context.router.history,a="string"==typeof t?Ce(t,null,null,i.location):t,u=i.createHref(a);return o.a.createElement("a",ut({},r,{onClick:this.handleClick,href:u,ref:n}))},t}(o.a.Component);ft.propTypes={onClick:c.a.func,target:c.a.string,replace:c.a.bool,to:c.a.oneOfType([c.a.string,c.a.object]).isRequired,innerRef:c.a.oneOfType([c.a.string,c.a.func])},ft.defaultProps={replace:!1},ft.contextTypes={router:c.a.shape({history:c.a.shape({push:c.a.func.isRequired,replace:c.a.func.isRequired,createHref:c.a.func.isRequired}).isRequired}).isRequired};var pt=ft,dt=function(e){return o.a.createElement("li",null,o.a.createElement(pt,{to:"/posts/".concat(e.post.id)},e.post.title),o.a.createElement(pt,{to:"/posts/".concat(e.post.id,"/edit")},"Edit"),o.a.createElement("button",{onClick:function(){return e.deletePost(e.post.id)}},"D"))};function ht(e){return(ht="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function yt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function mt(e){return(mt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function vt(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function bt(e,t){return(bt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var gt=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=function(e,t){return!t||"object"!==ht(t)&&"function"!=typeof t?vt(e):t}(this,mt(t).call(this,e))).state=n.props.post,n.handleSubmit=n.handleSubmit.bind(vt(n)),n}var n,r,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&bt(e,t)}(t,e),n=t,(r=[{key:"handleSubmit",value:function(e){e.preventDefault(),this.props.action(this.state)}},{key:"update",value:function(e){var t=this;return function(n){return t.setState((r={},o=e,i=n.currentTarget.value,o in r?Object.defineProperty(r,o,{value:i,enumerable:!0,configurable:!0,writable:!0}):r[o]=i,r));var r,o,i}}},{key:"render",value:function(){return o.a.createElement("div",null,o.a.createElement("h3",null,this.props.formType),o.a.createElement("form",{onSubmit:this.handleSubmit},o.a.createElement("label",null,"Title",o.a.createElement("input",{type:"text",value:this.state.title,onChange:this.update("title")})),o.a.createElement("label",null,"Body",o.a.createElement("textarea",{value:this.state.body,onChange:this.update("body")})),o.a.createElement("button",{type:"submit",value:this.props.formType})))}}])&&yt(n.prototype,r),i&&yt(n,i),t}(o.a.Component),wt=function(e){return{type:"RECEIVE_POST",post:e}},xt=function(){return function(e){return $.ajax({url:"api/posts/"}).then((function(t){return e({type:"RECEIVE_ALL_POSTS",posts:t})}))}},Et=function(e){return function(t){return function(e){return $.ajax({url:"/api/posts/".concat(e,"/")})}(e).then((function(e){return t(wt(e))}))}},kt=function(e){return function(t){return function(e){return $.ajax({url:"api/posts/",method:"POST",data:{post:e}})}(e).then((function(e){return t(wt(e))}))}},Tt=function(e){return function(t){return function(e){return $.ajax({url:"/api/posts/".concat(e.id),method:"patch",data:{post:e}})}(e).then((function(e){return t(wt(e))}))}},St=function(e){return function(t){return function(e){return $.ajax({url:"/api/posts/".concat(e,"/"),method:"DELETE"})}(e).then((function(){return t(function(e){return{type:"REMOVE_POST",postId:e}}(e))}))}},_t=he((function(e){return{post:{title:"",body:""},formType:"Create Post"}}),(function(e){return{action:function(t){return e(kt(t))}}}))(gt);function Pt(e){return(Pt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Ct(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Ot(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function jt(e,t){return!t||"object"!==Pt(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Nt(e){return(Nt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Rt(e,t){return(Rt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Mt=function(e){function t(){return Ct(this,t),jt(this,Nt(t).apply(this,arguments))}var n,r,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Rt(e,t)}(t,e),n=t,(r=[{key:"componentDidMount",value:function(){this.props.fetchPosts()}},{key:"render",value:function(){var e=this.props,t=e.posts,n=e.deletePost;return o.a.createElement("div",null,o.a.createElement("ul",null,t.map((function(e){return o.a.createElement(dt,{post:e,deletePost:n,key:e.id})}))),o.a.createElement(_t,null))}}])&&Ot(n.prototype,r),i&&Ot(n,i),t}(o.a.Component),It=he((function(e){return{posts:Object.values(e.posts)}}),(function(e){return{fetchPosts:function(){return e(xt())},deletePost:function(t){return e(St(t))}}}))(Mt);function zt(e){return(zt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Ut(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function At(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Dt(e,t){return!t||"object"!==zt(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Ft(e){return(Ft=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Lt(e,t){return(Lt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var $t=function(e){function t(){return Ut(this,t),Dt(this,Ft(t).apply(this,arguments))}var n,r,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Lt(e,t)}(t,e),n=t,(r=[{key:"componentDidMount",value:function(){this.props.fetchPost(this.props.match.params.postId)}},{key:"render",value:function(){var e=this.props.post;return o.a.createElement("div",null,o.a.createElement("h1",null,e.title),o.a.createElement("p",null,e.body),o.a.createElement(pt,{to:"/"}))}}])&&At(n.prototype,r),i&&At(n,i),t}(o.a.Component),Wt=he((function(e,t){return{post:e.posts[t.match.params.postId]}}),(function(e){return{fetchPost:function(t){return e(Et(t))}}}))($t);function Vt(e){return(Vt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function qt(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Bt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Ht(e,t){return!t||"object"!==Vt(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Kt(e){return(Kt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Qt(e,t){return(Qt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Yt=function(e){function t(){return qt(this,t),Ht(this,Kt(t).apply(this,arguments))}var n,r,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Qt(e,t)}(t,e),n=t,(r=[{key:"componentDidMount",value:function(){this.props.fetchPost(this.props.match.params.postId)}},{key:"render",value:function(){var e=this.props,t=e.action,n=e.formType,r=e.post;return r?o.a.createElement(gt,{action:t,formType:n,post:r}):null}}])&&Bt(n.prototype,r),i&&Bt(n,i),t}(o.a.Component),Xt=he((function(e,t){return{post:e.posts[t.match.params.postId],formType:"Update Post"}}),(function(e){return{fetchPost:function(t){return e(Et(t))},action:function(t){return e(Tt(t))}}}))(Yt),Gt=function(){return o.a.createElement("div",null,o.a.createElement("h1",null,"React 1"),o.a.createElement(et,null,o.a.createElement(at,{exact:!0,path:"/",component:It}),o.a.createElement(at,{exact:!0,path:"/posts/:postId",component:Wt}),o.a.createElement(at,{path:"/posts/:postId/edit",component:Xt})))},Jt=function(e){var t=e.store;return o.a.createElement(p,{store:t},o.a.createElement(qe,null,o.a.createElement(Gt,{store:t})))};n(52);function Zt(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var en=function(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var o=t[r];0,"function"==typeof e[o]&&(n[o]=e[o])}var i,a=Object.keys(n);try{!function(e){Object.keys(e).forEach((function(t){var n=e[t];if(void 0===n(void 0,{type:M.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:M.PROBE_UNKNOWN_ACTION()}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+M.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')}))}(n)}catch(e){i=e}return function(e,t){if(void 0===e&&(e={}),i)throw i;for(var r=!1,o={},u=0;u<a.length;u++){var l=a[u],c=n[l],s=e[l],f=c(s,t);if(void 0===f){var p=U(l,t);throw new Error(p)}o[l]=f,r=r||f!==s}return(r=r||a.length!==Object.keys(e).length)?o:e}}({posts:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1?arguments[1]:void 0;switch(Object.freeze(e),t.type){case"RECEIVE_ALL_POSTS":return Object.assign({},e,t.posts);case"RECEIVE_POST":return Object.assign({},e,Zt({},t.post.id,t.post));case"REMOVE_POST":var n=Object.assign({},e);return delete n[t.postId],n;default:return e}}});function tn(e){return function(t){var n=t.dispatch,r=t.getState;return function(t){return function(o){return"function"==typeof o?o(n,r,e):t(o)}}}}var nn=tn();nn.withExtraArgument=tn;var rn=nn,on=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return z(en,e,V(rn))};document.addEventListener("DOMContentLoaded",(function(){var e=document.getElementById("root"),t=on();a.a.render(o.a.createElement(Jt,{store:t}),e)}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbnZhcmlhbnQvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvd2FybmluZy93YXJuaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNPYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fcm9vdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzT2JqZWN0TGlrZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19MaXN0Q2FjaGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXNzb2NJbmRleE9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvZXEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUdldFRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19uYXRpdmVDcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0TWFwRGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXROYXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0Z1bmN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VBc3NpZ25WYWx1ZS5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNBcnJheUxpa2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zeW1ib2wtb2JzZXJ2YWJsZS9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LWFzc2lnbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX01hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19TeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZnJlZUdsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hc3NpZ25NZXJnZVZhbHVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2RlZmluZVByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldFByb3RvdHlwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc1Byb3RvdHlwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzQXJndW1lbnRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzTGVuZ3RoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNCdWZmZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc1R5cGVkQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc2FmZUdldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2tleXNJbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc0luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaWRlbnRpdHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MvZGlzdC9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy5janMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N5bWJvbC1vYnNlcnZhYmxlL2VzL3BvbnlmaWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wYXRoLXRvLXJlZ2V4cC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2hhcm1vbnktbW9kdWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvbWVyZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZU1lcmdlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1N0YWNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZUNsZWFyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZURlbGV0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19saXN0Q2FjaGVHZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbGlzdENhY2hlSGFzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZVNldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zdGFja0NsZWFyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0YWNrRGVsZXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0YWNrR2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0YWNrSGFzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0YWNrU2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJc05hdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRSYXdUYWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fb2JqZWN0VG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNNYXNrZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY29yZUpzRGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL190b1NvdXJjZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRWYWx1ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19NYXBDYWNoZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXBDYWNoZUNsZWFyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX0hhc2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzaENsZWFyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc2hEZWxldGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzaEdldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNoSGFzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc2hTZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwQ2FjaGVEZWxldGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNLZXlhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21hcENhY2hlR2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21hcENhY2hlSGFzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21hcENhY2hlU2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VGb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY3JlYXRlQmFzZUZvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlTWVyZ2VEZWVwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Nsb25lQnVmZmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Nsb25lVHlwZWRBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jbG9uZUFycmF5QnVmZmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1VpbnQ4QXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY29weUFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2luaXRDbG9uZU9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlQ3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX292ZXJBcmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzQXJndW1lbnRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNBcnJheUxpa2VPYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9zdHViRmFsc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc1BsYWluT2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJc1R5cGVkQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVVuYXJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX25vZGVVdGlsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvdG9QbGFpbk9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jb3B5T2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Fzc2lnblZhbHVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5TGlrZUtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVRpbWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VLZXlzSW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbmF0aXZlS2V5c0luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NyZWF0ZUFzc2lnbmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VSZXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX292ZXJSZXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FwcGx5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3NldFRvU3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VTZXRUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2NvbnN0YW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3Nob3J0T3V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzSXRlcmF0ZWVDYWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy9Qcm9wVHlwZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2NvbXBvbmVudHMvUHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2Fzc2VydFRoaXNJbml0aWFsaXplZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvU3Vic2NyaXB0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb21wb25lbnRzL2Nvbm5lY3RBZHZhbmNlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvc2hhbGxvd0VxdWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC9lcy9yZWR1eC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC93cmFwTWFwVG9Qcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9tYXBEaXNwYXRjaFRvUHJvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvbWFwU3RhdGVUb1Byb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L21lcmdlUHJvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3Qvc2VsZWN0b3JGYWN0b3J5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L2Nvbm5lY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Jlc29sdmUtcGF0aG5hbWUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3ZhbHVlLWVxdWFsL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90aW55LWludmFyaWFudC9kaXN0L3RpbnktaW52YXJpYW50LmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lc20vaGlzdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL1JvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9Sb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvSGFzaFJvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL21hdGNoUGF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL1N3aXRjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9Td2l0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9Sb3V0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9Sb3V0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9MaW5rLmpzIiwid2VicGFjazovLy8uL2Zyb250ZW5kL2NvbXBvbmVudHMvcG9zdHMvcG9zdF9pbmRleF9pdGVtLmpzeCIsIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9jb21wb25lbnRzL3Bvc3RzL3Bvc3RfZm9ybS5qc3giLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvYWN0aW9ucy9wb3N0X2FjdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvdXRpbC9wb3N0X2FwaV91dGlsLmpzIiwid2VicGFjazovLy8uL2Zyb250ZW5kL2NvbXBvbmVudHMvcG9zdHMvY3JlYXRlX3Bvc3RfZm9ybV9jb250YWluZXIuanN4Iiwid2VicGFjazovLy8uL2Zyb250ZW5kL2NvbXBvbmVudHMvcG9zdHMvcG9zdF9pbmRleC5qc3giLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvY29tcG9uZW50cy9wb3N0cy9wb3N0X2luZGV4X2NvbnRhaW5lci5qc3giLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvY29tcG9uZW50cy9wb3N0cy9wb3N0X3Nob3cuanN4Iiwid2VicGFjazovLy8uL2Zyb250ZW5kL2NvbXBvbmVudHMvcG9zdHMvcG9zdF9zaG93X2NvbnRhaW5lci5qc3giLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvY29tcG9uZW50cy9wb3N0cy9lZGl0X3Bvc3RfZm9ybV9jb250YWluZXIuanN4Iiwid2VicGFjazovLy8uL2Zyb250ZW5kL2NvbXBvbmVudHMvYXBwLmpzeCIsIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9jb21wb25lbnRzL3Jvb3QuanN4Iiwid2VicGFjazovLy8uL2Zyb250ZW5kL3JlZHVjZXJzL3Bvc3RzX3JlZHVjZXIuanMiLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvcmVkdWNlcnMvcm9vdF9yZWR1Y2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC10aHVuay9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9zdG9yZS9zdG9yZS5qcyIsIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9yZWFjdDEuanN4Il0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiY29uZGl0aW9uIiwiZm9ybWF0IiwiYSIsImIiLCJlIiwiZiIsImVycm9yIiwidW5kZWZpbmVkIiwiRXJyb3IiLCJhcmdzIiwiYXJnSW5kZXgiLCJyZXBsYWNlIiwiZnJhbWVzVG9Qb3AiLCJ3YXJuaW5nIiwidHlwZSIsImZyZWVHbG9iYWwiLCJmcmVlU2VsZiIsInNlbGYiLCJyb290IiwiRnVuY3Rpb24iLCJsaXN0Q2FjaGVDbGVhciIsImxpc3RDYWNoZURlbGV0ZSIsImxpc3RDYWNoZUdldCIsImxpc3RDYWNoZUhhcyIsImxpc3RDYWNoZVNldCIsIkxpc3RDYWNoZSIsImVudHJpZXMiLCJpbmRleCIsImxlbmd0aCIsInRoaXMiLCJjbGVhciIsImVudHJ5Iiwic2V0IiwiaGFzIiwiZXEiLCJhcnJheSIsIm90aGVyIiwiZ2V0UmF3VGFnIiwib2JqZWN0VG9TdHJpbmciLCJzeW1Ub1N0cmluZ1RhZyIsIm5hdGl2ZUNyZWF0ZSIsImdldE5hdGl2ZSIsImlzS2V5YWJsZSIsIm1hcCIsImRhdGEiLCJfX2RhdGFfXyIsImJhc2VJc05hdGl2ZSIsImdldFZhbHVlIiwiYmFzZUdldFRhZyIsImlzT2JqZWN0IiwidGFnIiwid2VicGFja1BvbHlmaWxsIiwiZGVwcmVjYXRlIiwicGF0aHMiLCJjaGlsZHJlbiIsImlzRnVuY3Rpb24iLCJpc0xlbmd0aCIsIndpbmRvdyIsImdsb2JhbCIsInJlc3VsdCIsImdldE93blByb3BlcnR5U3ltYm9scyIsInByb3BJc0VudW1lcmFibGUiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsInRvT2JqZWN0IiwidmFsIiwiVHlwZUVycm9yIiwiYXNzaWduIiwidGVzdDEiLCJTdHJpbmciLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwidGVzdDIiLCJmcm9tQ2hhckNvZGUiLCJqb2luIiwidGVzdDMiLCJzcGxpdCIsImZvckVhY2giLCJsZXR0ZXIiLCJrZXlzIiwiZXJyIiwic2hvdWxkVXNlTmF0aXZlIiwidGFyZ2V0Iiwic291cmNlIiwiZnJvbSIsInN5bWJvbHMiLCJ0byIsImFyZ3VtZW50cyIsImciLCJNYXAiLCJiYXNlQXNzaWduVmFsdWUiLCJmdW5jIiwiZ2V0UHJvdG90eXBlIiwib3ZlckFyZyIsImdldFByb3RvdHlwZU9mIiwib2JqZWN0UHJvdG8iLCJDdG9yIiwiY29uc3RydWN0b3IiLCJiYXNlSXNBcmd1bWVudHMiLCJpc09iamVjdExpa2UiLCJpc0FyZ3VtZW50cyIsImlzQXJyYXkiLCJBcnJheSIsInN0dWJGYWxzZSIsImZyZWVFeHBvcnRzIiwibm9kZVR5cGUiLCJmcmVlTW9kdWxlIiwiQnVmZmVyIiwiaXNCdWZmZXIiLCJiYXNlSXNUeXBlZEFycmF5IiwiYmFzZVVuYXJ5Iiwibm9kZVV0aWwiLCJub2RlSXNUeXBlZEFycmF5IiwiaXNUeXBlZEFycmF5IiwiYXJyYXlMaWtlS2V5cyIsImJhc2VLZXlzSW4iLCJpc0FycmF5TGlrZSIsInJlSXNVaW50IiwidGVzdCIsImNoZWNrRENFIiwiX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwiY29uc29sZSIsInJlYWN0SXMiLCJSRUFDVF9TVEFUSUNTIiwiY2hpbGRDb250ZXh0VHlwZXMiLCJjb250ZXh0VHlwZSIsImNvbnRleHRUeXBlcyIsImRlZmF1bHRQcm9wcyIsImRpc3BsYXlOYW1lIiwiZ2V0RGVmYXVsdFByb3BzIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwibWl4aW5zIiwicHJvcFR5cGVzIiwiS05PV05fU1RBVElDUyIsImNhbGxlciIsImNhbGxlZSIsImFyaXR5IiwiTUVNT19TVEFUSUNTIiwiY29tcGFyZSIsIlRZUEVfU1RBVElDUyIsImdldFN0YXRpY3MiLCJjb21wb25lbnQiLCJpc01lbW8iLCJGb3J3YXJkUmVmIiwicmVuZGVyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwib2JqZWN0UHJvdG90eXBlIiwiaG9pc3ROb25SZWFjdFN0YXRpY3MiLCJ0YXJnZXRDb21wb25lbnQiLCJzb3VyY2VDb21wb25lbnQiLCJibGFja2xpc3QiLCJpbmhlcml0ZWRDb21wb25lbnQiLCJjb25jYXQiLCJ0YXJnZXRTdGF0aWNzIiwic291cmNlU3RhdGljcyIsImRlc2NyaXB0b3IiLCJzeW1ib2xPYnNlcnZhYmxlUG9ueWZpbGwiLCJvYnNlcnZhYmxlIiwiaXNhcnJheSIsInBhdGhUb1JlZ2V4cCIsInBhcnNlIiwiY29tcGlsZSIsInN0ciIsIm9wdGlvbnMiLCJ0b2tlbnNUb0Z1bmN0aW9uIiwidG9rZW5zVG9SZWdFeHAiLCJQQVRIX1JFR0VYUCIsIlJlZ0V4cCIsInJlcyIsInRva2VucyIsInBhdGgiLCJkZWZhdWx0RGVsaW1pdGVyIiwiZGVsaW1pdGVyIiwiZXhlYyIsImVzY2FwZWQiLCJvZmZzZXQiLCJzbGljZSIsIm5leHQiLCJwcmVmaXgiLCJjYXB0dXJlIiwiZ3JvdXAiLCJtb2RpZmllciIsImFzdGVyaXNrIiwicHVzaCIsInBhcnRpYWwiLCJyZXBlYXQiLCJvcHRpb25hbCIsInBhdHRlcm4iLCJlc2NhcGVHcm91cCIsImVzY2FwZVN0cmluZyIsInN1YnN0ciIsImVuY29kZVVSSUNvbXBvbmVudFByZXR0eSIsImVuY29kZVVSSSIsImNoYXJDb2RlQXQiLCJ0b1N0cmluZyIsInRvVXBwZXJDYXNlIiwibWF0Y2hlcyIsIm9iaiIsIm9wdHMiLCJlbmNvZGUiLCJwcmV0dHkiLCJlbmNvZGVVUklDb21wb25lbnQiLCJ0b2tlbiIsInNlZ21lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiaiIsImF0dGFjaEtleXMiLCJyZSIsImZsYWdzIiwic2Vuc2l0aXZlIiwic3RyaWN0IiwiZW5kIiwicm91dGUiLCJlbmRzV2l0aERlbGltaXRlciIsImdyb3VwcyIsIm1hdGNoIiwicmVnZXhwVG9SZWdleHAiLCJwYXJ0cyIsImFycmF5VG9SZWdleHAiLCJzdHJpbmdUb1JlZ2V4cCIsImgiLCJmb3IiLCJxIiwidSIsInYiLCJ3IiwieCIsInkiLCJ6IiwiYWEiLCJBIiwiaXRlcmF0b3IiLCJCIiwiQyIsImlzTW91bnRlZCIsImVucXVldWVGb3JjZVVwZGF0ZSIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJlbnF1ZXVlU2V0U3RhdGUiLCJEIiwiRSIsInByb3BzIiwiY29udGV4dCIsInJlZnMiLCJ1cGRhdGVyIiwiRiIsIkciLCJpc1JlYWN0Q29tcG9uZW50Iiwic2V0U3RhdGUiLCJmb3JjZVVwZGF0ZSIsIkgiLCJpc1B1cmVSZWFjdENvbXBvbmVudCIsIkkiLCJjdXJyZW50IiwiSiIsIksiLCJMIiwicmVmIiwiX19zZWxmIiwiX19zb3VyY2UiLCJNIiwiayIsIiQkdHlwZW9mIiwiX293bmVyIiwiTiIsIk8iLCJQIiwiUSIsInBvcCIsImtleVByZWZpeCIsImNvdW50IiwiUiIsIlUiLCJTIiwiVCIsImRvbmUiLCJlc2NhcGUiLCJjYSIsImRhIiwiViIsImJhIiwiVyIsIlgiLCJDaGlsZHJlbiIsInRvQXJyYXkiLCJvbmx5IiwiY3JlYXRlUmVmIiwiQ29tcG9uZW50IiwiUHVyZUNvbXBvbmVudCIsImNyZWF0ZUNvbnRleHQiLCJfY2FsY3VsYXRlQ2hhbmdlZEJpdHMiLCJfY3VycmVudFZhbHVlIiwiX2N1cnJlbnRWYWx1ZTIiLCJfdGhyZWFkQ291bnQiLCJQcm92aWRlciIsIkNvbnN1bWVyIiwiX2NvbnRleHQiLCJmb3J3YXJkUmVmIiwibGF6eSIsIl9jdG9yIiwiX3N0YXR1cyIsIl9yZXN1bHQiLCJtZW1vIiwidXNlQ2FsbGJhY2siLCJ1c2VDb250ZXh0IiwidXNlRWZmZWN0IiwidXNlSW1wZXJhdGl2ZUhhbmRsZSIsInVzZURlYnVnVmFsdWUiLCJ1c2VMYXlvdXRFZmZlY3QiLCJ1c2VNZW1vIiwidXNlUmVkdWNlciIsInVzZVJlZiIsInVzZVN0YXRlIiwiRnJhZ21lbnQiLCJQcm9maWxlciIsIlN0cmljdE1vZGUiLCJTdXNwZW5zZSIsImNyZWF0ZUVsZW1lbnQiLCJjbG9uZUVsZW1lbnQiLCJjcmVhdGVGYWN0b3J5IiwiaXNWYWxpZEVsZW1lbnQiLCJ2ZXJzaW9uIiwiX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQiLCJSZWFjdEN1cnJlbnREaXNwYXRjaGVyIiwiUmVhY3RDdXJyZW50QmF0Y2hDb25maWciLCJzdXNwZW5zZSIsIlJlYWN0Q3VycmVudE93bmVyIiwiSXNTb21lUmVuZGVyZXJBY3RpbmciLCJZIiwiZGVmYXVsdCIsIloiLCJpbmRleE9mIiwiZWEiLCJleHRyYWN0RXZlbnRzIiwiZXZlbnRUeXBlcyIsImZhIiwicGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMiLCJoYSIsInJlZ2lzdHJhdGlvbk5hbWUiLCJpYSIsImphIiwiZGVwZW5kZW5jaWVzIiwia2EiLCJhcHBseSIsIm9uRXJyb3IiLCJsYSIsIm1hIiwibmEiLCJvYSIsInBhIiwicWEiLCJzYSIsInVhIiwidmEiLCJ3YSIsImN1cnJlbnRUYXJnZXQiLCJyYSIsInhhIiwieWEiLCJ6YSIsIkFhIiwiX2Rpc3BhdGNoTGlzdGVuZXJzIiwiX2Rpc3BhdGNoSW5zdGFuY2VzIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJpc1BlcnNpc3RlbnQiLCJyZWxlYXNlIiwiQmEiLCJDYSIsImluamVjdEV2ZW50UGx1Z2luT3JkZXIiLCJpbmplY3RFdmVudFBsdWdpbnNCeU5hbWUiLCJEYSIsInN0YXRlTm9kZSIsImRpc2FibGVkIiwiRWEiLCJGYSIsIkdhIiwiSGEiLCJJYSIsIkphIiwiS2EiLCJMYSIsIk1hIiwiTmEiLCJPYSIsIlBhIiwiUWEiLCJSYSIsIlNhIiwiVGEiLCJVYSIsIldhIiwiWGEiLCJfZGVidWdPd25lciIsIl9kZWJ1Z1NvdXJjZSIsImZpbGVOYW1lIiwibGluZU51bWJlciIsInJldHVybiIsIllhIiwiZG9jdW1lbnQiLCJaYSIsIiRhIiwiYWIiLCJiYiIsImNiIiwiZGIiLCJlYiIsImZiIiwiZ2IiLCJoYiIsImliIiwiamIiLCJrYiIsImxiIiwibWIiLCJuYiIsIm9iIiwiYWNjZXB0c0Jvb2xlYW5zIiwiYXR0cmlidXRlTmFtZSIsImF0dHJpYnV0ZU5hbWVzcGFjZSIsIm11c3RVc2VQcm9wZXJ0eSIsInByb3BlcnR5TmFtZSIsInNhbml0aXplVVJMIiwidG9Mb3dlckNhc2UiLCJzYiIsInRiIiwidWIiLCJ2YiIsInFiIiwiaXNOYU4iLCJyYiIsInBiIiwicmVtb3ZlQXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwic2V0QXR0cmlidXRlTlMiLCJ3YiIsIm5vZGVOYW1lIiwieWIiLCJfdmFsdWVUcmFja2VyIiwiY29uZmlndXJhYmxlIiwic2V0VmFsdWUiLCJzdG9wVHJhY2tpbmciLCJ4YiIsInpiIiwiY2hlY2tlZCIsIkFiIiwiZGVmYXVsdENoZWNrZWQiLCJkZWZhdWx0VmFsdWUiLCJfd3JhcHBlclN0YXRlIiwiaW5pdGlhbENoZWNrZWQiLCJCYiIsImluaXRpYWxWYWx1ZSIsImNvbnRyb2xsZWQiLCJDYiIsIkViIiwiRmIiLCJHYiIsIm93bmVyRG9jdW1lbnQiLCJhY3RpdmVFbGVtZW50IiwiSWIiLCJIYiIsIkpiIiwic2VsZWN0ZWQiLCJkZWZhdWx0U2VsZWN0ZWQiLCJLYiIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiTGIiLCJNYiIsIk5iIiwidGV4dENvbnRlbnQiLCJ4bGlua0hyZWYiLCJPYiIsIlBiIiwiUWIiLCJSYiIsIlNiIiwiTVNBcHAiLCJleGVjVW5zYWZlTG9jYWxGdW5jdGlvbiIsIm5hbWVzcGFjZVVSSSIsImlubmVySFRNTCIsInZhbHVlT2YiLCJmaXJzdENoaWxkIiwicmVtb3ZlQ2hpbGQiLCJhcHBlbmRDaGlsZCIsIlRiIiwibGFzdENoaWxkIiwibm9kZVZhbHVlIiwiVWIiLCJWYiIsImFuaW1hdGlvbmVuZCIsImFuaW1hdGlvbml0ZXJhdGlvbiIsImFuaW1hdGlvbnN0YXJ0IiwidHJhbnNpdGlvbmVuZCIsIldiIiwiWGIiLCJZYiIsInN0eWxlIiwiYW5pbWF0aW9uIiwidHJhbnNpdGlvbiIsIlpiIiwiJGIiLCJhYyIsImJjIiwiY2MiLCJlYyIsImFsdGVybmF0ZSIsImVmZmVjdFRhZyIsImZjIiwibWVtb2l6ZWRTdGF0ZSIsImRlaHlkcmF0ZWQiLCJnYyIsImljIiwiY2hpbGQiLCJzaWJsaW5nIiwiaGMiLCJqYyIsImtjIiwibGMiLCJtYyIsIm5jIiwib2MiLCJwYyIsInFjIiwicmMiLCJzYyIsInRjIiwidWMiLCJ2YyIsInpjIiwiYmxvY2tlZE9uIiwidG9wTGV2ZWxUeXBlIiwiZXZlbnRTeXN0ZW1GbGFncyIsIm5hdGl2ZUV2ZW50IiwiQWMiLCJkZWxldGUiLCJwb2ludGVySWQiLCJCYyIsIkNjIiwiRWMiLCJGYyIsInVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSIsInByaW9yaXR5IiwiaHlkcmF0ZSIsImNvbnRhaW5lckluZm8iLCJHYyIsIkhjIiwiSWMiLCJKYyIsInNoaWZ0IiwiS2MiLCJ1bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrIiwidW5zdGFibGVfTm9ybWFsUHJpb3JpdHkiLCJMYyIsIk1jIiwic3JjRWxlbWVudCIsImNvcnJlc3BvbmRpbmdVc2VFbGVtZW50IiwicGFyZW50Tm9kZSIsIk5jIiwiT2MiLCJkaXNwYXRjaENvbmZpZyIsIlBjIiwiX3RhcmdldEluc3QiLCJRYyIsIlJjIiwiU2MiLCJUYyIsIlVjIiwiSW50ZXJmYWNlIiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInJldHVyblZhbHVlIiwiV2MiLCJldmVudFBvb2wiLCJYYyIsImRlc3RydWN0b3IiLCJWYyIsImdldFBvb2xlZCIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwiY2FuY2VsQnViYmxlIiwicGVyc2lzdCIsImV2ZW50UGhhc2UiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsInRpbWVTdGFtcCIsIkRhdGUiLCJub3ciLCJpc1RydXN0ZWQiLCJleHRlbmQiLCJZYyIsImFuaW1hdGlvbk5hbWUiLCJlbGFwc2VkVGltZSIsInBzZXVkb0VsZW1lbnQiLCJaYyIsImNsaXBib2FyZERhdGEiLCIkYyIsInZpZXciLCJkZXRhaWwiLCJhZCIsInJlbGF0ZWRUYXJnZXQiLCJiZCIsImtleUNvZGUiLCJjaGFyQ29kZSIsImNkIiwiRXNjIiwiU3BhY2ViYXIiLCJMZWZ0IiwiVXAiLCJSaWdodCIsIkRvd24iLCJEZWwiLCJXaW4iLCJNZW51IiwiQXBwcyIsIlNjcm9sbCIsIk1velByaW50YWJsZUtleSIsImRkIiwiOCIsIjkiLCIxMiIsIjEzIiwiMTYiLCIxNyIsIjE4IiwiMTkiLCIyMCIsIjI3IiwiMzIiLCIzMyIsIjM0IiwiMzUiLCIzNiIsIjM3IiwiMzgiLCIzOSIsIjQwIiwiNDUiLCI0NiIsIjExMiIsIjExMyIsIjExNCIsIjExNSIsIjExNiIsIjExNyIsIjExOCIsIjExOSIsIjEyMCIsIjEyMSIsIjEyMiIsIjEyMyIsIjE0NCIsIjE0NSIsIjIyNCIsImVkIiwiQWx0IiwiQ29udHJvbCIsIk1ldGEiLCJTaGlmdCIsImdkIiwiZ2V0TW9kaWZpZXJTdGF0ZSIsImhkIiwiaWQiLCJsb2NhdGlvbiIsImN0cmxLZXkiLCJzaGlmdEtleSIsImFsdEtleSIsIm1ldGFLZXkiLCJsb2NhbGUiLCJ3aGljaCIsImpkIiwia2QiLCJsZCIsIm1kIiwibmQiLCJzY3JlZW5YIiwic2NyZWVuWSIsImNsaWVudFgiLCJjbGllbnRZIiwicGFnZVgiLCJwYWdlWSIsImJ1dHRvbiIsImJ1dHRvbnMiLCJmcm9tRWxlbWVudCIsInRvRWxlbWVudCIsIm1vdmVtZW50WCIsIm1vdmVtZW50WSIsIm9kIiwid2lkdGgiLCJoZWlnaHQiLCJwcmVzc3VyZSIsInRhbmdlbnRpYWxQcmVzc3VyZSIsInRpbHRYIiwidGlsdFkiLCJ0d2lzdCIsInBvaW50ZXJUeXBlIiwiaXNQcmltYXJ5IiwicGQiLCJkYXRhVHJhbnNmZXIiLCJxZCIsInRvdWNoZXMiLCJ0YXJnZXRUb3VjaGVzIiwiY2hhbmdlZFRvdWNoZXMiLCJyZCIsInNkIiwiZGVsdGFYIiwid2hlZWxEZWx0YVgiLCJkZWx0YVkiLCJ3aGVlbERlbHRhWSIsIndoZWVsRGVsdGEiLCJkZWx0YVoiLCJkZWx0YU1vZGUiLCJ0ZCIsInVkIiwidmQiLCJ3ZCIsInlkIiwiemQiLCJBZCIsIkJkIiwiQ2QiLCJEZCIsImJ1YmJsZWQiLCJjYXB0dXJlZCIsImV2ZW50UHJpb3JpdHkiLCJFZCIsImdldEV2ZW50UHJpb3JpdHkiLCJGZCIsInVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5IiwiR2QiLCJIZCIsIkpkIiwiS2QiLCJ0YXJnZXRJbnN0IiwiYW5jZXN0b3JzIiwiTGQiLCJNZCIsIk5kIiwiT2QiLCJQZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJRZCIsIkRjIiwiUmQiLCJTZCIsIldlYWtNYXAiLCJ4YyIsIlNldCIsInljIiwiYWRkIiwiVGQiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImJvcmRlckltYWdlT3V0c2V0IiwiYm9yZGVySW1hZ2VTbGljZSIsImJvcmRlckltYWdlV2lkdGgiLCJib3hGbGV4IiwiYm94RmxleEdyb3VwIiwiYm94T3JkaW5hbEdyb3VwIiwiY29sdW1uQ291bnQiLCJjb2x1bW5zIiwiZmxleCIsImZsZXhHcm93IiwiZmxleFBvc2l0aXZlIiwiZmxleFNocmluayIsImZsZXhOZWdhdGl2ZSIsImZsZXhPcmRlciIsImdyaWRBcmVhIiwiZ3JpZFJvdyIsImdyaWRSb3dFbmQiLCJncmlkUm93U3BhbiIsImdyaWRSb3dTdGFydCIsImdyaWRDb2x1bW4iLCJncmlkQ29sdW1uRW5kIiwiZ3JpZENvbHVtblNwYW4iLCJncmlkQ29sdW1uU3RhcnQiLCJmb250V2VpZ2h0IiwibGluZUNsYW1wIiwibGluZUhlaWdodCIsIm9wYWNpdHkiLCJvcmRlciIsIm9ycGhhbnMiLCJ0YWJTaXplIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsImZpbGxPcGFjaXR5IiwiZmxvb2RPcGFjaXR5Iiwic3RvcE9wYWNpdHkiLCJzdHJva2VEYXNoYXJyYXkiLCJzdHJva2VEYXNob2Zmc2V0Iiwic3Ryb2tlTWl0ZXJsaW1pdCIsInN0cm9rZU9wYWNpdHkiLCJzdHJva2VXaWR0aCIsIlVkIiwiVmQiLCJ0cmltIiwiV2QiLCJzZXRQcm9wZXJ0eSIsImNoYXJBdCIsInN1YnN0cmluZyIsIlhkIiwibWVudWl0ZW0iLCJhcmVhIiwiYmFzZSIsImJyIiwiY29sIiwiZW1iZWQiLCJociIsImltZyIsImlucHV0Iiwia2V5Z2VuIiwibGluayIsIm1ldGEiLCJwYXJhbSIsInRyYWNrIiwid2JyIiwiWWQiLCJaZCIsImlzIiwiJGQiLCJhZSIsImJlIiwiYm9keSIsImNlIiwiZGUiLCJub2RlIiwibmV4dFNpYmxpbmciLCJmZSIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudFdpbmRvdyIsImhyZWYiLCJnZSIsImNvbnRlbnRFZGl0YWJsZSIsImxlIiwibWUiLCJuZSIsImF1dG9Gb2N1cyIsIm9lIiwiX19odG1sIiwicGUiLCJzZXRUaW1lb3V0IiwicWUiLCJjbGVhclRpbWVvdXQiLCJzZSIsInByZXZpb3VzU2libGluZyIsInRlIiwiTWF0aCIsInJhbmRvbSIsInVlIiwidmUiLCJ3ZSIsInhlIiwieWUiLCJ6ZSIsIkFlIiwiQmUiLCJDZSIsIkRlIiwiRWUiLCJGZSIsIkdlIiwiSGUiLCJkb2N1bWVudE1vZGUiLCJJZSIsIkplIiwiS2UiLCJMZSIsImJlZm9yZUlucHV0IiwiY29tcG9zaXRpb25FbmQiLCJjb21wb3NpdGlvblN0YXJ0IiwiY29tcG9zaXRpb25VcGRhdGUiLCJNZSIsIk5lIiwiT2UiLCJQZSIsIlNlIiwiUWUiLCJjaGFyIiwiUmUiLCJUZSIsImNvbG9yIiwiZGF0ZSIsImRhdGV0aW1lIiwiZW1haWwiLCJtb250aCIsIm51bWJlciIsInBhc3N3b3JkIiwicmFuZ2UiLCJzZWFyY2giLCJ0ZWwiLCJ0ZXh0IiwidGltZSIsInVybCIsIndlZWsiLCJVZSIsIlZlIiwiY2hhbmdlIiwiV2UiLCJYZSIsIlllIiwiWmUiLCIkZSIsImFmIiwiYmYiLCJjZiIsImRldGFjaEV2ZW50IiwiZGYiLCJlZiIsImF0dGFjaEV2ZW50IiwiZmYiLCJnZiIsImhmIiwibGYiLCJqZiIsIl9pc0lucHV0RXZlbnRTdXBwb3J0ZWQiLCJrZiIsIm1vdXNlRW50ZXIiLCJtb3VzZUxlYXZlIiwicG9pbnRlckVudGVyIiwicG9pbnRlckxlYXZlIiwibWYiLCJkZWZhdWx0VmlldyIsInBhcmVudFdpbmRvdyIsIm9mIiwicGYiLCJxZiIsInJmIiwic2YiLCJzZWxlY3QiLCJ0ZiIsInVmIiwidmYiLCJ3ZiIsInhmIiwic3RhcnQiLCJzZWxlY3Rpb25TdGFydCIsInNlbGVjdGlvbkVuZCIsImFuY2hvck5vZGUiLCJnZXRTZWxlY3Rpb24iLCJhbmNob3JPZmZzZXQiLCJmb2N1c05vZGUiLCJmb2N1c09mZnNldCIsInlmIiwib25TZWxlY3QiLCJTaW1wbGVFdmVudFBsdWdpbiIsIkVudGVyTGVhdmVFdmVudFBsdWdpbiIsIkNoYW5nZUV2ZW50UGx1Z2luIiwiU2VsZWN0RXZlbnRQbHVnaW4iLCJCZWZvcmVJbnB1dEV2ZW50UGx1Z2luIiwiQWYiLCJCZiIsIkNmIiwiRGYiLCJFZiIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dCIsIkZmIiwiR2YiLCJIZiIsIklmIiwiZ2V0Q2hpbGRDb250ZXh0IiwiSmYiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dCIsIktmIiwiTGYiLCJNZiIsIk5mIiwidW5zdGFibGVfY2FuY2VsQ2FsbGJhY2siLCJPZiIsInVuc3RhYmxlX3Nob3VsZFlpZWxkIiwiUGYiLCJ1bnN0YWJsZV9yZXF1ZXN0UGFpbnQiLCJRZiIsInVuc3RhYmxlX25vdyIsIlJmIiwidW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwiLCJTZiIsInVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5IiwiVGYiLCJVZiIsIlZmIiwidW5zdGFibGVfTG93UHJpb3JpdHkiLCJXZiIsInVuc3RhYmxlX0lkbGVQcmlvcml0eSIsIlhmIiwiWWYiLCJaZiIsIiRmIiwiYWciLCJiZyIsImNnIiwiZGciLCJlZyIsImZnIiwiZ2ciLCJoZyIsImlnIiwiamciLCJrZyIsImxnIiwibWciLCJuZyIsIm9nIiwicGciLCJxZyIsInJnIiwic2ciLCJ0ZyIsInVnIiwiY2hpbGRFeHBpcmF0aW9uVGltZSIsInZnIiwiZmlyc3RDb250ZXh0IiwiZXhwaXJhdGlvblRpbWUiLCJ3ZyIsInhnIiwib2JzZXJ2ZWRCaXRzIiwicmVzcG9uZGVycyIsInlnIiwiemciLCJiYXNlU3RhdGUiLCJmaXJzdFVwZGF0ZSIsImxhc3RVcGRhdGUiLCJmaXJzdENhcHR1cmVkVXBkYXRlIiwibGFzdENhcHR1cmVkVXBkYXRlIiwiZmlyc3RFZmZlY3QiLCJsYXN0RWZmZWN0IiwiZmlyc3RDYXB0dXJlZEVmZmVjdCIsImxhc3RDYXB0dXJlZEVmZmVjdCIsIkFnIiwiQmciLCJzdXNwZW5zZUNvbmZpZyIsInBheWxvYWQiLCJjYWxsYmFjayIsIm5leHRFZmZlY3QiLCJDZyIsIkRnIiwidXBkYXRlUXVldWUiLCJFZyIsIkZnIiwiR2ciLCJIZyIsIklnIiwiSmciLCJLZyIsIkxnIiwiTWciLCJOZyIsIk9nIiwiU2ciLCJfcmVhY3RJbnRlcm5hbEZpYmVyIiwiUGciLCJRZyIsIlJnIiwiVGciLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJVZyIsInN0YXRlIiwiVmciLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJXZyIsImdldFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudERpZE1vdW50IiwiWGciLCJZZyIsIl9zdHJpbmdSZWYiLCJaZyIsIiRnIiwiYWgiLCJiaCIsImVsZW1lbnRUeXBlIiwiY2giLCJpbXBsZW1lbnRhdGlvbiIsImRoIiwiZWgiLCJ0YSIsImZoIiwiZ2giLCJoaCIsImloIiwiamgiLCJraCIsImxoIiwibWgiLCJkb2N1bWVudEVsZW1lbnQiLCJ0YWdOYW1lIiwibmgiLCJvaCIsInBoIiwicWgiLCJtZW1vaXplZFByb3BzIiwicmV2ZWFsT3JkZXIiLCJyaCIsInJlc3BvbmRlciIsInNoIiwidGgiLCJ1aCIsInZoIiwid2giLCJ4aCIsInloIiwiemgiLCJBaCIsIkJoIiwiQ2giLCJHaCIsIkhoIiwiSWgiLCJKaCIsIktoIiwiTGgiLCJNaCIsIk5oIiwicXVldWUiLCJiYXNlVXBkYXRlIiwiT2giLCJQaCIsIlFoIiwibGFzdFJlbmRlcmVkUmVkdWNlciIsImRpc3BhdGNoIiwiYWN0aW9uIiwibGFzdCIsImxhc3RSZW5kZXJlZFN0YXRlIiwiZWFnZXJSZWR1Y2VyIiwiZWFnZXJTdGF0ZSIsIlJoIiwiU2giLCJUaCIsIlVoIiwiZGVzdHJveSIsImRlcHMiLCJWaCIsIldoIiwiWGgiLCJZaCIsIlpoIiwiJGgiLCJhaSIsImJpIiwicmVhZENvbnRleHQiLCJ1c2VSZXNwb25kZXIiLCJ1c2VEZWZlcnJlZFZhbHVlIiwidXNlVHJhbnNpdGlvbiIsInVuc3RhYmxlX25leHQiLCJjaSIsImRpIiwiZWkiLCJmaSIsImdpIiwiaGkiLCJwZW5kaW5nUHJvcHMiLCJpaSIsImppIiwia2kiLCJsaSIsIm1pIiwibmkiLCJvaSIsInBpIiwicWkiLCJyaSIsInNpIiwidGkiLCJ1aSIsIlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudERpZFVwZGF0ZSIsInZpIiwid2kiLCJwZW5kaW5nQ29udGV4dCIsIkhpIiwiSmkiLCJLaSIsInhpIiwicmV0cnlUaW1lIiwieWkiLCJmYWxsYmFjayIsInVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrIiwiemkiLCJBaSIsImlzQmFja3dhcmRzIiwicmVuZGVyaW5nIiwidGFpbCIsInRhaWxFeHBpcmF0aW9uIiwidGFpbE1vZGUiLCJCaSIsIkNpIiwiTGkiLCJNaSIsIk5pIiwic3RhY2siLCJvbkNsaWNrIiwib25jbGljayIsIk9pIiwiV2Vha1NldCIsIlBpIiwiU2kiLCJSaSIsIlRpIiwiVWkiLCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIlZpIiwiV2kiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsIlFpIiwiWGkiLCJZaSIsIlppIiwiJGkiLCJpbnN0YW5jZSIsImluc2VydEJlZm9yZSIsIl9yZWFjdFJvb3RDb250YWluZXIiLCJhaiIsIndhc011bHRpcGxlIiwibXVsdGlwbGUiLCJiaiIsImRpc3BsYXkiLCJjaiIsImRqIiwidGhlbiIsImVqIiwiZmoiLCJlbGVtZW50IiwiZ2oiLCJoaiIsImlqIiwiY29tcG9uZW50RGlkQ2F0Y2giLCJqaiIsImNvbXBvbmVudFN0YWNrIiwiZ2siLCJraiIsImNlaWwiLCJsaiIsIm1qIiwid2oiLCJ4aiIsInlqIiwiemoiLCJBaiIsIkJqIiwiRGoiLCJFaiIsIkZqIiwiR2oiLCJIaiIsIklqIiwiSmoiLCJ0aW1lb3V0TXMiLCJLaiIsIkxqIiwiTWoiLCJOaiIsIk9qIiwibGFzdEV4cGlyZWRUaW1lIiwiUGoiLCJmaXJzdFBlbmRpbmdUaW1lIiwibGFzdFBpbmdlZFRpbWUiLCJuZXh0S25vd25QZW5kaW5nTGV2ZWwiLCJjYWxsYmFja0V4cGlyYXRpb25UaW1lIiwiY2FsbGJhY2tQcmlvcml0eSIsImNhbGxiYWNrTm9kZSIsIlFqIiwidGltZW91dCIsIlJqIiwiU2oiLCJUaiIsIlVqIiwiVmoiLCJXaiIsImZpbmlzaGVkV29yayIsImZpbmlzaGVkRXhwaXJhdGlvblRpbWUiLCJsYXN0U3VzcGVuZGVkVGltZSIsIlhqIiwidGltZW91dEhhbmRsZSIsIllqIiwiYnVzeU1pbkR1cmF0aW9uTXMiLCJidXN5RGVsYXlNcyIsIlpqIiwiYmsiLCJjayIsInBpbmdDYWNoZSIsImRrIiwiZWsiLCJmayIsInNpemUiLCJjcmVhdGVFbGVtZW50TlMiLCJjcmVhdGVUZXh0Tm9kZSIsImlrIiwiZmlyc3RTdXNwZW5kZWRUaW1lIiwicmFuZ2VDb3VudCIsIkRiIiwiZm9jdXNlZEVsZW0iLCJzZWxlY3Rpb25SYW5nZSIsImprIiwiZWUiLCJjb250YWlucyIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwibWluIiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0RW5kIiwibGVmdCIsInNjcm9sbExlZnQiLCJ0b3AiLCJzY3JvbGxUb3AiLCJmb2N1cyIsIkRoIiwiZGMiLCJmZCIsImhrIiwiRWgiLCJGaCIsInhrIiwiRGkiLCJFaSIsIkZpIiwieGQiLCJHaSIsImtrIiwibGsiLCJtayIsImhpZGRlbiIsIlZhIiwibmsiLCJ1bnN0YWJsZV9vYnNlcnZlZEJpdHMiLCJwayIsInBlbmRpbmdDaGlsZHJlbiIsInFrIiwicmsiLCJzayIsInRrIiwidWsiLCJ2ayIsIndjIiwiX2ludGVybmFsUm9vdCIsIndrIiwiemsiLCJoYXNBdHRyaWJ1dGUiLCJ5ayIsIkFrIiwiQmsiLCJ1bm1vdW50IiwicXVlcnlTZWxlY3RvckFsbCIsImZvcm0iLCJhayIsIkNrIiwiY3JlYXRlUG9ydGFsIiwiZmluZERPTU5vZGUiLCJ1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciIsInVubW91bnRDb21wb25lbnRBdE5vZGUiLCJ1bnN0YWJsZV9jcmVhdGVQb3J0YWwiLCJ1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyIsImZsdXNoU3luYyIsIkV2ZW50cyIsImZpbmRGaWJlckJ5SG9zdEluc3RhbmNlIiwiYnVuZGxlVHlwZSIsInJlbmRlcmVyUGFja2FnZU5hbWUiLCJpc0Rpc2FibGVkIiwic3VwcG9ydHNGaWJlciIsImluamVjdCIsIm9uQ29tbWl0RmliZXJSb290Iiwib25Db21taXRGaWJlclVubW91bnQiLCJvayIsIm92ZXJyaWRlSG9va1N0YXRlIiwib3ZlcnJpZGVQcm9wcyIsInNldFN1c3BlbnNlSGFuZGxlciIsInNjaGVkdWxlVXBkYXRlIiwiY3VycmVudERpc3BhdGNoZXJSZWYiLCJmaW5kSG9zdEluc3RhbmNlQnlGaWJlciIsImZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaCIsInNjaGVkdWxlUmVmcmVzaCIsInNjaGVkdWxlUm9vdCIsInNldFJlZnJlc2hIYW5kbGVyIiwiZ2V0Q3VycmVudEZpYmVyIiwiRGsiLCJFayIsIk1lc3NhZ2VDaGFubmVsIiwidW5zdGFibGVfZm9yY2VGcmFtZVJhdGUiLCJwZXJmb3JtYW5jZSIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiZmxvb3IiLCJwb3J0MiIsInBvcnQxIiwib25tZXNzYWdlIiwicG9zdE1lc3NhZ2UiLCJzb3J0SW5kZXgiLCJzdGFydFRpbWUiLCJwcmlvcml0eUxldmVsIiwiZGVsYXkiLCJ1bnN0YWJsZV93cmFwQ2FsbGJhY2siLCJ1bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbiIsInVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uIiwidW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGUiLCJ1bnN0YWJsZV9Qcm9maWxpbmciLCJSZWFjdFByb3BUeXBlc1NlY3JldCIsImVtcHR5RnVuY3Rpb24iLCJlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0IiwicmVzZXRXYXJuaW5nQ2FjaGUiLCJzaGltIiwicHJvcE5hbWUiLCJjb21wb25lbnROYW1lIiwicHJvcEZ1bGxOYW1lIiwic2VjcmV0IiwiZ2V0U2hpbSIsImlzUmVxdWlyZWQiLCJSZWFjdFByb3BUeXBlcyIsImJvb2wiLCJzdHJpbmciLCJzeW1ib2wiLCJhbnkiLCJhcnJheU9mIiwiaW5zdGFuY2VPZiIsIm9iamVjdE9mIiwib25lT2YiLCJvbmVPZlR5cGUiLCJzaGFwZSIsImV4YWN0IiwiY2hlY2tQcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJ0eXBlT2YiLCJBc3luY01vZGUiLCJDb25jdXJyZW50TW9kZSIsIkNvbnRleHRDb25zdW1lciIsIkNvbnRleHRQcm92aWRlciIsIkVsZW1lbnQiLCJMYXp5IiwiTWVtbyIsIlBvcnRhbCIsImlzVmFsaWRFbGVtZW50VHlwZSIsImlzQXN5bmNNb2RlIiwiaXNDb25jdXJyZW50TW9kZSIsImlzQ29udGV4dENvbnN1bWVyIiwiaXNDb250ZXh0UHJvdmlkZXIiLCJpc0VsZW1lbnQiLCJpc0ZvcndhcmRSZWYiLCJpc0ZyYWdtZW50IiwiaXNMYXp5IiwiaXNQb3J0YWwiLCJpc1Byb2ZpbGVyIiwiaXNTdHJpY3RNb2RlIiwiaXNTdXNwZW5zZSIsIm9yaWdpbmFsTW9kdWxlIiwiYXJyIiwiYmFzZU1lcmdlIiwibWVyZ2UiLCJjcmVhdGVBc3NpZ25lciIsInNyY0luZGV4IiwiU3RhY2siLCJhc3NpZ25NZXJnZVZhbHVlIiwiYmFzZUZvciIsImJhc2VNZXJnZURlZXAiLCJrZXlzSW4iLCJzYWZlR2V0IiwiY3VzdG9taXplciIsInNyY1ZhbHVlIiwibmV3VmFsdWUiLCJzdGFja0NsZWFyIiwic3RhY2tEZWxldGUiLCJzdGFja0dldCIsInN0YWNrSGFzIiwic3RhY2tTZXQiLCJhc3NvY0luZGV4T2YiLCJzcGxpY2UiLCJNYXBDYWNoZSIsInBhaXJzIiwiTEFSR0VfQVJSQVlfU0laRSIsImlzTWFza2VkIiwidG9Tb3VyY2UiLCJyZUlzSG9zdEN0b3IiLCJmdW5jUHJvdG8iLCJmdW5jVG9TdHJpbmciLCJyZUlzTmF0aXZlIiwibmF0aXZlT2JqZWN0VG9TdHJpbmciLCJpc093biIsInVubWFza2VkIiwidWlkIiwiY29yZUpzRGF0YSIsIm1hc2tTcmNLZXkiLCJJRV9QUk9UTyIsIm1hcENhY2hlQ2xlYXIiLCJtYXBDYWNoZURlbGV0ZSIsIm1hcENhY2hlR2V0IiwibWFwQ2FjaGVIYXMiLCJtYXBDYWNoZVNldCIsIkhhc2giLCJoYXNoQ2xlYXIiLCJoYXNoRGVsZXRlIiwiaGFzaEdldCIsImhhc2hIYXMiLCJoYXNoU2V0IiwiZ2V0TWFwRGF0YSIsImNyZWF0ZUJhc2VGb3IiLCJmcm9tUmlnaHQiLCJpdGVyYXRlZSIsImtleXNGdW5jIiwiaXRlcmFibGUiLCJjbG9uZUJ1ZmZlciIsImNsb25lVHlwZWRBcnJheSIsImNvcHlBcnJheSIsImluaXRDbG9uZU9iamVjdCIsImlzQXJyYXlMaWtlT2JqZWN0IiwiaXNQbGFpbk9iamVjdCIsInRvUGxhaW5PYmplY3QiLCJtZXJnZUZ1bmMiLCJvYmpWYWx1ZSIsInN0YWNrZWQiLCJpc0NvbW1vbiIsImlzQXJyIiwiaXNCdWZmIiwiaXNUeXBlZCIsImFsbG9jVW5zYWZlIiwiYnVmZmVyIiwiaXNEZWVwIiwiY29weSIsImNsb25lQXJyYXlCdWZmZXIiLCJ0eXBlZEFycmF5IiwiYnl0ZU9mZnNldCIsIlVpbnQ4QXJyYXkiLCJhcnJheUJ1ZmZlciIsImJ5dGVMZW5ndGgiLCJiYXNlQ3JlYXRlIiwiaXNQcm90b3R5cGUiLCJvYmplY3RDcmVhdGUiLCJwcm90byIsInRyYW5zZm9ybSIsImFyZyIsIm9iamVjdEN0b3JTdHJpbmciLCJ0eXBlZEFycmF5VGFncyIsImZyZWVQcm9jZXNzIiwicHJvY2VzcyIsInR5cGVzIiwicmVxdWlyZSIsImJpbmRpbmciLCJjb3B5T2JqZWN0IiwiYXNzaWduVmFsdWUiLCJpc05ldyIsImJhc2VUaW1lcyIsImlzSW5kZXgiLCJpbmhlcml0ZWQiLCJpc0FyZyIsImlzVHlwZSIsInNraXBJbmRleGVzIiwibmF0aXZlS2V5c0luIiwiaXNQcm90byIsImJhc2VSZXN0IiwiaXNJdGVyYXRlZUNhbGwiLCJhc3NpZ25lciIsInNvdXJjZXMiLCJndWFyZCIsImlkZW50aXR5Iiwib3ZlclJlc3QiLCJzZXRUb1N0cmluZyIsIm5hdGl2ZU1heCIsIm1heCIsIm90aGVyQXJncyIsInRoaXNBcmciLCJiYXNlU2V0VG9TdHJpbmciLCJzaG9ydE91dCIsImNvbnN0YW50IiwibmF0aXZlTm93IiwibGFzdENhbGxlZCIsInN0YW1wIiwicmVtYWluaW5nIiwiX2luaGVyaXRzTG9vc2UiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJfX3Byb3RvX18iLCJzdWJzY3JpcHRpb25TaGFwZSIsInRyeVN1YnNjcmliZSIsInRyeVVuc3Vic2NyaWJlIiwibm90aWZ5TmVzdGVkU3VicyIsImlzU3Vic2NyaWJlZCIsInN0b3JlU2hhcGUiLCJzdWJzY3JpYmUiLCJnZXRTdGF0ZSIsInN0b3JlS2V5IiwiX1Byb3ZpZGVyJGNoaWxkQ29udGV4Iiwic3Vic2NyaXB0aW9uS2V5IiwiX0NvbXBvbmVudCIsIl9wcm90byIsIl90aGlzIiwic3RvcmUiLCJfcmVmIiwiX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsIlJlZmVyZW5jZUVycm9yIiwiX2V4dGVuZHMiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSIsImV4Y2x1ZGVkIiwic291cmNlS2V5cyIsIm51bGxMaXN0ZW5lcnMiLCJub3RpZnkiLCJTdWJzY3JpcHRpb24iLCJwYXJlbnRTdWIiLCJvblN0YXRlQ2hhbmdlIiwidW5zdWJzY3JpYmUiLCJsaXN0ZW5lcnMiLCJhZGROZXN0ZWRTdWIiLCJsaXN0ZW5lciIsIkJvb2xlYW4iLCJob3RSZWxvYWRpbmdWZXJzaW9uIiwiZHVtbXlTdGF0ZSIsIm5vb3AiLCJjb25uZWN0QWR2YW5jZWQiLCJzZWxlY3RvckZhY3RvcnkiLCJfY29udGV4dFR5cGVzIiwiX2NoaWxkQ29udGV4dFR5cGVzIiwiX3JlZjIiLCJfcmVmMiRnZXREaXNwbGF5TmFtZSIsImdldERpc3BsYXlOYW1lIiwiX3JlZjIkbWV0aG9kTmFtZSIsIm1ldGhvZE5hbWUiLCJfcmVmMiRyZW5kZXJDb3VudFByb3AiLCJyZW5kZXJDb3VudFByb3AiLCJfcmVmMiRzaG91bGRIYW5kbGVTdGEiLCJzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMiLCJfcmVmMiRzdG9yZUtleSIsIl9yZWYyJHdpdGhSZWYiLCJ3aXRoUmVmIiwiY29ubmVjdE9wdGlvbnMiLCJXcmFwcGVkQ29tcG9uZW50Iiwid3JhcHBlZENvbXBvbmVudE5hbWUiLCJzZWxlY3RvckZhY3RvcnlPcHRpb25zIiwiQ29ubmVjdCIsInJlbmRlckNvdW50IiwicHJvcHNNb2RlIiwic2V0V3JhcHBlZEluc3RhbmNlIiwiaW5pdFNlbGVjdG9yIiwiaW5pdFN1YnNjcmlwdGlvbiIsIl9yZWYzIiwic3Vic2NyaXB0aW9uIiwic2VsZWN0b3IiLCJydW4iLCJuZXh0UHJvcHMiLCJnZXRXcmFwcGVkSW5zdGFuY2UiLCJ3cmFwcGVkSW5zdGFuY2UiLCJzb3VyY2VTZWxlY3RvciIsIm1ha2VTZWxlY3RvclN0YXRlZnVsIiwibm90aWZ5TmVzdGVkU3Vic09uQ29tcG9uZW50RGlkVXBkYXRlIiwiYWRkRXh0cmFQcm9wcyIsIndpdGhFeHRyYXMiLCJoYXNPd24iLCJzaGFsbG93RXF1YWwiLCJvYmpBIiwib2JqQiIsImtleXNBIiwia2V5c0IiLCJyYW5kb21TdHJpbmciLCJBY3Rpb25UeXBlcyIsIklOSVQiLCJSRVBMQUNFIiwiUFJPQkVfVU5LTk9XTl9BQ1RJT04iLCJjcmVhdGVTdG9yZSIsInJlZHVjZXIiLCJwcmVsb2FkZWRTdGF0ZSIsImVuaGFuY2VyIiwiY3VycmVudFJlZHVjZXIiLCJjdXJyZW50U3RhdGUiLCJjdXJyZW50TGlzdGVuZXJzIiwibmV4dExpc3RlbmVycyIsImlzRGlzcGF0Y2hpbmciLCJlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzIiwicmVwbGFjZVJlZHVjZXIiLCJuZXh0UmVkdWNlciIsIm91dGVyU3Vic2NyaWJlIiwib2JzZXJ2ZXIiLCJvYnNlcnZlU3RhdGUiLCJnZXRVbmRlZmluZWRTdGF0ZUVycm9yTWVzc2FnZSIsImFjdGlvblR5cGUiLCJiaW5kQWN0aW9uQ3JlYXRvciIsImFjdGlvbkNyZWF0b3IiLCJfZGVmaW5lUHJvcGVydHkiLCJ3cml0YWJsZSIsIm93bktleXMiLCJlbnVtZXJhYmxlT25seSIsImZpbHRlciIsInN5bSIsIl9vYmplY3RTcHJlYWQyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJjb21wb3NlIiwiX2xlbiIsImZ1bmNzIiwiX2tleSIsInJlZHVjZSIsImFwcGx5TWlkZGxld2FyZSIsIm1pZGRsZXdhcmVzIiwiX2Rpc3BhdGNoIiwibWlkZGxld2FyZUFQSSIsImNoYWluIiwibWlkZGxld2FyZSIsIndyYXBNYXBUb1Byb3BzQ29uc3RhbnQiLCJnZXRDb25zdGFudCIsImNvbnN0YW50U2VsZWN0b3IiLCJkZXBlbmRzT25Pd25Qcm9wcyIsImdldERlcGVuZHNPbk93blByb3BzIiwibWFwVG9Qcm9wcyIsIndyYXBNYXBUb1Byb3BzRnVuYyIsInByb3h5Iiwic3RhdGVPckRpc3BhdGNoIiwib3duUHJvcHMiLCJtYXBEaXNwYXRjaFRvUHJvcHMiLCJhY3Rpb25DcmVhdG9ycyIsImJvdW5kQWN0aW9uQ3JlYXRvcnMiLCJiaW5kQWN0aW9uQ3JlYXRvcnMiLCJtYXBTdGF0ZVRvUHJvcHMiLCJkZWZhdWx0TWVyZ2VQcm9wcyIsInN0YXRlUHJvcHMiLCJkaXNwYXRjaFByb3BzIiwibWVyZ2VQcm9wcyIsIm1lcmdlZFByb3BzIiwicHVyZSIsImFyZU1lcmdlZFByb3BzRXF1YWwiLCJoYXNSdW5PbmNlIiwibmV4dE1lcmdlZFByb3BzIiwid3JhcE1lcmdlUHJvcHNGdW5jIiwiaW1wdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSIsInB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5IiwiYXJlU3RhdGVzRXF1YWwiLCJhcmVPd25Qcm9wc0VxdWFsIiwiYXJlU3RhdGVQcm9wc0VxdWFsIiwiaGFzUnVuQXRMZWFzdE9uY2UiLCJoYW5kbGVTdWJzZXF1ZW50Q2FsbHMiLCJuZXh0U3RhdGUiLCJuZXh0T3duUHJvcHMiLCJuZXh0U3RhdGVQcm9wcyIsInN0YXRlUHJvcHNDaGFuZ2VkIiwicHJvcHNDaGFuZ2VkIiwic3RhdGVDaGFuZ2VkIiwiZmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSIsImluaXRNYXBTdGF0ZVRvUHJvcHMiLCJpbml0TWFwRGlzcGF0Y2hUb1Byb3BzIiwiaW5pdE1lcmdlUHJvcHMiLCJmYWN0b3JpZXMiLCJzdHJpY3RFcXVhbCIsIl90ZW1wIiwiX3JlZiRjb25uZWN0SE9DIiwiY29ubmVjdEhPQyIsIl9yZWYkbWFwU3RhdGVUb1Byb3BzRiIsIm1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyIsIl9yZWYkbWFwRGlzcGF0Y2hUb1BybyIsIm1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyIsIl9yZWYkbWVyZ2VQcm9wc0ZhY3RvciIsIm1lcmdlUHJvcHNGYWN0b3JpZXMiLCJfcmVmJHNlbGVjdG9yRmFjdG9yeSIsIl9yZWYzJHB1cmUiLCJfcmVmMyRhcmVTdGF0ZXNFcXVhbCIsIl9yZWYzJGFyZU93blByb3BzRXF1YSIsIl9yZWYzJGFyZVN0YXRlUHJvcHNFcSIsIl9yZWYzJGFyZU1lcmdlZFByb3BzRSIsImV4dHJhT3B0aW9ucyIsImlzQWJzb2x1dGUiLCJwYXRobmFtZSIsInNwbGljZU9uZSIsImxpc3QiLCJ0b1BhcnRzIiwiZnJvbVBhcnRzIiwiaXNUb0FicyIsImlzRnJvbUFicyIsIm11c3RFbmRBYnMiLCJoYXNUcmFpbGluZ1NsYXNoIiwidXAiLCJwYXJ0IiwidW5zaGlmdCIsIl90eXBlb2YiLCJ2YWx1ZUVxdWFsIiwiZXZlcnkiLCJpdGVtIiwiYVR5cGUiLCJhVmFsdWUiLCJiVmFsdWUiLCJhS2V5cyIsImJLZXlzIiwibWVzc2FnZSIsImFkZExlYWRpbmdTbGFzaCIsInN0cmlwTGVhZGluZ1NsYXNoIiwic3RyaXBCYXNlbmFtZSIsImhhc0Jhc2VuYW1lIiwic3RyaXBUcmFpbGluZ1NsYXNoIiwiY3JlYXRlUGF0aCIsImhhc2giLCJjcmVhdGVMb2NhdGlvbiIsImN1cnJlbnRMb2NhdGlvbiIsImhhc2hJbmRleCIsInNlYXJjaEluZGV4IiwicGFyc2VQYXRoIiwiZGVjb2RlVVJJIiwiVVJJRXJyb3IiLCJjcmVhdGVUcmFuc2l0aW9uTWFuYWdlciIsInByb21wdCIsInNldFByb21wdCIsIm5leHRQcm9tcHQiLCJjb25maXJtVHJhbnNpdGlvblRvIiwiZ2V0VXNlckNvbmZpcm1hdGlvbiIsImFwcGVuZExpc3RlbmVyIiwiZm4iLCJpc0FjdGl2ZSIsIm5vdGlmeUxpc3RlbmVycyIsImNhblVzZURPTSIsImdldENvbmZpcm1hdGlvbiIsImNvbmZpcm0iLCJIYXNoUGF0aENvZGVycyIsImhhc2hiYW5nIiwiZW5jb2RlUGF0aCIsImRlY29kZVBhdGgiLCJub3NsYXNoIiwic2xhc2giLCJnZXRIYXNoUGF0aCIsInJlcGxhY2VIYXNoUGF0aCIsImNyZWF0ZUhhc2hIaXN0b3J5IiwiZ2xvYmFsSGlzdG9yeSIsImhpc3RvcnkiLCJfcHJvcHMiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJfcHJvcHMkZ2V0VXNlckNvbmZpcm0iLCJfcHJvcHMkaGFzaFR5cGUiLCJoYXNoVHlwZSIsImJhc2VuYW1lIiwiX0hhc2hQYXRoQ29kZXJzJGhhc2hUIiwiZ2V0RE9NTG9jYXRpb24iLCJ0cmFuc2l0aW9uTWFuYWdlciIsImZvcmNlTmV4dFBvcCIsImlnbm9yZVBhdGgiLCJoYW5kbGVIYXNoQ2hhbmdlIiwiZW5jb2RlZFBhdGgiLCJwcmV2TG9jYXRpb24iLCJmcm9tTG9jYXRpb24iLCJ0b0xvY2F0aW9uIiwidG9JbmRleCIsImFsbFBhdGhzIiwibGFzdEluZGV4T2YiLCJmcm9tSW5kZXgiLCJkZWx0YSIsImdvIiwicmV2ZXJ0UG9wIiwiaGFuZGxlUG9wIiwiaW5pdGlhbExvY2F0aW9uIiwibGlzdGVuZXJDb3VudCIsImNoZWNrRE9NTGlzdGVuZXJzIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImlzQmxvY2tlZCIsImNyZWF0ZUhyZWYiLCJwdXNoSGFzaFBhdGgiLCJwcmV2SW5kZXgiLCJuZXh0UGF0aHMiLCJnb0JhY2siLCJnb0ZvcndhcmQiLCJibG9jayIsInVuYmxvY2siLCJsaXN0ZW4iLCJ1bmxpc3RlbiIsIl9jbGFzc0NhbGxDaGVjayIsIkNvbnN0cnVjdG9yIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJfUmVhY3QkQ29tcG9uZW50IiwiUm91dGVyIiwiY29tcHV0ZU1hdGNoIiwic2V0UHJvdG90eXBlT2YiLCJfaW5oZXJpdHMiLCJyb3V0ZXIiLCJwYXJhbXMiLCJpc0V4YWN0IiwiX3RoaXMyIiwiSGFzaFJvdXRlciIsInBhdHRlcm5DYWNoZSIsImNhY2hlQ291bnQiLCJjYWNoZUtleSIsImNhY2hlIiwiY29tcGlsZWRQYXR0ZXJuIiwicGFyZW50IiwiX29wdGlvbnMiLCJfb3B0aW9ucyRleGFjdCIsIl9vcHRpb25zJHN0cmljdCIsIl9vcHRpb25zJHNlbnNpdGl2ZSIsIl9jb21waWxlUGF0aCIsInZhbHVlcyIsIlN3aXRjaCIsIl9lbGVtZW50JHByb3BzIiwicGF0aFByb3AiLCJjb21wdXRlZE1hdGNoIiwiUm91dGUiLCJuZXh0Q29udGV4dCIsIl9jb250ZXh0JHJvdXRlciIsInN0YXRpY0NvbnRleHQiLCJpc01vZGlmaWVkRXZlbnQiLCJldmVudCIsIkxpbmsiLCJoYW5kbGVDbGljayIsIl90aGlzJHByb3BzIiwiaW5uZXJSZWYiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJQb3N0SW5kZXhJdGVtIiwicG9zdCIsInRpdGxlIiwiZGVsZXRlUG9zdCIsIlBvc3RGb3JtIiwiaGFuZGxlU3VibWl0IiwiZmllbGQiLCJmb3JtVHlwZSIsIm9uU3VibWl0Iiwib25DaGFuZ2UiLCJ1cGRhdGUiLCJSZWFjdCIsInJlY2VpdmVQb3N0IiwiZmV0Y2hQb3N0cyIsIiQiLCJhamF4IiwicG9zdHMiLCJmZXRjaFBvc3QiLCJwb3N0SWQiLCJQb3N0QXBpVXRpbCIsImNyZWF0ZVBvc3QiLCJtZXRob2QiLCJ1cGRhdGVQb3N0IiwicmVtb3ZlUG9zdCIsImNvbm5lY3QiLCJQb3N0SW5kZXgiLCJQb3N0U2hvdyIsIkVkaXRQb3N0Rm9ybSIsIkFwcCIsIlBvc3RJbmRleENvbnRhaW5lciIsIlBvc3RTaG93Q29udGFpbmVyIiwiRWRpdFBvc3RGb3JtQ29udGFpbmVyIiwiUm9vdCIsIlJvb3RSZWR1Y2VyIiwicmVkdWNlcnMiLCJyZWR1Y2VyS2V5cyIsImZpbmFsUmVkdWNlcnMiLCJzaGFwZUFzc2VydGlvbkVycm9yIiwiZmluYWxSZWR1Y2VyS2V5cyIsImFzc2VydFJlZHVjZXJTaGFwZSIsImhhc0NoYW5nZWQiLCJfaSIsInByZXZpb3VzU3RhdGVGb3JLZXkiLCJuZXh0U3RhdGVGb3JLZXkiLCJlcnJvck1lc3NhZ2UiLCJjb21iaW5lUmVkdWNlcnMiLCJvbGRTdGF0ZSIsImZyZWV6ZSIsImNyZWF0ZVRodW5rTWlkZGxld2FyZSIsImV4dHJhQXJndW1lbnQiLCJ0aHVuayIsIndpdGhFeHRyYUFy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QUM3QixPQUFPLFNBQVV0VyxHQUNmLElBQUlsZCxFQUFXa2QsRUFBS2xkLFNBQ2hCMGMsRUFBV1EsRUFBS1IsU0FDcEIsT0FBTyxTQUFVeDNDLEdBQ2YsT0FBTyxTQUFVKzZCLEdBQ2YsTUFBc0IsbUJBQVhBLEVBQ0ZBLEVBQU9ELEVBQVUwYyxFQUFVOFcsR0FHN0J0dUQsRUFBSys2QixNQU1wQixJQUFJd3pCLEdBQVFGLEtBQ1pFLEdBQU1DLGtCQUFvQkgsR0FFWCxVQ0xBSSxHQUpRLGVBQUNsUyxFQUFELHVEQUFrQixHQUFsQixPQUNyQkYsRUFBWWlSLEdBQWEvUSxFQUFnQitCLEVBQWdCaVEsTUNEM0QxZ0QsU0FBU29WLGlCQUFpQixvQkFBb0IsV0FDNUMsSUFBTS9zQixFQUFPMlgsU0FBUzZnRCxlQUFlLFFBQy9CM1csRUFBUTBXLEtBRWRFLElBQVM1d0QsT0FBTyxrQkFBQyxHQUFELENBQU1nNkMsTUFBT0EsSUFBVzdoRCIsImZpbGUiOiJidW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMTE5KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgUmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgZGV2ZWxvcG1lbnQgYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgdmFyIHRocm93T25EaXJlY3RBY2Nlc3MgPSB0cnVlO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMnKShSZWFjdElzLmlzRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcyk7XG59IGVsc2Uge1xuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBwcm9kdWN0aW9uIGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMnKSgpO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXNlIGludmFyaWFudCgpIHRvIGFzc2VydCBzdGF0ZSB3aGljaCB5b3VyIHByb2dyYW0gYXNzdW1lcyB0byBiZSB0cnVlLlxuICpcbiAqIFByb3ZpZGUgc3ByaW50Zi1zdHlsZSBmb3JtYXQgKG9ubHkgJXMgaXMgc3VwcG9ydGVkKSBhbmQgYXJndW1lbnRzXG4gKiB0byBwcm92aWRlIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgYnJva2UgYW5kIHdoYXQgeW91IHdlcmVcbiAqIGV4cGVjdGluZy5cbiAqXG4gKiBUaGUgaW52YXJpYW50IG1lc3NhZ2Ugd2lsbCBiZSBzdHJpcHBlZCBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGludmFyaWFudFxuICogd2lsbCByZW1haW4gdG8gZW5zdXJlIGxvZ2ljIGRvZXMgbm90IGRpZmZlciBpbiBwcm9kdWN0aW9uLlxuICovXG5cbnZhciBpbnZhcmlhbnQgPSBmdW5jdGlvbihjb25kaXRpb24sIGZvcm1hdCwgYSwgYiwgYywgZCwgZSwgZikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhcmlhbnQgcmVxdWlyZXMgYW4gZXJyb3IgbWVzc2FnZSBhcmd1bWVudCcpO1xuICAgIH1cbiAgfVxuXG4gIGlmICghY29uZGl0aW9uKSB7XG4gICAgdmFyIGVycm9yO1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoXG4gICAgICAgICdNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCAnICtcbiAgICAgICAgJ2ZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuJ1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFyZ3MgPSBbYSwgYiwgYywgZCwgZSwgZl07XG4gICAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoXG4gICAgICAgIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107IH0pXG4gICAgICApO1xuICAgICAgZXJyb3IubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB9XG5cbiAgICBlcnJvci5mcmFtZXNUb1BvcCA9IDE7IC8vIHdlIGRvbid0IGNhcmUgYWJvdXQgaW52YXJpYW50J3Mgb3duIGZyYW1lXG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gaW52YXJpYW50O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU2ltaWxhciB0byBpbnZhcmlhbnQgYnV0IG9ubHkgbG9ncyBhIHdhcm5pbmcgaWYgdGhlIGNvbmRpdGlvbiBpcyBub3QgbWV0LlxuICogVGhpcyBjYW4gYmUgdXNlZCB0byBsb2cgaXNzdWVzIGluIGRldmVsb3BtZW50IGVudmlyb25tZW50cyBpbiBjcml0aWNhbFxuICogcGF0aHMuIFJlbW92aW5nIHRoZSBsb2dnaW5nIGNvZGUgZm9yIHByb2R1Y3Rpb24gZW52aXJvbm1lbnRzIHdpbGwga2VlcCB0aGVcbiAqIHNhbWUgbG9naWMgYW5kIGZvbGxvdyB0aGUgc2FtZSBjb2RlIHBhdGhzLlxuICovXG5cbnZhciBfX0RFVl9fID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJztcblxudmFyIHdhcm5pbmcgPSBmdW5jdGlvbigpIHt9O1xuXG5pZiAoX19ERVZfXykge1xuICB2YXIgcHJpbnRXYXJuaW5nID0gZnVuY3Rpb24gcHJpbnRXYXJuaW5nKGZvcm1hdCwgYXJncykge1xuICAgIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuID4gMSA/IGxlbiAtIDEgOiAwKTtcbiAgICBmb3IgKHZhciBrZXkgPSAxOyBrZXkgPCBsZW47IGtleSsrKSB7XG4gICAgICBhcmdzW2tleSAtIDFdID0gYXJndW1lbnRzW2tleV07XG4gICAgfVxuICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgdmFyIG1lc3NhZ2UgPSAnV2FybmluZzogJyArXG4gICAgICBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgICAgfSk7XG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIC8vIC0tLSBXZWxjb21lIHRvIGRlYnVnZ2luZyBSZWFjdCAtLS1cbiAgICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgeW91IGNhbiB1c2UgdGhpcyBzdGFja1xuICAgICAgLy8gdG8gZmluZCB0aGUgY2FsbHNpdGUgdGhhdCBjYXVzZWQgdGhpcyB3YXJuaW5nIHRvIGZpcmUuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgfSBjYXRjaCAoeCkge31cbiAgfVxuXG4gIHdhcm5pbmcgPSBmdW5jdGlvbihjb25kaXRpb24sIGZvcm1hdCwgYXJncykge1xuICAgIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuID4gMiA/IGxlbiAtIDIgOiAwKTtcbiAgICBmb3IgKHZhciBrZXkgPSAyOyBrZXkgPCBsZW47IGtleSsrKSB7XG4gICAgICBhcmdzW2tleSAtIDJdID0gYXJndW1lbnRzW2tleV07XG4gICAgfVxuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICdgd2FybmluZyhjb25kaXRpb24sIGZvcm1hdCwgLi4uYXJncylgIHJlcXVpcmVzIGEgd2FybmluZyAnICtcbiAgICAgICAgICAnbWVzc2FnZSBhcmd1bWVudCdcbiAgICAgICk7XG4gICAgfVxuICAgIGlmICghY29uZGl0aW9uKSB7XG4gICAgICBwcmludFdhcm5pbmcuYXBwbHkobnVsbCwgW2Zvcm1hdF0uY29uY2F0KGFyZ3MpKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gd2FybmluZztcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG4gKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gKiBvZiBgT2JqZWN0YC4gKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3Qoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzT2JqZWN0O1xuIiwidmFyIGZyZWVHbG9iYWwgPSByZXF1aXJlKCcuL19mcmVlR2xvYmFsJyk7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG52YXIgZnJlZVNlbGYgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjtcblxuLyoqIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QuICovXG52YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxubW9kdWxlLmV4cG9ydHMgPSByb290O1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNPYmplY3RMaWtlO1xuIiwidmFyIGxpc3RDYWNoZUNsZWFyID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlQ2xlYXInKSxcbiAgICBsaXN0Q2FjaGVEZWxldGUgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVEZWxldGUnKSxcbiAgICBsaXN0Q2FjaGVHZXQgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVHZXQnKSxcbiAgICBsaXN0Q2FjaGVIYXMgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVIYXMnKSxcbiAgICBsaXN0Q2FjaGVTZXQgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVTZXQnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGxpc3QgY2FjaGUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBMaXN0Q2FjaGUoZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgTGlzdENhY2hlYC5cbkxpc3RDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBsaXN0Q2FjaGVDbGVhcjtcbkxpc3RDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbGlzdENhY2hlRGVsZXRlO1xuTGlzdENhY2hlLnByb3RvdHlwZS5nZXQgPSBsaXN0Q2FjaGVHZXQ7XG5MaXN0Q2FjaGUucHJvdG90eXBlLmhhcyA9IGxpc3RDYWNoZUhhcztcbkxpc3RDYWNoZS5wcm90b3R5cGUuc2V0ID0gbGlzdENhY2hlU2V0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IExpc3RDYWNoZTtcbiIsInZhciBlcSA9IHJlcXVpcmUoJy4vZXEnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBpbmRleCBhdCB3aGljaCB0aGUgYGtleWAgaXMgZm91bmQgaW4gYGFycmF5YCBvZiBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHsqfSBrZXkgVGhlIGtleSB0byBzZWFyY2ggZm9yLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAqL1xuZnVuY3Rpb24gYXNzb2NJbmRleE9mKGFycmF5LCBrZXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgaWYgKGVxKGFycmF5W2xlbmd0aF1bMF0sIGtleSkpIHtcbiAgICAgIHJldHVybiBsZW5ndGg7XG4gICAgfVxuICB9XG4gIHJldHVybiAtMTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhc3NvY0luZGV4T2Y7XG4iLCIvKipcbiAqIFBlcmZvcm1zIGFcbiAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gKiBjb21wYXJpc29uIGJldHdlZW4gdHdvIHZhbHVlcyB0byBkZXRlcm1pbmUgaWYgdGhleSBhcmUgZXF1aXZhbGVudC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAqIHZhciBvdGhlciA9IHsgJ2EnOiAxIH07XG4gKlxuICogXy5lcShvYmplY3QsIG9iamVjdCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5lcShvYmplY3QsIG90aGVyKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5lcSgnYScsICdhJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5lcSgnYScsIE9iamVjdCgnYScpKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5lcShOYU4sIE5hTik7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGVxKHZhbHVlLCBvdGhlcikge1xuICByZXR1cm4gdmFsdWUgPT09IG90aGVyIHx8ICh2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlcTtcbiIsInZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19TeW1ib2wnKSxcbiAgICBnZXRSYXdUYWcgPSByZXF1aXJlKCcuL19nZXRSYXdUYWcnKSxcbiAgICBvYmplY3RUb1N0cmluZyA9IHJlcXVpcmUoJy4vX29iamVjdFRvU3RyaW5nJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBudWxsVGFnID0gJ1tvYmplY3QgTnVsbF0nLFxuICAgIHVuZGVmaW5lZFRhZyA9ICdbb2JqZWN0IFVuZGVmaW5lZF0nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0VGFnYCB3aXRob3V0IGZhbGxiYWNrcyBmb3IgYnVnZ3kgZW52aXJvbm1lbnRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXRUYWcodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZFRhZyA6IG51bGxUYWc7XG4gIH1cbiAgcmV0dXJuIChzeW1Ub1N0cmluZ1RhZyAmJiBzeW1Ub1N0cmluZ1RhZyBpbiBPYmplY3QodmFsdWUpKVxuICAgID8gZ2V0UmF3VGFnKHZhbHVlKVxuICAgIDogb2JqZWN0VG9TdHJpbmcodmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VHZXRUYWc7XG4iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBuYXRpdmVDcmVhdGUgPSBnZXROYXRpdmUoT2JqZWN0LCAnY3JlYXRlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gbmF0aXZlQ3JlYXRlO1xuIiwidmFyIGlzS2V5YWJsZSA9IHJlcXVpcmUoJy4vX2lzS2V5YWJsZScpO1xuXG4vKipcbiAqIEdldHMgdGhlIGRhdGEgZm9yIGBtYXBgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSByZWZlcmVuY2Uga2V5LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hcCBkYXRhLlxuICovXG5mdW5jdGlvbiBnZXRNYXBEYXRhKG1hcCwga2V5KSB7XG4gIHZhciBkYXRhID0gbWFwLl9fZGF0YV9fO1xuICByZXR1cm4gaXNLZXlhYmxlKGtleSlcbiAgICA/IGRhdGFbdHlwZW9mIGtleSA9PSAnc3RyaW5nJyA/ICdzdHJpbmcnIDogJ2hhc2gnXVxuICAgIDogZGF0YS5tYXA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0TWFwRGF0YTtcbiIsInZhciBiYXNlSXNOYXRpdmUgPSByZXF1aXJlKCcuL19iYXNlSXNOYXRpdmUnKSxcbiAgICBnZXRWYWx1ZSA9IHJlcXVpcmUoJy4vX2dldFZhbHVlJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgbmF0aXZlIGZ1bmN0aW9uIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIG1ldGhvZCB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZnVuY3Rpb24gaWYgaXQncyBuYXRpdmUsIGVsc2UgYHVuZGVmaW5lZGAuXG4gKi9cbmZ1bmN0aW9uIGdldE5hdGl2ZShvYmplY3QsIGtleSkge1xuICB2YXIgdmFsdWUgPSBnZXRWYWx1ZShvYmplY3QsIGtleSk7XG4gIHJldHVybiBiYXNlSXNOYXRpdmUodmFsdWUpID8gdmFsdWUgOiB1bmRlZmluZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0TmF0aXZlO1xuIiwidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0Jyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhc3luY1RhZyA9ICdbb2JqZWN0IEFzeW5jRnVuY3Rpb25dJyxcbiAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICBnZW5UYWcgPSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nLFxuICAgIHByb3h5VGFnID0gJ1tvYmplY3QgUHJveHldJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYEZ1bmN0aW9uYCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBmdW5jdGlvbiwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzRnVuY3Rpb24oXyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0Z1bmN0aW9uKC9hYmMvKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLy8gVGhlIHVzZSBvZiBgT2JqZWN0I3RvU3RyaW5nYCBhdm9pZHMgaXNzdWVzIHdpdGggdGhlIGB0eXBlb2ZgIG9wZXJhdG9yXG4gIC8vIGluIFNhZmFyaSA5IHdoaWNoIHJldHVybnMgJ29iamVjdCcgZm9yIHR5cGVkIGFycmF5cyBhbmQgb3RoZXIgY29uc3RydWN0b3JzLlxuICB2YXIgdGFnID0gYmFzZUdldFRhZyh2YWx1ZSk7XG4gIHJldHVybiB0YWcgPT0gZnVuY1RhZyB8fCB0YWcgPT0gZ2VuVGFnIHx8IHRhZyA9PSBhc3luY1RhZyB8fCB0YWcgPT0gcHJveHlUYWc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNGdW5jdGlvbjtcbiIsInZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2RlZmluZVByb3BlcnR5Jyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGFzc2lnblZhbHVlYCBhbmQgYGFzc2lnbk1lcmdlVmFsdWVgIHdpdGhvdXRcbiAqIHZhbHVlIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICovXG5mdW5jdGlvbiBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgPT0gJ19fcHJvdG9fXycgJiYgZGVmaW5lUHJvcGVydHkpIHtcbiAgICBkZWZpbmVQcm9wZXJ0eShvYmplY3QsIGtleSwge1xuICAgICAgJ2NvbmZpZ3VyYWJsZSc6IHRydWUsXG4gICAgICAnZW51bWVyYWJsZSc6IHRydWUsXG4gICAgICAndmFsdWUnOiB2YWx1ZSxcbiAgICAgICd3cml0YWJsZSc6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUFzc2lnblZhbHVlO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtb2R1bGUpIHtcblx0aWYgKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0bW9kdWxlLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKCkge307XG5cdFx0bW9kdWxlLnBhdGhzID0gW107XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuIiwidmFyIGlzRnVuY3Rpb24gPSByZXF1aXJlKCcuL2lzRnVuY3Rpb24nKSxcbiAgICBpc0xlbmd0aCA9IHJlcXVpcmUoJy4vaXNMZW5ndGgnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLiBBIHZhbHVlIGlzIGNvbnNpZGVyZWQgYXJyYXktbGlrZSBpZiBpdCdzXG4gKiBub3QgYSBmdW5jdGlvbiBhbmQgaGFzIGEgYHZhbHVlLmxlbmd0aGAgdGhhdCdzIGFuIGludGVnZXIgZ3JlYXRlciB0aGFuIG9yXG4gKiBlcXVhbCB0byBgMGAgYW5kIGxlc3MgdGhhbiBvciBlcXVhbCB0byBgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZSgnYWJjJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUxpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiAhaXNGdW5jdGlvbih2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNBcnJheUxpa2U7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qIGdsb2JhbCB3aW5kb3cgKi9cbmltcG9ydCBwb255ZmlsbCBmcm9tICcuL3BvbnlmaWxsLmpzJztcblxudmFyIHJvb3Q7XG5cbmlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IHNlbGY7XG59IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSB3aW5kb3c7XG59IGVsc2UgaWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBnbG9iYWw7XG59IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBtb2R1bGU7XG59IGVsc2Uge1xuICByb290ID0gRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbn1cblxudmFyIHJlc3VsdCA9IHBvbnlmaWxsKHJvb3QpO1xuZXhwb3J0IGRlZmF1bHQgcmVzdWx0O1xuIiwiLypcbm9iamVjdC1hc3NpZ25cbihjKSBTaW5kcmUgU29yaHVzXG5AbGljZW5zZSBNSVRcbiovXG5cbid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuXHRpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdHJldHVybiBPYmplY3QodmFsKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCkge1xuXHR0cnkge1xuXHRcdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy5cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcblx0XHR2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHRcdHRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTtcblx0XHR9XG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdHJldHVybiB0ZXN0MltuXTtcblx0XHR9KTtcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QzID0ge307XG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XG5cdFx0XHR0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PVxuXHRcdFx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBmcm9tO1xuXHR2YXIgdG8gPSB0b09iamVjdCh0YXJnZXQpO1xuXHR2YXIgc3ltYm9scztcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBPYmplY3QoYXJndW1lbnRzW3NdKTtcblxuXHRcdGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG5cdFx0XHRpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG5cdFx0XHRcdHRvW2tleV0gPSBmcm9tW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0c3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sIHN5bWJvbHNbaV0pKSB7XG5cdFx0XHRcdFx0dG9bc3ltYm9sc1tpXV0gPSBmcm9tW3N5bWJvbHNbaV1dO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRvO1xufTtcbiIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKSxcbiAgICByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgTWFwID0gZ2V0TmF0aXZlKHJvb3QsICdNYXAnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBNYXA7XG4iLCJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cbm1vZHVsZS5leHBvcnRzID0gU3ltYm9sO1xuIiwiLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwgJiYgZ2xvYmFsLk9iamVjdCA9PT0gT2JqZWN0ICYmIGdsb2JhbDtcblxubW9kdWxlLmV4cG9ydHMgPSBmcmVlR2xvYmFsO1xuIiwidmFyIGJhc2VBc3NpZ25WYWx1ZSA9IHJlcXVpcmUoJy4vX2Jhc2VBc3NpZ25WYWx1ZScpLFxuICAgIGVxID0gcmVxdWlyZSgnLi9lcScpO1xuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgYXNzaWduVmFsdWVgIGV4Y2VwdCB0aGF0IGl0IGRvZXNuJ3QgYXNzaWduXG4gKiBgdW5kZWZpbmVkYCB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAqL1xuZnVuY3Rpb24gYXNzaWduTWVyZ2VWYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgaWYgKCh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmICFlcShvYmplY3Rba2V5XSwgdmFsdWUpKSB8fFxuICAgICAgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkpIHtcbiAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFzc2lnbk1lcmdlVmFsdWU7XG4iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyk7XG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IChmdW5jdGlvbigpIHtcbiAgdHJ5IHtcbiAgICB2YXIgZnVuYyA9IGdldE5hdGl2ZShPYmplY3QsICdkZWZpbmVQcm9wZXJ0eScpO1xuICAgIGZ1bmMoe30sICcnLCB7fSk7XG4gICAgcmV0dXJuIGZ1bmM7XG4gIH0gY2F0Y2ggKGUpIHt9XG59KCkpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmluZVByb3BlcnR5O1xuIiwidmFyIG92ZXJBcmcgPSByZXF1aXJlKCcuL19vdmVyQXJnJyk7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIGdldFByb3RvdHlwZSA9IG92ZXJBcmcoT2JqZWN0LmdldFByb3RvdHlwZU9mLCBPYmplY3QpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFByb3RvdHlwZTtcbiIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGEgcHJvdG90eXBlIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHByb3RvdHlwZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc1Byb3RvdHlwZSh2YWx1ZSkge1xuICB2YXIgQ3RvciA9IHZhbHVlICYmIHZhbHVlLmNvbnN0cnVjdG9yLFxuICAgICAgcHJvdG8gPSAodHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBDdG9yLnByb3RvdHlwZSkgfHwgb2JqZWN0UHJvdG87XG5cbiAgcmV0dXJuIHZhbHVlID09PSBwcm90bztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1Byb3RvdHlwZTtcbiIsInZhciBiYXNlSXNBcmd1bWVudHMgPSByZXF1aXJlKCcuL19iYXNlSXNBcmd1bWVudHMnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IG9iamVjdFByb3RvLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhbiBgYXJndW1lbnRzYCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICogIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJndW1lbnRzKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNBcmd1bWVudHMgPSBiYXNlSXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPyBiYXNlSXNBcmd1bWVudHMgOiBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCAnY2FsbGVlJykgJiZcbiAgICAhcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBpc0FyZ3VtZW50cztcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhbiBgQXJyYXlgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXkoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXkoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheSgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQXJyYXk7XG4iLCIvKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgbGVuZ3RoLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uXG4gKiBbYFRvTGVuZ3RoYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9sZW5ndGgpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgbGVuZ3RoLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNMZW5ndGgoMyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0xlbmd0aChOdW1iZXIuTUlOX1ZBTFVFKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0xlbmd0aChJbmZpbml0eSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNMZW5ndGgoJzMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTGVuZ3RoKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiZcbiAgICB2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDw9IE1BWF9TQUZFX0lOVEVHRVI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNMZW5ndGg7XG4iLCJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKSxcbiAgICBzdHViRmFsc2UgPSByZXF1aXJlKCcuL3N0dWJGYWxzZScpO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xudmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWAuICovXG52YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXG4vKiogRGV0ZWN0IHRoZSBwb3B1bGFyIENvbW1vbkpTIGV4dGVuc2lvbiBgbW9kdWxlLmV4cG9ydHNgLiAqL1xudmFyIG1vZHVsZUV4cG9ydHMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUuZXhwb3J0cyA9PT0gZnJlZUV4cG9ydHM7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIEJ1ZmZlciA9IG1vZHVsZUV4cG9ydHMgPyByb290LkJ1ZmZlciA6IHVuZGVmaW5lZDtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZUlzQnVmZmVyID0gQnVmZmVyID8gQnVmZmVyLmlzQnVmZmVyIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4zLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNCdWZmZXIobmV3IEJ1ZmZlcigyKSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0J1ZmZlcihuZXcgVWludDhBcnJheSgyKSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNCdWZmZXIgPSBuYXRpdmVJc0J1ZmZlciB8fCBzdHViRmFsc2U7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNCdWZmZXI7XG4iLCJ2YXIgYmFzZUlzVHlwZWRBcnJheSA9IHJlcXVpcmUoJy4vX2Jhc2VJc1R5cGVkQXJyYXknKSxcbiAgICBiYXNlVW5hcnkgPSByZXF1aXJlKCcuL19iYXNlVW5hcnknKSxcbiAgICBub2RlVXRpbCA9IHJlcXVpcmUoJy4vX25vZGVVdGlsJyk7XG5cbi8qIE5vZGUuanMgaGVscGVyIHJlZmVyZW5jZXMuICovXG52YXIgbm9kZUlzVHlwZWRBcnJheSA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzVHlwZWRBcnJheTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgdHlwZWQgYXJyYXkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzVHlwZWRBcnJheShuZXcgVWludDhBcnJheSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1R5cGVkQXJyYXkoW10pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzVHlwZWRBcnJheSA9IG5vZGVJc1R5cGVkQXJyYXkgPyBiYXNlVW5hcnkobm9kZUlzVHlwZWRBcnJheSkgOiBiYXNlSXNUeXBlZEFycmF5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzVHlwZWRBcnJheTtcbiIsIi8qKlxuICogR2V0cyB0aGUgdmFsdWUgYXQgYGtleWAsIHVubGVzcyBga2V5YCBpcyBcIl9fcHJvdG9fX1wiIG9yIFwiY29uc3RydWN0b3JcIi5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIHNhZmVHZXQob2JqZWN0LCBrZXkpIHtcbiAgaWYgKGtleSA9PT0gJ2NvbnN0cnVjdG9yJyAmJiB0eXBlb2Ygb2JqZWN0W2tleV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoa2V5ID09ICdfX3Byb3RvX18nKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcmV0dXJuIG9iamVjdFtrZXldO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNhZmVHZXQ7XG4iLCJ2YXIgYXJyYXlMaWtlS2V5cyA9IHJlcXVpcmUoJy4vX2FycmF5TGlrZUtleXMnKSxcbiAgICBiYXNlS2V5c0luID0gcmVxdWlyZSgnLi9fYmFzZUtleXNJbicpLFxuICAgIGlzQXJyYXlMaWtlID0gcmVxdWlyZSgnLi9pc0FycmF5TGlrZScpO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgYG9iamVjdGAuXG4gKlxuICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gRm9vKCkge1xuICogICB0aGlzLmEgPSAxO1xuICogICB0aGlzLmIgPSAyO1xuICogfVxuICpcbiAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gKlxuICogXy5rZXlzSW4obmV3IEZvbyk7XG4gKiAvLyA9PiBbJ2EnLCAnYicsICdjJ10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAqL1xuZnVuY3Rpb24ga2V5c0luKG9iamVjdCkge1xuICByZXR1cm4gaXNBcnJheUxpa2Uob2JqZWN0KSA/IGFycmF5TGlrZUtleXMob2JqZWN0LCB0cnVlKSA6IGJhc2VLZXlzSW4ob2JqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBrZXlzSW47XG4iLCIvKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IHVuc2lnbmVkIGludGVnZXIgdmFsdWVzLiAqL1xudmFyIHJlSXNVaW50ID0gL14oPzowfFsxLTldXFxkKikkLztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgaW5kZXguXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9TUFYX1NBRkVfSU5URUdFUl0gVGhlIHVwcGVyIGJvdW5kcyBvZiBhIHZhbGlkIGluZGV4LlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBpbmRleCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0luZGV4KHZhbHVlLCBsZW5ndGgpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIGxlbmd0aCA9IGxlbmd0aCA9PSBudWxsID8gTUFYX1NBRkVfSU5URUdFUiA6IGxlbmd0aDtcblxuICByZXR1cm4gISFsZW5ndGggJiZcbiAgICAodHlwZSA9PSAnbnVtYmVyJyB8fFxuICAgICAgKHR5cGUgIT0gJ3N5bWJvbCcgJiYgcmVJc1VpbnQudGVzdCh2YWx1ZSkpKSAmJlxuICAgICAgICAodmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8IGxlbmd0aCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNJbmRleDtcbiIsIi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyB0aGUgZmlyc3QgYXJndW1lbnQgaXQgcmVjZWl2ZXMuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IFV0aWxcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgQW55IHZhbHVlLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgYHZhbHVlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gKlxuICogY29uc29sZS5sb2coXy5pZGVudGl0eShvYmplY3QpID09PSBvYmplY3QpO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBpZGVudGl0eSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaWRlbnRpdHk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNoZWNrRENFKCkge1xuICAvKiBnbG9iYWwgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICovXG4gIGlmIChcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJyB8fFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVGhpcyBicmFuY2ggaXMgdW5yZWFjaGFibGUgYmVjYXVzZSB0aGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkXG4gICAgLy8gaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBjb25kaXRpb24gaXMgdHJ1ZSBvbmx5IGluIGRldmVsb3BtZW50LlxuICAgIC8vIFRoZXJlZm9yZSBpZiB0aGUgYnJhbmNoIGlzIHN0aWxsIGhlcmUsIGRlYWQgY29kZSBlbGltaW5hdGlvbiB3YXNuJ3RcbiAgICAvLyBwcm9wZXJseSBhcHBsaWVkLlxuICAgIC8vIERvbid0IGNoYW5nZSB0aGUgbWVzc2FnZS4gUmVhY3QgRGV2VG9vbHMgcmVsaWVzIG9uIGl0LiBBbHNvIG1ha2Ugc3VyZVxuICAgIC8vIHRoaXMgbWVzc2FnZSBkb2Vzbid0IG9jY3VyIGVsc2V3aGVyZSBpbiB0aGlzIGZ1bmN0aW9uLCBvciBpdCB3aWxsIGNhdXNlXG4gICAgLy8gYSBmYWxzZSBwb3NpdGl2ZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ15fXicpO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gVmVyaWZ5IHRoYXQgdGhlIGNvZGUgYWJvdmUgaGFzIGJlZW4gZGVhZCBjb2RlIGVsaW1pbmF0ZWQgKERDRSdkKS5cbiAgICBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UoY2hlY2tEQ0UpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBEZXZUb29scyBzaG91bGRuJ3QgY3Jhc2ggUmVhY3QsIG5vIG1hdHRlciB3aGF0LlxuICAgIC8vIFdlIHNob3VsZCBzdGlsbCByZXBvcnQgaW4gY2FzZSB3ZSBicmVhayB0aGlzIGNvZGUuXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIERDRSBjaGVjayBzaG91bGQgaGFwcGVuIGJlZm9yZSBSZWFjdERPTSBidW5kbGUgZXhlY3V0ZXMgc28gdGhhdFxuICAvLyBEZXZUb29scyBjYW4gcmVwb3J0IGJhZCBtaW5pZmljYXRpb24gZHVyaW5nIGluamVjdGlvbi5cbiAgY2hlY2tEQ0UoKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciByZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgMjAxNSwgWWFob28hIEluYy5cbiAqIENvcHlyaWdodHMgbGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgTGljZW5zZS4gU2VlIHRoZSBhY2NvbXBhbnlpbmcgTElDRU5TRSBmaWxlIGZvciB0ZXJtcy5cbiAqL1xudmFyIFJFQUNUX1NUQVRJQ1MgPSB7XG4gIGNoaWxkQ29udGV4dFR5cGVzOiB0cnVlLFxuICBjb250ZXh0VHlwZTogdHJ1ZSxcbiAgY29udGV4dFR5cGVzOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBnZXREZWZhdWx0UHJvcHM6IHRydWUsXG4gIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjogdHJ1ZSxcbiAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOiB0cnVlLFxuICBtaXhpbnM6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZSxcbiAgdHlwZTogdHJ1ZVxufTtcbnZhciBLTk9XTl9TVEFUSUNTID0ge1xuICBuYW1lOiB0cnVlLFxuICBsZW5ndGg6IHRydWUsXG4gIHByb3RvdHlwZTogdHJ1ZSxcbiAgY2FsbGVyOiB0cnVlLFxuICBjYWxsZWU6IHRydWUsXG4gIGFyZ3VtZW50czogdHJ1ZSxcbiAgYXJpdHk6IHRydWVcbn07XG52YXIgRk9SV0FSRF9SRUZfU1RBVElDUyA9IHtcbiAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgcmVuZGVyOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWVcbn07XG52YXIgTUVNT19TVEFUSUNTID0ge1xuICAnJCR0eXBlb2YnOiB0cnVlLFxuICBjb21wYXJlOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWUsXG4gIHR5cGU6IHRydWVcbn07XG52YXIgVFlQRV9TVEFUSUNTID0ge307XG5UWVBFX1NUQVRJQ1NbcmVhY3RJcy5Gb3J3YXJkUmVmXSA9IEZPUldBUkRfUkVGX1NUQVRJQ1M7XG5cbmZ1bmN0aW9uIGdldFN0YXRpY3MoY29tcG9uZW50KSB7XG4gIGlmIChyZWFjdElzLmlzTWVtbyhjb21wb25lbnQpKSB7XG4gICAgcmV0dXJuIE1FTU9fU1RBVElDUztcbiAgfVxuXG4gIHJldHVybiBUWVBFX1NUQVRJQ1NbY29tcG9uZW50WyckJHR5cGVvZiddXSB8fCBSRUFDVF9TVEFUSUNTO1xufVxuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBvYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xuZnVuY3Rpb24gaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBzb3VyY2VDb21wb25lbnQsIGJsYWNrbGlzdCkge1xuICBpZiAodHlwZW9mIHNvdXJjZUNvbXBvbmVudCAhPT0gJ3N0cmluZycpIHtcbiAgICAvLyBkb24ndCBob2lzdCBvdmVyIHN0cmluZyAoaHRtbCkgY29tcG9uZW50c1xuICAgIGlmIChvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgIHZhciBpbmhlcml0ZWRDb21wb25lbnQgPSBnZXRQcm90b3R5cGVPZihzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgICBpZiAoaW5oZXJpdGVkQ29tcG9uZW50ICYmIGluaGVyaXRlZENvbXBvbmVudCAhPT0gb2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgaW5oZXJpdGVkQ29tcG9uZW50LCBibGFja2xpc3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgaWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgICAga2V5cyA9IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2VDb21wb25lbnQpKTtcbiAgICB9XG5cbiAgICB2YXIgdGFyZ2V0U3RhdGljcyA9IGdldFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50KTtcbiAgICB2YXIgc291cmNlU3RhdGljcyA9IGdldFN0YXRpY3Moc291cmNlQ29tcG9uZW50KTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgdmFyIGtleSA9IGtleXNbaV07XG5cbiAgICAgIGlmICghS05PV05fU1RBVElDU1trZXldICYmICEoYmxhY2tsaXN0ICYmIGJsYWNrbGlzdFtrZXldKSAmJiAhKHNvdXJjZVN0YXRpY3MgJiYgc291cmNlU3RhdGljc1trZXldKSAmJiAhKHRhcmdldFN0YXRpY3MgJiYgdGFyZ2V0U3RhdGljc1trZXldKSkge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2VDb21wb25lbnQsIGtleSk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBBdm9pZCBmYWlsdXJlcyBmcm9tIHJlYWQtb25seSBwcm9wZXJ0aWVzXG4gICAgICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0Q29tcG9uZW50LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaG9pc3ROb25SZWFjdFN0YXRpY3M7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzeW1ib2xPYnNlcnZhYmxlUG9ueWZpbGwocm9vdCkge1xuXHR2YXIgcmVzdWx0O1xuXHR2YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cblx0aWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicpIHtcblx0XHRpZiAoU3ltYm9sLm9ic2VydmFibGUpIHtcblx0XHRcdHJlc3VsdCA9IFN5bWJvbC5vYnNlcnZhYmxlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXN1bHQgPSBTeW1ib2woJ29ic2VydmFibGUnKTtcblx0XHRcdFN5bWJvbC5vYnNlcnZhYmxlID0gcmVzdWx0O1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRyZXN1bHQgPSAnQEBvYnNlcnZhYmxlJztcblx0fVxuXG5cdHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIGlzYXJyYXkgPSByZXF1aXJlKCdpc2FycmF5JylcblxuLyoqXG4gKiBFeHBvc2UgYHBhdGhUb1JlZ2V4cGAuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gcGF0aFRvUmVnZXhwXG5tb2R1bGUuZXhwb3J0cy5wYXJzZSA9IHBhcnNlXG5tb2R1bGUuZXhwb3J0cy5jb21waWxlID0gY29tcGlsZVxubW9kdWxlLmV4cG9ydHMudG9rZW5zVG9GdW5jdGlvbiA9IHRva2Vuc1RvRnVuY3Rpb25cbm1vZHVsZS5leHBvcnRzLnRva2Vuc1RvUmVnRXhwID0gdG9rZW5zVG9SZWdFeHBcblxuLyoqXG4gKiBUaGUgbWFpbiBwYXRoIG1hdGNoaW5nIHJlZ2V4cCB1dGlsaXR5LlxuICpcbiAqIEB0eXBlIHtSZWdFeHB9XG4gKi9cbnZhciBQQVRIX1JFR0VYUCA9IG5ldyBSZWdFeHAoW1xuICAvLyBNYXRjaCBlc2NhcGVkIGNoYXJhY3RlcnMgdGhhdCB3b3VsZCBvdGhlcndpc2UgYXBwZWFyIGluIGZ1dHVyZSBtYXRjaGVzLlxuICAvLyBUaGlzIGFsbG93cyB0aGUgdXNlciB0byBlc2NhcGUgc3BlY2lhbCBjaGFyYWN0ZXJzIHRoYXQgd29uJ3QgdHJhbnNmb3JtLlxuICAnKFxcXFxcXFxcLiknLFxuICAvLyBNYXRjaCBFeHByZXNzLXN0eWxlIHBhcmFtZXRlcnMgYW5kIHVuLW5hbWVkIHBhcmFtZXRlcnMgd2l0aCBhIHByZWZpeFxuICAvLyBhbmQgb3B0aW9uYWwgc3VmZml4ZXMuIE1hdGNoZXMgYXBwZWFyIGFzOlxuICAvL1xuICAvLyBcIi86dGVzdChcXFxcZCspP1wiID0+IFtcIi9cIiwgXCJ0ZXN0XCIsIFwiXFxkK1wiLCB1bmRlZmluZWQsIFwiP1wiLCB1bmRlZmluZWRdXG4gIC8vIFwiL3JvdXRlKFxcXFxkKylcIiAgPT4gW3VuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFwiXFxkK1wiLCB1bmRlZmluZWQsIHVuZGVmaW5lZF1cbiAgLy8gXCIvKlwiICAgICAgICAgICAgPT4gW1wiL1wiLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFwiKlwiXVxuICAnKFtcXFxcLy5dKT8oPzooPzpcXFxcOihcXFxcdyspKD86XFxcXCgoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKV0pKylcXFxcKSk/fFxcXFwoKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKCldKSspXFxcXCkpKFsrKj9dKT98KFxcXFwqKSknXG5dLmpvaW4oJ3wnKSwgJ2cnKVxuXG4vKipcbiAqIFBhcnNlIGEgc3RyaW5nIGZvciB0aGUgcmF3IHRva2Vucy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICBzdHJcbiAqIEBwYXJhbSAge09iamVjdD19IG9wdGlvbnNcbiAqIEByZXR1cm4geyFBcnJheX1cbiAqL1xuZnVuY3Rpb24gcGFyc2UgKHN0ciwgb3B0aW9ucykge1xuICB2YXIgdG9rZW5zID0gW11cbiAgdmFyIGtleSA9IDBcbiAgdmFyIGluZGV4ID0gMFxuICB2YXIgcGF0aCA9ICcnXG4gIHZhciBkZWZhdWx0RGVsaW1pdGVyID0gb3B0aW9ucyAmJiBvcHRpb25zLmRlbGltaXRlciB8fCAnLydcbiAgdmFyIHJlc1xuXG4gIHdoaWxlICgocmVzID0gUEFUSF9SRUdFWFAuZXhlYyhzdHIpKSAhPSBudWxsKSB7XG4gICAgdmFyIG0gPSByZXNbMF1cbiAgICB2YXIgZXNjYXBlZCA9IHJlc1sxXVxuICAgIHZhciBvZmZzZXQgPSByZXMuaW5kZXhcbiAgICBwYXRoICs9IHN0ci5zbGljZShpbmRleCwgb2Zmc2V0KVxuICAgIGluZGV4ID0gb2Zmc2V0ICsgbS5sZW5ndGhcblxuICAgIC8vIElnbm9yZSBhbHJlYWR5IGVzY2FwZWQgc2VxdWVuY2VzLlxuICAgIGlmIChlc2NhcGVkKSB7XG4gICAgICBwYXRoICs9IGVzY2FwZWRbMV1cbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuXG4gICAgdmFyIG5leHQgPSBzdHJbaW5kZXhdXG4gICAgdmFyIHByZWZpeCA9IHJlc1syXVxuICAgIHZhciBuYW1lID0gcmVzWzNdXG4gICAgdmFyIGNhcHR1cmUgPSByZXNbNF1cbiAgICB2YXIgZ3JvdXAgPSByZXNbNV1cbiAgICB2YXIgbW9kaWZpZXIgPSByZXNbNl1cbiAgICB2YXIgYXN0ZXJpc2sgPSByZXNbN11cblxuICAgIC8vIFB1c2ggdGhlIGN1cnJlbnQgcGF0aCBvbnRvIHRoZSB0b2tlbnMuXG4gICAgaWYgKHBhdGgpIHtcbiAgICAgIHRva2Vucy5wdXNoKHBhdGgpXG4gICAgICBwYXRoID0gJydcbiAgICB9XG5cbiAgICB2YXIgcGFydGlhbCA9IHByZWZpeCAhPSBudWxsICYmIG5leHQgIT0gbnVsbCAmJiBuZXh0ICE9PSBwcmVmaXhcbiAgICB2YXIgcmVwZWF0ID0gbW9kaWZpZXIgPT09ICcrJyB8fCBtb2RpZmllciA9PT0gJyonXG4gICAgdmFyIG9wdGlvbmFsID0gbW9kaWZpZXIgPT09ICc/JyB8fCBtb2RpZmllciA9PT0gJyonXG4gICAgdmFyIGRlbGltaXRlciA9IHJlc1syXSB8fCBkZWZhdWx0RGVsaW1pdGVyXG4gICAgdmFyIHBhdHRlcm4gPSBjYXB0dXJlIHx8IGdyb3VwXG5cbiAgICB0b2tlbnMucHVzaCh7XG4gICAgICBuYW1lOiBuYW1lIHx8IGtleSsrLFxuICAgICAgcHJlZml4OiBwcmVmaXggfHwgJycsXG4gICAgICBkZWxpbWl0ZXI6IGRlbGltaXRlcixcbiAgICAgIG9wdGlvbmFsOiBvcHRpb25hbCxcbiAgICAgIHJlcGVhdDogcmVwZWF0LFxuICAgICAgcGFydGlhbDogcGFydGlhbCxcbiAgICAgIGFzdGVyaXNrOiAhIWFzdGVyaXNrLFxuICAgICAgcGF0dGVybjogcGF0dGVybiA/IGVzY2FwZUdyb3VwKHBhdHRlcm4pIDogKGFzdGVyaXNrID8gJy4qJyA6ICdbXicgKyBlc2NhcGVTdHJpbmcoZGVsaW1pdGVyKSArICddKz8nKVxuICAgIH0pXG4gIH1cblxuICAvLyBNYXRjaCBhbnkgY2hhcmFjdGVycyBzdGlsbCByZW1haW5pbmcuXG4gIGlmIChpbmRleCA8IHN0ci5sZW5ndGgpIHtcbiAgICBwYXRoICs9IHN0ci5zdWJzdHIoaW5kZXgpXG4gIH1cblxuICAvLyBJZiB0aGUgcGF0aCBleGlzdHMsIHB1c2ggaXQgb250byB0aGUgZW5kLlxuICBpZiAocGF0aCkge1xuICAgIHRva2Vucy5wdXNoKHBhdGgpXG4gIH1cblxuICByZXR1cm4gdG9rZW5zXG59XG5cbi8qKlxuICogQ29tcGlsZSBhIHN0cmluZyB0byBhIHRlbXBsYXRlIGZ1bmN0aW9uIGZvciB0aGUgcGF0aC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICAgICAgICAgICAgIHN0clxuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshZnVuY3Rpb24oT2JqZWN0PSwgT2JqZWN0PSl9XG4gKi9cbmZ1bmN0aW9uIGNvbXBpbGUgKHN0ciwgb3B0aW9ucykge1xuICByZXR1cm4gdG9rZW5zVG9GdW5jdGlvbihwYXJzZShzdHIsIG9wdGlvbnMpKVxufVxuXG4vKipcbiAqIFByZXR0aWVyIGVuY29kaW5nIG9mIFVSSSBwYXRoIHNlZ21lbnRzLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ31cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IChzdHIpIHtcbiAgcmV0dXJuIGVuY29kZVVSSShzdHIpLnJlcGxhY2UoL1tcXC8/I10vZywgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gJyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpXG4gIH0pXG59XG5cbi8qKlxuICogRW5jb2RlIHRoZSBhc3RlcmlzayBwYXJhbWV0ZXIuIFNpbWlsYXIgdG8gYHByZXR0eWAsIGJ1dCBhbGxvd3Mgc2xhc2hlcy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVuY29kZUFzdGVyaXNrIChzdHIpIHtcbiAgcmV0dXJuIGVuY29kZVVSSShzdHIpLnJlcGxhY2UoL1s/I10vZywgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gJyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpXG4gIH0pXG59XG5cbi8qKlxuICogRXhwb3NlIGEgbWV0aG9kIGZvciB0cmFuc2Zvcm1pbmcgdG9rZW5zIGludG8gdGhlIHBhdGggZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIHRva2Vuc1RvRnVuY3Rpb24gKHRva2Vucykge1xuICAvLyBDb21waWxlIGFsbCB0aGUgdG9rZW5zIGludG8gcmVnZXhwcy5cbiAgdmFyIG1hdGNoZXMgPSBuZXcgQXJyYXkodG9rZW5zLmxlbmd0aClcblxuICAvLyBDb21waWxlIGFsbCB0aGUgcGF0dGVybnMgYmVmb3JlIGNvbXBpbGF0aW9uLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIGlmICh0eXBlb2YgdG9rZW5zW2ldID09PSAnb2JqZWN0Jykge1xuICAgICAgbWF0Y2hlc1tpXSA9IG5ldyBSZWdFeHAoJ14oPzonICsgdG9rZW5zW2ldLnBhdHRlcm4gKyAnKSQnKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAob2JqLCBvcHRzKSB7XG4gICAgdmFyIHBhdGggPSAnJ1xuICAgIHZhciBkYXRhID0gb2JqIHx8IHt9XG4gICAgdmFyIG9wdGlvbnMgPSBvcHRzIHx8IHt9XG4gICAgdmFyIGVuY29kZSA9IG9wdGlvbnMucHJldHR5ID8gZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IDogZW5jb2RlVVJJQ29tcG9uZW50XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHRva2VuID0gdG9rZW5zW2ldXG5cbiAgICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHBhdGggKz0gdG9rZW5cblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICB2YXIgdmFsdWUgPSBkYXRhW3Rva2VuLm5hbWVdXG4gICAgICB2YXIgc2VnbWVudFxuXG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgICAvLyBQcmVwZW5kIHBhcnRpYWwgc2VnbWVudCBwcmVmaXhlcy5cbiAgICAgICAgICBpZiAodG9rZW4ucGFydGlhbCkge1xuICAgICAgICAgICAgcGF0aCArPSB0b2tlbi5wcmVmaXhcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gYmUgZGVmaW5lZCcpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGlzYXJyYXkodmFsdWUpKSB7XG4gICAgICAgIGlmICghdG9rZW4ucmVwZWF0KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBub3QgcmVwZWF0LCBidXQgcmVjZWl2ZWQgYCcgKyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkgKyAnYCcpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsdWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG5vdCBiZSBlbXB0eScpXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWx1ZS5sZW5ndGg7IGorKykge1xuICAgICAgICAgIHNlZ21lbnQgPSBlbmNvZGUodmFsdWVbal0pXG5cbiAgICAgICAgICBpZiAoIW1hdGNoZXNbaV0udGVzdChzZWdtZW50KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgYWxsIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbWF0Y2ggXCInICsgdG9rZW4ucGF0dGVybiArICdcIiwgYnV0IHJlY2VpdmVkIGAnICsgSlNPTi5zdHJpbmdpZnkoc2VnbWVudCkgKyAnYCcpXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcGF0aCArPSAoaiA9PT0gMCA/IHRva2VuLnByZWZpeCA6IHRva2VuLmRlbGltaXRlcikgKyBzZWdtZW50XG4gICAgICAgIH1cblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICBzZWdtZW50ID0gdG9rZW4uYXN0ZXJpc2sgPyBlbmNvZGVBc3Rlcmlzayh2YWx1ZSkgOiBlbmNvZGUodmFsdWUpXG5cbiAgICAgIGlmICghbWF0Y2hlc1tpXS50ZXN0KHNlZ21lbnQpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbWF0Y2ggXCInICsgdG9rZW4ucGF0dGVybiArICdcIiwgYnV0IHJlY2VpdmVkIFwiJyArIHNlZ21lbnQgKyAnXCInKVxuICAgICAgfVxuXG4gICAgICBwYXRoICs9IHRva2VuLnByZWZpeCArIHNlZ21lbnRcbiAgICB9XG5cbiAgICByZXR1cm4gcGF0aFxuICB9XG59XG5cbi8qKlxuICogRXNjYXBlIGEgcmVndWxhciBleHByZXNzaW9uIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHN0clxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlc2NhcGVTdHJpbmcgKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoLyhbLisqPz1eIToke30oKVtcXF18XFwvXFxcXF0pL2csICdcXFxcJDEnKVxufVxuXG4vKipcbiAqIEVzY2FwZSB0aGUgY2FwdHVyaW5nIGdyb3VwIGJ5IGVzY2FwaW5nIHNwZWNpYWwgY2hhcmFjdGVycyBhbmQgbWVhbmluZy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IGdyb3VwXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVzY2FwZUdyb3VwIChncm91cCkge1xuICByZXR1cm4gZ3JvdXAucmVwbGFjZSgvKFs9ITokXFwvKCldKS9nLCAnXFxcXCQxJylcbn1cblxuLyoqXG4gKiBBdHRhY2ggdGhlIGtleXMgYXMgYSBwcm9wZXJ0eSBvZiB0aGUgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFSZWdFeHB9IHJlXG4gKiBAcGFyYW0gIHtBcnJheX0gICBrZXlzXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBhdHRhY2hLZXlzIChyZSwga2V5cykge1xuICByZS5rZXlzID0ga2V5c1xuICByZXR1cm4gcmVcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGZsYWdzIGZvciBhIHJlZ2V4cCBmcm9tIHRoZSBvcHRpb25zLlxuICpcbiAqIEBwYXJhbSAge09iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBmbGFncyAob3B0aW9ucykge1xuICByZXR1cm4gb3B0aW9ucy5zZW5zaXRpdmUgPyAnJyA6ICdpJ1xufVxuXG4vKipcbiAqIFB1bGwgb3V0IGtleXMgZnJvbSBhIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshUmVnRXhwfSBwYXRoXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBrZXlzXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiByZWdleHBUb1JlZ2V4cCAocGF0aCwga2V5cykge1xuICAvLyBVc2UgYSBuZWdhdGl2ZSBsb29rYWhlYWQgdG8gbWF0Y2ggb25seSBjYXB0dXJpbmcgZ3JvdXBzLlxuICB2YXIgZ3JvdXBzID0gcGF0aC5zb3VyY2UubWF0Y2goL1xcKCg/IVxcPykvZylcblxuICBpZiAoZ3JvdXBzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBncm91cHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleXMucHVzaCh7XG4gICAgICAgIG5hbWU6IGksXG4gICAgICAgIHByZWZpeDogbnVsbCxcbiAgICAgICAgZGVsaW1pdGVyOiBudWxsLFxuICAgICAgICBvcHRpb25hbDogZmFsc2UsXG4gICAgICAgIHJlcGVhdDogZmFsc2UsXG4gICAgICAgIHBhcnRpYWw6IGZhbHNlLFxuICAgICAgICBhc3RlcmlzazogZmFsc2UsXG4gICAgICAgIHBhdHRlcm46IG51bGxcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGF0dGFjaEtleXMocGF0aCwga2V5cylcbn1cblxuLyoqXG4gKiBUcmFuc2Zvcm0gYW4gYXJyYXkgaW50byBhIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBwYXRoXG4gKiBAcGFyYW0gIHtBcnJheX0gICBrZXlzXG4gKiBAcGFyYW0gIHshT2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBhcnJheVRvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIHZhciBwYXJ0cyA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoLmxlbmd0aDsgaSsrKSB7XG4gICAgcGFydHMucHVzaChwYXRoVG9SZWdleHAocGF0aFtpXSwga2V5cywgb3B0aW9ucykuc291cmNlKVxuICB9XG5cbiAgdmFyIHJlZ2V4cCA9IG5ldyBSZWdFeHAoJyg/OicgKyBwYXJ0cy5qb2luKCd8JykgKyAnKScsIGZsYWdzKG9wdGlvbnMpKVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKHJlZ2V4cCwga2V5cylcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBwYXRoIHJlZ2V4cCBmcm9tIHN0cmluZyBpbnB1dC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICBwYXRoXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBrZXlzXG4gKiBAcGFyYW0gIHshT2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBzdHJpbmdUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICByZXR1cm4gdG9rZW5zVG9SZWdFeHAocGFyc2UocGF0aCwgb3B0aW9ucyksIGtleXMsIG9wdGlvbnMpXG59XG5cbi8qKlxuICogRXhwb3NlIGEgZnVuY3Rpb24gZm9yIHRha2luZyB0b2tlbnMgYW5kIHJldHVybmluZyBhIFJlZ0V4cC5cbiAqXG4gKiBAcGFyYW0gIHshQXJyYXl9ICAgICAgICAgIHRva2Vuc1xuICogQHBhcmFtICB7KEFycmF5fE9iamVjdCk9fSBrZXlzXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHRva2Vuc1RvUmVnRXhwICh0b2tlbnMsIGtleXMsIG9wdGlvbnMpIHtcbiAgaWYgKCFpc2FycmF5KGtleXMpKSB7XG4gICAgb3B0aW9ucyA9IC8qKiBAdHlwZSB7IU9iamVjdH0gKi8gKGtleXMgfHwgb3B0aW9ucylcbiAgICBrZXlzID0gW11cbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG5cbiAgdmFyIHN0cmljdCA9IG9wdGlvbnMuc3RyaWN0XG4gIHZhciBlbmQgPSBvcHRpb25zLmVuZCAhPT0gZmFsc2VcbiAgdmFyIHJvdXRlID0gJydcblxuICAvLyBJdGVyYXRlIG92ZXIgdGhlIHRva2VucyBhbmQgY3JlYXRlIG91ciByZWdleHAgc3RyaW5nLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXVxuXG4gICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJvdXRlICs9IGVzY2FwZVN0cmluZyh0b2tlbilcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHByZWZpeCA9IGVzY2FwZVN0cmluZyh0b2tlbi5wcmVmaXgpXG4gICAgICB2YXIgY2FwdHVyZSA9ICcoPzonICsgdG9rZW4ucGF0dGVybiArICcpJ1xuXG4gICAgICBrZXlzLnB1c2godG9rZW4pXG5cbiAgICAgIGlmICh0b2tlbi5yZXBlYXQpIHtcbiAgICAgICAgY2FwdHVyZSArPSAnKD86JyArIHByZWZpeCArIGNhcHR1cmUgKyAnKSonXG4gICAgICB9XG5cbiAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICBpZiAoIXRva2VuLnBhcnRpYWwpIHtcbiAgICAgICAgICBjYXB0dXJlID0gJyg/OicgKyBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJykpPydcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYXB0dXJlID0gcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpPydcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FwdHVyZSA9IHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKSdcbiAgICAgIH1cblxuICAgICAgcm91dGUgKz0gY2FwdHVyZVxuICAgIH1cbiAgfVxuXG4gIHZhciBkZWxpbWl0ZXIgPSBlc2NhcGVTdHJpbmcob3B0aW9ucy5kZWxpbWl0ZXIgfHwgJy8nKVxuICB2YXIgZW5kc1dpdGhEZWxpbWl0ZXIgPSByb3V0ZS5zbGljZSgtZGVsaW1pdGVyLmxlbmd0aCkgPT09IGRlbGltaXRlclxuXG4gIC8vIEluIG5vbi1zdHJpY3QgbW9kZSB3ZSBhbGxvdyBhIHNsYXNoIGF0IHRoZSBlbmQgb2YgbWF0Y2guIElmIHRoZSBwYXRoIHRvXG4gIC8vIG1hdGNoIGFscmVhZHkgZW5kcyB3aXRoIGEgc2xhc2gsIHdlIHJlbW92ZSBpdCBmb3IgY29uc2lzdGVuY3kuIFRoZSBzbGFzaFxuICAvLyBpcyB2YWxpZCBhdCB0aGUgZW5kIG9mIGEgcGF0aCBtYXRjaCwgbm90IGluIHRoZSBtaWRkbGUuIFRoaXMgaXMgaW1wb3J0YW50XG4gIC8vIGluIG5vbi1lbmRpbmcgbW9kZSwgd2hlcmUgXCIvdGVzdC9cIiBzaG91bGRuJ3QgbWF0Y2ggXCIvdGVzdC8vcm91dGVcIi5cbiAgaWYgKCFzdHJpY3QpIHtcbiAgICByb3V0ZSA9IChlbmRzV2l0aERlbGltaXRlciA/IHJvdXRlLnNsaWNlKDAsIC1kZWxpbWl0ZXIubGVuZ3RoKSA6IHJvdXRlKSArICcoPzonICsgZGVsaW1pdGVyICsgJyg/PSQpKT8nXG4gIH1cblxuICBpZiAoZW5kKSB7XG4gICAgcm91dGUgKz0gJyQnXG4gIH0gZWxzZSB7XG4gICAgLy8gSW4gbm9uLWVuZGluZyBtb2RlLCB3ZSBuZWVkIHRoZSBjYXB0dXJpbmcgZ3JvdXBzIHRvIG1hdGNoIGFzIG11Y2ggYXNcbiAgICAvLyBwb3NzaWJsZSBieSB1c2luZyBhIHBvc2l0aXZlIGxvb2thaGVhZCB0byB0aGUgZW5kIG9yIG5leHQgcGF0aCBzZWdtZW50LlxuICAgIHJvdXRlICs9IHN0cmljdCAmJiBlbmRzV2l0aERlbGltaXRlciA/ICcnIDogJyg/PScgKyBkZWxpbWl0ZXIgKyAnfCQpJ1xuICB9XG5cbiAgcmV0dXJuIGF0dGFjaEtleXMobmV3IFJlZ0V4cCgnXicgKyByb3V0ZSwgZmxhZ3Mob3B0aW9ucykpLCBrZXlzKVxufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSB0aGUgZ2l2ZW4gcGF0aCBzdHJpbmcsIHJldHVybmluZyBhIHJlZ3VsYXIgZXhwcmVzc2lvbi5cbiAqXG4gKiBBbiBlbXB0eSBhcnJheSBjYW4gYmUgcGFzc2VkIGluIGZvciB0aGUga2V5cywgd2hpY2ggd2lsbCBob2xkIHRoZVxuICogcGxhY2Vob2xkZXIga2V5IGRlc2NyaXB0aW9ucy4gRm9yIGV4YW1wbGUsIHVzaW5nIGAvdXNlci86aWRgLCBga2V5c2Agd2lsbFxuICogY29udGFpbiBgW3sgbmFtZTogJ2lkJywgZGVsaW1pdGVyOiAnLycsIG9wdGlvbmFsOiBmYWxzZSwgcmVwZWF0OiBmYWxzZSB9XWAuXG4gKlxuICogQHBhcmFtICB7KHN0cmluZ3xSZWdFeHB8QXJyYXkpfSBwYXRoXG4gKiBAcGFyYW0gIHsoQXJyYXl8T2JqZWN0KT19ICAgICAgIGtleXNcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gcGF0aFRvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIGlmICghaXNhcnJheShrZXlzKSkge1xuICAgIG9wdGlvbnMgPSAvKiogQHR5cGUgeyFPYmplY3R9ICovIChrZXlzIHx8IG9wdGlvbnMpXG4gICAga2V5cyA9IFtdXG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuXG4gIGlmIChwYXRoIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgcmV0dXJuIHJlZ2V4cFRvUmVnZXhwKHBhdGgsIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cykpXG4gIH1cblxuICBpZiAoaXNhcnJheShwYXRoKSkge1xuICAgIHJldHVybiBhcnJheVRvUmVnZXhwKC8qKiBAdHlwZSB7IUFycmF5fSAqLyAocGF0aCksIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cyksIG9wdGlvbnMpXG4gIH1cblxuICByZXR1cm4gc3RyaW5nVG9SZWdleHAoLyoqIEB0eXBlIHtzdHJpbmd9ICovIChwYXRoKSwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSwgb3B0aW9ucylcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMTIuMFxuICogcmVhY3QucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGg9cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksbj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLHA9bj9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxxPW4/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixyPW4/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LHQ9bj9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsdT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCx2PW4/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LHc9bj9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCx4PW4/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHk9bj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTM7biYmU3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIik7XG52YXIgej1uP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOjYwMTE1LGFhPW4/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6NjAxMTY7biYmU3ltYm9sLmZvcihcInJlYWN0LmZ1bmRhbWVudGFsXCIpO24mJlN5bWJvbC5mb3IoXCJyZWFjdC5yZXNwb25kZXJcIik7biYmU3ltYm9sLmZvcihcInJlYWN0LnNjb3BlXCIpO3ZhciBBPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtcbmZ1bmN0aW9uIEIoYSl7Zm9yKHZhciBiPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKyliKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjXSk7cmV0dXJuXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgXCIrYitcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCJ9dmFyIEM9e2lzTW91bnRlZDpmdW5jdGlvbigpe3JldHVybiExfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbigpe319LEQ9e307XG5mdW5jdGlvbiBFKGEsYixjKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUQ7dGhpcy51cGRhdGVyPWN8fEN9RS5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD17fTtFLnByb3RvdHlwZS5zZXRTdGF0ZT1mdW5jdGlvbihhLGIpe2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJm51bGwhPWEpdGhyb3cgRXJyb3IoQig4NSkpO3RoaXMudXBkYXRlci5lbnF1ZXVlU2V0U3RhdGUodGhpcyxhLGIsXCJzZXRTdGF0ZVwiKX07RS5wcm90b3R5cGUuZm9yY2VVcGRhdGU9ZnVuY3Rpb24oYSl7dGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzLGEsXCJmb3JjZVVwZGF0ZVwiKX07ZnVuY3Rpb24gRigpe31GLnByb3RvdHlwZT1FLnByb3RvdHlwZTtmdW5jdGlvbiBHKGEsYixjKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUQ7dGhpcy51cGRhdGVyPWN8fEN9dmFyIEg9Ry5wcm90b3R5cGU9bmV3IEY7XG5ILmNvbnN0cnVjdG9yPUc7aChILEUucHJvdG90eXBlKTtILmlzUHVyZVJlYWN0Q29tcG9uZW50PSEwO3ZhciBJPXtjdXJyZW50Om51bGx9LEo9e2N1cnJlbnQ6bnVsbH0sSz1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LEw9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIE0oYSxiLGMpe3ZhciBlLGQ9e30sZz1udWxsLGw9bnVsbDtpZihudWxsIT1iKWZvcihlIGluIHZvaWQgMCE9PWIucmVmJiYobD1iLnJlZiksdm9pZCAwIT09Yi5rZXkmJihnPVwiXCIrYi5rZXkpLGIpSy5jYWxsKGIsZSkmJiFMLmhhc093blByb3BlcnR5KGUpJiYoZFtlXT1iW2VdKTt2YXIgZj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWYpZC5jaGlsZHJlbj1jO2Vsc2UgaWYoMTxmKXtmb3IodmFyIGs9QXJyYXkoZiksbT0wO208ZjttKyspa1ttXT1hcmd1bWVudHNbbSsyXTtkLmNoaWxkcmVuPWt9aWYoYSYmYS5kZWZhdWx0UHJvcHMpZm9yKGUgaW4gZj1hLmRlZmF1bHRQcm9wcyxmKXZvaWQgMD09PWRbZV0mJihkW2VdPWZbZV0pO3JldHVybnskJHR5cGVvZjpwLHR5cGU6YSxrZXk6ZyxyZWY6bCxwcm9wczpkLF9vd25lcjpKLmN1cnJlbnR9fVxuZnVuY3Rpb24gYmEoYSxiKXtyZXR1cm57JCR0eXBlb2Y6cCx0eXBlOmEudHlwZSxrZXk6YixyZWY6YS5yZWYscHJvcHM6YS5wcm9wcyxfb3duZXI6YS5fb3duZXJ9fWZ1bmN0aW9uIE4oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PXB9ZnVuY3Rpb24gZXNjYXBlKGEpe3ZhciBiPXtcIj1cIjpcIj0wXCIsXCI6XCI6XCI9MlwifTtyZXR1cm5cIiRcIisoXCJcIithKS5yZXBsYWNlKC9bPTpdL2csZnVuY3Rpb24oYSl7cmV0dXJuIGJbYV19KX12YXIgTz0vXFwvKy9nLFA9W107ZnVuY3Rpb24gUShhLGIsYyxlKXtpZihQLmxlbmd0aCl7dmFyIGQ9UC5wb3AoKTtkLnJlc3VsdD1hO2Qua2V5UHJlZml4PWI7ZC5mdW5jPWM7ZC5jb250ZXh0PWU7ZC5jb3VudD0wO3JldHVybiBkfXJldHVybntyZXN1bHQ6YSxrZXlQcmVmaXg6YixmdW5jOmMsY29udGV4dDplLGNvdW50OjB9fVxuZnVuY3Rpb24gUihhKXthLnJlc3VsdD1udWxsO2Eua2V5UHJlZml4PW51bGw7YS5mdW5jPW51bGw7YS5jb250ZXh0PW51bGw7YS5jb3VudD0wOzEwPlAubGVuZ3RoJiZQLnB1c2goYSl9XG5mdW5jdGlvbiBTKGEsYixjLGUpe3ZhciBkPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1kfHxcImJvb2xlYW5cIj09PWQpYT1udWxsO3ZhciBnPSExO2lmKG51bGw9PT1hKWc9ITA7ZWxzZSBzd2l0Y2goZCl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpnPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBwOmNhc2UgcTpnPSEwfX1pZihnKXJldHVybiBjKGUsYSxcIlwiPT09Yj9cIi5cIitUKGEsMCk6YiksMTtnPTA7Yj1cIlwiPT09Yj9cIi5cIjpiK1wiOlwiO2lmKEFycmF5LmlzQXJyYXkoYSkpZm9yKHZhciBsPTA7bDxhLmxlbmd0aDtsKyspe2Q9YVtsXTt2YXIgZj1iK1QoZCxsKTtnKz1TKGQsZixjLGUpfWVsc2UgaWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYT9mPW51bGw6KGY9QSYmYVtBXXx8YVtcIkBAaXRlcmF0b3JcIl0sZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgZj9mOm51bGwpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmKWZvcihhPWYuY2FsbChhKSxsPVxuMDshKGQ9YS5uZXh0KCkpLmRvbmU7KWQ9ZC52YWx1ZSxmPWIrVChkLGwrKyksZys9UyhkLGYsYyxlKTtlbHNlIGlmKFwib2JqZWN0XCI9PT1kKXRocm93IGM9XCJcIithLEVycm9yKEIoMzEsXCJbb2JqZWN0IE9iamVjdF1cIj09PWM/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhhKS5qb2luKFwiLCBcIikrXCJ9XCI6YyxcIlwiKSk7cmV0dXJuIGd9ZnVuY3Rpb24gVShhLGIsYyl7cmV0dXJuIG51bGw9PWE/MDpTKGEsXCJcIixiLGMpfWZ1bmN0aW9uIFQoYSxiKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZudWxsIT1hLmtleT9lc2NhcGUoYS5rZXkpOmIudG9TdHJpbmcoMzYpfWZ1bmN0aW9uIGNhKGEsYil7YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKX1cbmZ1bmN0aW9uIGRhKGEsYixjKXt2YXIgZT1hLnJlc3VsdCxkPWEua2V5UHJlZml4O2E9YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKTtBcnJheS5pc0FycmF5KGEpP1YoYSxlLGMsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KTpudWxsIT1hJiYoTihhKSYmKGE9YmEoYSxkKyghYS5rZXl8fGImJmIua2V5PT09YS5rZXk/XCJcIjooXCJcIithLmtleSkucmVwbGFjZShPLFwiJCYvXCIpK1wiL1wiKStjKSksZS5wdXNoKGEpKX1mdW5jdGlvbiBWKGEsYixjLGUsZCl7dmFyIGc9XCJcIjtudWxsIT1jJiYoZz0oXCJcIitjKS5yZXBsYWNlKE8sXCIkJi9cIikrXCIvXCIpO2I9UShiLGcsZSxkKTtVKGEsZGEsYik7UihiKX1mdW5jdGlvbiBXKCl7dmFyIGE9SS5jdXJyZW50O2lmKG51bGw9PT1hKXRocm93IEVycm9yKEIoMzIxKSk7cmV0dXJuIGF9XG52YXIgWD17Q2hpbGRyZW46e21hcDpmdW5jdGlvbihhLGIsYyl7aWYobnVsbD09YSlyZXR1cm4gYTt2YXIgZT1bXTtWKGEsZSxudWxsLGIsYyk7cmV0dXJuIGV9LGZvckVhY2g6ZnVuY3Rpb24oYSxiLGMpe2lmKG51bGw9PWEpcmV0dXJuIGE7Yj1RKG51bGwsbnVsbCxiLGMpO1UoYSxjYSxiKTtSKGIpfSxjb3VudDpmdW5jdGlvbihhKXtyZXR1cm4gVShhLGZ1bmN0aW9uKCl7cmV0dXJuIG51bGx9LG51bGwpfSx0b0FycmF5OmZ1bmN0aW9uKGEpe3ZhciBiPVtdO1YoYSxiLG51bGwsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KTtyZXR1cm4gYn0sb25seTpmdW5jdGlvbihhKXtpZighTihhKSl0aHJvdyBFcnJvcihCKDE0MykpO3JldHVybiBhfX0sY3JlYXRlUmVmOmZ1bmN0aW9uKCl7cmV0dXJue2N1cnJlbnQ6bnVsbH19LENvbXBvbmVudDpFLFB1cmVDb21wb25lbnQ6RyxjcmVhdGVDb250ZXh0OmZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YiYmKGI9bnVsbCk7YT17JCR0eXBlb2Y6dyxfY2FsY3VsYXRlQ2hhbmdlZEJpdHM6Yixcbl9jdXJyZW50VmFsdWU6YSxfY3VycmVudFZhbHVlMjphLF90aHJlYWRDb3VudDowLFByb3ZpZGVyOm51bGwsQ29uc3VtZXI6bnVsbH07YS5Qcm92aWRlcj17JCR0eXBlb2Y6dixfY29udGV4dDphfTtyZXR1cm4gYS5Db25zdW1lcj1hfSxmb3J3YXJkUmVmOmZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp4LHJlbmRlcjphfX0sbGF6eTpmdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6YWEsX2N0b3I6YSxfc3RhdHVzOi0xLF9yZXN1bHQ6bnVsbH19LG1lbW86ZnVuY3Rpb24oYSxiKXtyZXR1cm57JCR0eXBlb2Y6eix0eXBlOmEsY29tcGFyZTp2b2lkIDA9PT1iP251bGw6Yn19LHVzZUNhbGxiYWNrOmZ1bmN0aW9uKGEsYil7cmV0dXJuIFcoKS51c2VDYWxsYmFjayhhLGIpfSx1c2VDb250ZXh0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIFcoKS51c2VDb250ZXh0KGEsYil9LHVzZUVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBXKCkudXNlRWZmZWN0KGEsYil9LHVzZUltcGVyYXRpdmVIYW5kbGU6ZnVuY3Rpb24oYSxcbmIsYyl7cmV0dXJuIFcoKS51c2VJbXBlcmF0aXZlSGFuZGxlKGEsYixjKX0sdXNlRGVidWdWYWx1ZTpmdW5jdGlvbigpe30sdXNlTGF5b3V0RWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIFcoKS51c2VMYXlvdXRFZmZlY3QoYSxiKX0sdXNlTWVtbzpmdW5jdGlvbihhLGIpe3JldHVybiBXKCkudXNlTWVtbyhhLGIpfSx1c2VSZWR1Y2VyOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gVygpLnVzZVJlZHVjZXIoYSxiLGMpfSx1c2VSZWY6ZnVuY3Rpb24oYSl7cmV0dXJuIFcoKS51c2VSZWYoYSl9LHVzZVN0YXRlOmZ1bmN0aW9uKGEpe3JldHVybiBXKCkudXNlU3RhdGUoYSl9LEZyYWdtZW50OnIsUHJvZmlsZXI6dSxTdHJpY3RNb2RlOnQsU3VzcGVuc2U6eSxjcmVhdGVFbGVtZW50Ok0sY2xvbmVFbGVtZW50OmZ1bmN0aW9uKGEsYixjKXtpZihudWxsPT09YXx8dm9pZCAwPT09YSl0aHJvdyBFcnJvcihCKDI2NyxhKSk7dmFyIGU9aCh7fSxhLnByb3BzKSxkPWEua2V5LGc9YS5yZWYsbD1hLl9vd25lcjtcbmlmKG51bGwhPWIpe3ZvaWQgMCE9PWIucmVmJiYoZz1iLnJlZixsPUouY3VycmVudCk7dm9pZCAwIT09Yi5rZXkmJihkPVwiXCIrYi5rZXkpO2lmKGEudHlwZSYmYS50eXBlLmRlZmF1bHRQcm9wcyl2YXIgZj1hLnR5cGUuZGVmYXVsdFByb3BzO2ZvcihrIGluIGIpSy5jYWxsKGIsaykmJiFMLmhhc093blByb3BlcnR5KGspJiYoZVtrXT12b2lkIDA9PT1iW2tdJiZ2b2lkIDAhPT1mP2Zba106YltrXSl9dmFyIGs9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1rKWUuY2hpbGRyZW49YztlbHNlIGlmKDE8ayl7Zj1BcnJheShrKTtmb3IodmFyIG09MDttPGs7bSsrKWZbbV09YXJndW1lbnRzW20rMl07ZS5jaGlsZHJlbj1mfXJldHVybnskJHR5cGVvZjpwLHR5cGU6YS50eXBlLGtleTpkLHJlZjpnLHByb3BzOmUsX293bmVyOmx9fSxjcmVhdGVGYWN0b3J5OmZ1bmN0aW9uKGEpe3ZhciBiPU0uYmluZChudWxsLGEpO2IudHlwZT1hO3JldHVybiBifSxpc1ZhbGlkRWxlbWVudDpOLHZlcnNpb246XCIxNi4xMi4wXCIsXG5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDp7UmVhY3RDdXJyZW50RGlzcGF0Y2hlcjpJLFJlYWN0Q3VycmVudEJhdGNoQ29uZmlnOntzdXNwZW5zZTpudWxsfSxSZWFjdEN1cnJlbnRPd25lcjpKLElzU29tZVJlbmRlcmVyQWN0aW5nOntjdXJyZW50OiExfSxhc3NpZ246aH19LFk9e2RlZmF1bHQ6WH0sWj1ZJiZYfHxZO21vZHVsZS5leHBvcnRzPVouZGVmYXVsdHx8WjtcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMTIuMFxuICogcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuLypcbiBNb2Rlcm5penIgMy4wLjBwcmUgKEN1c3RvbSBCdWlsZCkgfCBNSVRcbiovXG4ndXNlIHN0cmljdCc7dmFyIGFhPXJlcXVpcmUoXCJyZWFjdFwiKSxuPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLHE9cmVxdWlyZShcInNjaGVkdWxlclwiKTtmdW5jdGlvbiB1KGEpe2Zvcih2YXIgYj1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsYz0xO2M8YXJndW1lbnRzLmxlbmd0aDtjKyspYis9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbY10pO3JldHVyblwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0IFwiK2IrXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwifWlmKCFhYSl0aHJvdyBFcnJvcih1KDIyNykpO3ZhciBiYT1udWxsLGNhPXt9O1xuZnVuY3Rpb24gZGEoKXtpZihiYSlmb3IodmFyIGEgaW4gY2Epe3ZhciBiPWNhW2FdLGM9YmEuaW5kZXhPZihhKTtpZighKC0xPGMpKXRocm93IEVycm9yKHUoOTYsYSkpO2lmKCFlYVtjXSl7aWYoIWIuZXh0cmFjdEV2ZW50cyl0aHJvdyBFcnJvcih1KDk3LGEpKTtlYVtjXT1iO2M9Yi5ldmVudFR5cGVzO2Zvcih2YXIgZCBpbiBjKXt2YXIgZT12b2lkIDA7dmFyIGY9Y1tkXSxnPWIsaD1kO2lmKGZhLmhhc093blByb3BlcnR5KGgpKXRocm93IEVycm9yKHUoOTksaCkpO2ZhW2hdPWY7dmFyIGs9Zi5waGFzZWRSZWdpc3RyYXRpb25OYW1lcztpZihrKXtmb3IoZSBpbiBrKWsuaGFzT3duUHJvcGVydHkoZSkmJmhhKGtbZV0sZyxoKTtlPSEwfWVsc2UgZi5yZWdpc3RyYXRpb25OYW1lPyhoYShmLnJlZ2lzdHJhdGlvbk5hbWUsZyxoKSxlPSEwKTplPSExO2lmKCFlKXRocm93IEVycm9yKHUoOTgsZCxhKSk7fX19fVxuZnVuY3Rpb24gaGEoYSxiLGMpe2lmKGlhW2FdKXRocm93IEVycm9yKHUoMTAwLGEpKTtpYVthXT1iO2phW2FdPWIuZXZlbnRUeXBlc1tjXS5kZXBlbmRlbmNpZXN9dmFyIGVhPVtdLGZhPXt9LGlhPXt9LGphPXt9O2Z1bmN0aW9uIGthKGEsYixjLGQsZSxmLGcsaCxrKXt2YXIgbD1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMyk7dHJ5e2IuYXBwbHkoYyxsKX1jYXRjaChtKXt0aGlzLm9uRXJyb3IobSl9fXZhciBsYT0hMSxtYT1udWxsLG5hPSExLG9hPW51bGwscGE9e29uRXJyb3I6ZnVuY3Rpb24oYSl7bGE9ITA7bWE9YX19O2Z1bmN0aW9uIHFhKGEsYixjLGQsZSxmLGcsaCxrKXtsYT0hMTttYT1udWxsO2thLmFwcGx5KHBhLGFyZ3VtZW50cyl9XG5mdW5jdGlvbiByYShhLGIsYyxkLGUsZixnLGgsayl7cWEuYXBwbHkodGhpcyxhcmd1bWVudHMpO2lmKGxhKXtpZihsYSl7dmFyIGw9bWE7bGE9ITE7bWE9bnVsbH1lbHNlIHRocm93IEVycm9yKHUoMTk4KSk7bmF8fChuYT0hMCxvYT1sKX19dmFyIHNhPW51bGwsdWE9bnVsbCx2YT1udWxsO2Z1bmN0aW9uIHdhKGEsYixjKXt2YXIgZD1hLnR5cGV8fFwidW5rbm93bi1ldmVudFwiO2EuY3VycmVudFRhcmdldD12YShjKTtyYShkLGIsdm9pZCAwLGEpO2EuY3VycmVudFRhcmdldD1udWxsfWZ1bmN0aW9uIHhhKGEsYil7aWYobnVsbD09Yil0aHJvdyBFcnJvcih1KDMwKSk7aWYobnVsbD09YSlyZXR1cm4gYjtpZihBcnJheS5pc0FycmF5KGEpKXtpZihBcnJheS5pc0FycmF5KGIpKXJldHVybiBhLnB1c2guYXBwbHkoYSxiKSxhO2EucHVzaChiKTtyZXR1cm4gYX1yZXR1cm4gQXJyYXkuaXNBcnJheShiKT9bYV0uY29uY2F0KGIpOlthLGJdfVxuZnVuY3Rpb24geWEoYSxiLGMpe0FycmF5LmlzQXJyYXkoYSk/YS5mb3JFYWNoKGIsYyk6YSYmYi5jYWxsKGMsYSl9dmFyIHphPW51bGw7ZnVuY3Rpb24gQWEoYSl7aWYoYSl7dmFyIGI9YS5fZGlzcGF0Y2hMaXN0ZW5lcnMsYz1hLl9kaXNwYXRjaEluc3RhbmNlcztpZihBcnJheS5pc0FycmF5KGIpKWZvcih2YXIgZD0wO2Q8Yi5sZW5ndGgmJiFhLmlzUHJvcGFnYXRpb25TdG9wcGVkKCk7ZCsrKXdhKGEsYltkXSxjW2RdKTtlbHNlIGImJndhKGEsYixjKTthLl9kaXNwYXRjaExpc3RlbmVycz1udWxsO2EuX2Rpc3BhdGNoSW5zdGFuY2VzPW51bGw7YS5pc1BlcnNpc3RlbnQoKXx8YS5jb25zdHJ1Y3Rvci5yZWxlYXNlKGEpfX1mdW5jdGlvbiBCYShhKXtudWxsIT09YSYmKHphPXhhKHphLGEpKTthPXphO3phPW51bGw7aWYoYSl7eWEoYSxBYSk7aWYoemEpdGhyb3cgRXJyb3IodSg5NSkpO2lmKG5hKXRocm93IGE9b2EsbmE9ITEsb2E9bnVsbCxhO319XG52YXIgQ2E9e2luamVjdEV2ZW50UGx1Z2luT3JkZXI6ZnVuY3Rpb24oYSl7aWYoYmEpdGhyb3cgRXJyb3IodSgxMDEpKTtiYT1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhKTtkYSgpfSxpbmplY3RFdmVudFBsdWdpbnNCeU5hbWU6ZnVuY3Rpb24oYSl7dmFyIGI9ITEsYztmb3IoYyBpbiBhKWlmKGEuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPWFbY107aWYoIWNhLmhhc093blByb3BlcnR5KGMpfHxjYVtjXSE9PWQpe2lmKGNhW2NdKXRocm93IEVycm9yKHUoMTAyLGMpKTtjYVtjXT1kO2I9ITB9fWImJmRhKCl9fTtcbmZ1bmN0aW9uIERhKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7aWYoIWMpcmV0dXJuIG51bGw7dmFyIGQ9c2EoYyk7aWYoIWQpcmV0dXJuIG51bGw7Yz1kW2JdO2E6c3dpdGNoKGIpe2Nhc2UgXCJvbkNsaWNrXCI6Y2FzZSBcIm9uQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tcIjpjYXNlIFwib25Eb3VibGVDbGlja0NhcHR1cmVcIjpjYXNlIFwib25Nb3VzZURvd25cIjpjYXNlIFwib25Nb3VzZURvd25DYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlVXBcIjpjYXNlIFwib25Nb3VzZVVwQ2FwdHVyZVwiOihkPSFkLmRpc2FibGVkKXx8KGE9YS50eXBlLGQ9IShcImJ1dHRvblwiPT09YXx8XCJpbnB1dFwiPT09YXx8XCJzZWxlY3RcIj09PWF8fFwidGV4dGFyZWFcIj09PWEpKTthPSFkO2JyZWFrIGE7ZGVmYXVsdDphPSExfWlmKGEpcmV0dXJuIG51bGw7aWYoYyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGMpdGhyb3cgRXJyb3IodSgyMzEsYix0eXBlb2YgYykpO1xucmV0dXJuIGN9dmFyIEVhPWFhLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEO0VhLmhhc093blByb3BlcnR5KFwiUmVhY3RDdXJyZW50RGlzcGF0Y2hlclwiKXx8KEVhLlJlYWN0Q3VycmVudERpc3BhdGNoZXI9e2N1cnJlbnQ6bnVsbH0pO0VhLmhhc093blByb3BlcnR5KFwiUmVhY3RDdXJyZW50QmF0Y2hDb25maWdcIil8fChFYS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZz17c3VzcGVuc2U6bnVsbH0pO1xudmFyIEZhPS9eKC4qKVtcXFxcXFwvXS8sdz1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLEdhPXc/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsSGE9dz9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LElhPXc/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LEphPXc/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LEthPXc/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LExhPXc/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LE1hPXc/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsTmE9dz9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLE9hPXc/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLFBhPXc/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpOjYwMTEzLFFhPXc/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIik6XG42MDEyMCxSYT13P1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOjYwMTE1LFNhPXc/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6NjAxMTY7dyYmU3ltYm9sLmZvcihcInJlYWN0LmZ1bmRhbWVudGFsXCIpO3cmJlN5bWJvbC5mb3IoXCJyZWFjdC5yZXNwb25kZXJcIik7dyYmU3ltYm9sLmZvcihcInJlYWN0LnNjb3BlXCIpO3ZhciBUYT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gVWEoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPVRhJiZhW1RhXXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfVxuZnVuY3Rpb24gVmEoYSl7aWYoLTE9PT1hLl9zdGF0dXMpe2EuX3N0YXR1cz0wO3ZhciBiPWEuX2N0b3I7Yj1iKCk7YS5fcmVzdWx0PWI7Yi50aGVuKGZ1bmN0aW9uKGIpezA9PT1hLl9zdGF0dXMmJihiPWIuZGVmYXVsdCxhLl9zdGF0dXM9MSxhLl9yZXN1bHQ9Yil9LGZ1bmN0aW9uKGIpezA9PT1hLl9zdGF0dXMmJihhLl9zdGF0dXM9MixhLl9yZXN1bHQ9Yil9KX19XG5mdW5jdGlvbiBXYShhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBhLmRpc3BsYXlOYW1lfHxhLm5hbWV8fG51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKXJldHVybiBhO3N3aXRjaChhKXtjYXNlIElhOnJldHVyblwiRnJhZ21lbnRcIjtjYXNlIEhhOnJldHVyblwiUG9ydGFsXCI7Y2FzZSBLYTpyZXR1cm5cIlByb2ZpbGVyXCI7Y2FzZSBKYTpyZXR1cm5cIlN0cmljdE1vZGVcIjtjYXNlIFBhOnJldHVyblwiU3VzcGVuc2VcIjtjYXNlIFFhOnJldHVyblwiU3VzcGVuc2VMaXN0XCJ9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIE1hOnJldHVyblwiQ29udGV4dC5Db25zdW1lclwiO2Nhc2UgTGE6cmV0dXJuXCJDb250ZXh0LlByb3ZpZGVyXCI7Y2FzZSBPYTp2YXIgYj1hLnJlbmRlcjtiPWIuZGlzcGxheU5hbWV8fGIubmFtZXx8XCJcIjtyZXR1cm4gYS5kaXNwbGF5TmFtZXx8KFwiXCIhPT1iP1wiRm9yd2FyZFJlZihcIitiK1wiKVwiOlxuXCJGb3J3YXJkUmVmXCIpO2Nhc2UgUmE6cmV0dXJuIFdhKGEudHlwZSk7Y2FzZSBTYTppZihhPTE9PT1hLl9zdGF0dXM/YS5fcmVzdWx0Om51bGwpcmV0dXJuIFdhKGEpfXJldHVybiBudWxsfWZ1bmN0aW9uIFhhKGEpe3ZhciBiPVwiXCI7ZG97YTpzd2l0Y2goYS50YWcpe2Nhc2UgMzpjYXNlIDQ6Y2FzZSA2OmNhc2UgNzpjYXNlIDEwOmNhc2UgOTp2YXIgYz1cIlwiO2JyZWFrIGE7ZGVmYXVsdDp2YXIgZD1hLl9kZWJ1Z093bmVyLGU9YS5fZGVidWdTb3VyY2UsZj1XYShhLnR5cGUpO2M9bnVsbDtkJiYoYz1XYShkLnR5cGUpKTtkPWY7Zj1cIlwiO2U/Zj1cIiAoYXQgXCIrZS5maWxlTmFtZS5yZXBsYWNlKEZhLFwiXCIpK1wiOlwiK2UubGluZU51bWJlcitcIilcIjpjJiYoZj1cIiAoY3JlYXRlZCBieSBcIitjK1wiKVwiKTtjPVwiXFxuICAgIGluIFwiKyhkfHxcIlVua25vd25cIikrZn1iKz1jO2E9YS5yZXR1cm59d2hpbGUoYSk7cmV0dXJuIGJ9XG52YXIgWWE9IShcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnR8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpLFphPW51bGwsJGE9bnVsbCxhYj1udWxsO2Z1bmN0aW9uIGJiKGEpe2lmKGE9dWEoYSkpe2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBaYSl0aHJvdyBFcnJvcih1KDI4MCkpO3ZhciBiPXNhKGEuc3RhdGVOb2RlKTtaYShhLnN0YXRlTm9kZSxhLnR5cGUsYil9fWZ1bmN0aW9uIGNiKGEpeyRhP2FiP2FiLnB1c2goYSk6YWI9W2FdOiRhPWF9ZnVuY3Rpb24gZGIoKXtpZigkYSl7dmFyIGE9JGEsYj1hYjthYj0kYT1udWxsO2JiKGEpO2lmKGIpZm9yKGE9MDthPGIubGVuZ3RoO2ErKyliYihiW2FdKX19ZnVuY3Rpb24gZWIoYSxiKXtyZXR1cm4gYShiKX1mdW5jdGlvbiBmYihhLGIsYyxkKXtyZXR1cm4gYShiLGMsZCl9ZnVuY3Rpb24gZ2IoKXt9XG52YXIgaGI9ZWIsaWI9ITEsamI9ITE7ZnVuY3Rpb24ga2IoKXtpZihudWxsIT09JGF8fG51bGwhPT1hYilnYigpLGRiKCl9bmV3IE1hcDt2YXIgbGI9L15bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXFwtLjAtOVxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDBdKiQvLG1iPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksbmI9e30sb2I9e307XG5mdW5jdGlvbiBwYihhKXtpZihtYi5jYWxsKG9iLGEpKXJldHVybiEwO2lmKG1iLmNhbGwobmIsYSkpcmV0dXJuITE7aWYobGIudGVzdChhKSlyZXR1cm4gb2JbYV09ITA7bmJbYV09ITA7cmV0dXJuITF9ZnVuY3Rpb24gcWIoYSxiLGMsZCl7aWYobnVsbCE9PWMmJjA9PT1jLnR5cGUpcmV0dXJuITE7c3dpdGNoKHR5cGVvZiBiKXtjYXNlIFwiZnVuY3Rpb25cIjpjYXNlIFwic3ltYm9sXCI6cmV0dXJuITA7Y2FzZSBcImJvb2xlYW5cIjppZihkKXJldHVybiExO2lmKG51bGwhPT1jKXJldHVybiFjLmFjY2VwdHNCb29sZWFuczthPWEudG9Mb3dlckNhc2UoKS5zbGljZSgwLDUpO3JldHVyblwiZGF0YS1cIiE9PWEmJlwiYXJpYS1cIiE9PWE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiByYihhLGIsYyxkKXtpZihudWxsPT09Ynx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBifHxxYihhLGIsYyxkKSlyZXR1cm4hMDtpZihkKXJldHVybiExO2lmKG51bGwhPT1jKXN3aXRjaChjLnR5cGUpe2Nhc2UgMzpyZXR1cm4hYjtjYXNlIDQ6cmV0dXJuITE9PT1iO2Nhc2UgNTpyZXR1cm4gaXNOYU4oYik7Y2FzZSA2OnJldHVybiBpc05hTihiKXx8MT5ifXJldHVybiExfWZ1bmN0aW9uIEIoYSxiLGMsZCxlLGYpe3RoaXMuYWNjZXB0c0Jvb2xlYW5zPTI9PT1ifHwzPT09Ynx8ND09PWI7dGhpcy5hdHRyaWJ1dGVOYW1lPWQ7dGhpcy5hdHRyaWJ1dGVOYW1lc3BhY2U9ZTt0aGlzLm11c3RVc2VQcm9wZXJ0eT1jO3RoaXMucHJvcGVydHlOYW1lPWE7dGhpcy50eXBlPWI7dGhpcy5zYW5pdGl6ZVVSTD1mfXZhciBEPXt9O1xuXCJjaGlsZHJlbiBkYW5nZXJvdXNseVNldElubmVySFRNTCBkZWZhdWx0VmFsdWUgZGVmYXVsdENoZWNrZWQgaW5uZXJIVE1MIHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyBzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgc3R5bGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMCwhMSxhLG51bGwsITEpfSk7W1tcImFjY2VwdENoYXJzZXRcIixcImFjY2VwdC1jaGFyc2V0XCJdLFtcImNsYXNzTmFtZVwiLFwiY2xhc3NcIl0sW1wiaHRtbEZvclwiLFwiZm9yXCJdLFtcImh0dHBFcXVpdlwiLFwiaHR0cC1lcXVpdlwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hWzBdO0RbYl09bmV3IEIoYiwxLCExLGFbMV0sbnVsbCwhMSl9KTtbXCJjb250ZW50RWRpdGFibGVcIixcImRyYWdnYWJsZVwiLFwic3BlbGxDaGVja1wiLFwidmFsdWVcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMiwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSl9KTtcbltcImF1dG9SZXZlcnNlXCIsXCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkXCIsXCJmb2N1c2FibGVcIixcInByZXNlcnZlQWxwaGFcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMiwhMSxhLG51bGwsITEpfSk7XCJhbGxvd0Z1bGxTY3JlZW4gYXN5bmMgYXV0b0ZvY3VzIGF1dG9QbGF5IGNvbnRyb2xzIGRlZmF1bHQgZGVmZXIgZGlzYWJsZWQgZGlzYWJsZVBpY3R1cmVJblBpY3R1cmUgZm9ybU5vVmFsaWRhdGUgaGlkZGVuIGxvb3Agbm9Nb2R1bGUgbm9WYWxpZGF0ZSBvcGVuIHBsYXlzSW5saW5lIHJlYWRPbmx5IHJlcXVpcmVkIHJldmVyc2VkIHNjb3BlZCBzZWFtbGVzcyBpdGVtU2NvcGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMywhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSl9KTtcbltcImNoZWNrZWRcIixcIm11bHRpcGxlXCIsXCJtdXRlZFwiLFwic2VsZWN0ZWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMywhMCxhLG51bGwsITEpfSk7W1wiY2FwdHVyZVwiLFwiZG93bmxvYWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsNCwhMSxhLG51bGwsITEpfSk7W1wiY29sc1wiLFwicm93c1wiLFwic2l6ZVwiLFwic3BhblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSw2LCExLGEsbnVsbCwhMSl9KTtbXCJyb3dTcGFuXCIsXCJzdGFydFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSw1LCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExKX0pO3ZhciBzYj0vW1xcLTpdKFthLXpdKS9nO2Z1bmN0aW9uIHRiKGEpe3JldHVybiBhWzFdLnRvVXBwZXJDYXNlKCl9XG5cImFjY2VudC1oZWlnaHQgYWxpZ25tZW50LWJhc2VsaW5lIGFyYWJpYy1mb3JtIGJhc2VsaW5lLXNoaWZ0IGNhcC1oZWlnaHQgY2xpcC1wYXRoIGNsaXAtcnVsZSBjb2xvci1pbnRlcnBvbGF0aW9uIGNvbG9yLWludGVycG9sYXRpb24tZmlsdGVycyBjb2xvci1wcm9maWxlIGNvbG9yLXJlbmRlcmluZyBkb21pbmFudC1iYXNlbGluZSBlbmFibGUtYmFja2dyb3VuZCBmaWxsLW9wYWNpdHkgZmlsbC1ydWxlIGZsb29kLWNvbG9yIGZsb29kLW9wYWNpdHkgZm9udC1mYW1pbHkgZm9udC1zaXplIGZvbnQtc2l6ZS1hZGp1c3QgZm9udC1zdHJldGNoIGZvbnQtc3R5bGUgZm9udC12YXJpYW50IGZvbnQtd2VpZ2h0IGdseXBoLW5hbWUgZ2x5cGgtb3JpZW50YXRpb24taG9yaXpvbnRhbCBnbHlwaC1vcmllbnRhdGlvbi12ZXJ0aWNhbCBob3Jpei1hZHYteCBob3Jpei1vcmlnaW4teCBpbWFnZS1yZW5kZXJpbmcgbGV0dGVyLXNwYWNpbmcgbGlnaHRpbmctY29sb3IgbWFya2VyLWVuZCBtYXJrZXItbWlkIG1hcmtlci1zdGFydCBvdmVybGluZS1wb3NpdGlvbiBvdmVybGluZS10aGlja25lc3MgcGFpbnQtb3JkZXIgcGFub3NlLTEgcG9pbnRlci1ldmVudHMgcmVuZGVyaW5nLWludGVudCBzaGFwZS1yZW5kZXJpbmcgc3RvcC1jb2xvciBzdG9wLW9wYWNpdHkgc3RyaWtldGhyb3VnaC1wb3NpdGlvbiBzdHJpa2V0aHJvdWdoLXRoaWNrbmVzcyBzdHJva2UtZGFzaGFycmF5IHN0cm9rZS1kYXNob2Zmc2V0IHN0cm9rZS1saW5lY2FwIHN0cm9rZS1saW5lam9pbiBzdHJva2UtbWl0ZXJsaW1pdCBzdHJva2Utb3BhY2l0eSBzdHJva2Utd2lkdGggdGV4dC1hbmNob3IgdGV4dC1kZWNvcmF0aW9uIHRleHQtcmVuZGVyaW5nIHVuZGVybGluZS1wb3NpdGlvbiB1bmRlcmxpbmUtdGhpY2tuZXNzIHVuaWNvZGUtYmlkaSB1bmljb2RlLXJhbmdlIHVuaXRzLXBlci1lbSB2LWFscGhhYmV0aWMgdi1oYW5naW5nIHYtaWRlb2dyYXBoaWMgdi1tYXRoZW1hdGljYWwgdmVjdG9yLWVmZmVjdCB2ZXJ0LWFkdi15IHZlcnQtb3JpZ2luLXggdmVydC1vcmlnaW4teSB3b3JkLXNwYWNpbmcgd3JpdGluZy1tb2RlIHhtbG5zOnhsaW5rIHgtaGVpZ2h0XCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHNiLFxudGIpO0RbYl09bmV3IEIoYiwxLCExLGEsbnVsbCwhMSl9KTtcInhsaW5rOmFjdHVhdGUgeGxpbms6YXJjcm9sZSB4bGluazpyb2xlIHhsaW5rOnNob3cgeGxpbms6dGl0bGUgeGxpbms6dHlwZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShzYix0Yik7RFtiXT1uZXcgQihiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMSl9KTtbXCJ4bWw6YmFzZVwiLFwieG1sOmxhbmdcIixcInhtbDpzcGFjZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShzYix0Yik7RFtiXT1uZXcgQihiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiLCExKX0pO1tcInRhYkluZGV4XCIsXCJjcm9zc09yaWdpblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwxLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExKX0pO1xuRC54bGlua0hyZWY9bmV3IEIoXCJ4bGlua0hyZWZcIiwxLCExLFwieGxpbms6aHJlZlwiLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLCEwKTtbXCJzcmNcIixcImhyZWZcIixcImFjdGlvblwiLFwiZm9ybUFjdGlvblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwxLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCEwKX0pO2Z1bmN0aW9uIHViKGEpe3N3aXRjaCh0eXBlb2YgYSl7Y2FzZSBcImJvb2xlYW5cIjpjYXNlIFwibnVtYmVyXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJzdHJpbmdcIjpjYXNlIFwidW5kZWZpbmVkXCI6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm5cIlwifX1cbmZ1bmN0aW9uIHZiKGEsYixjLGQpe3ZhciBlPUQuaGFzT3duUHJvcGVydHkoYik/RFtiXTpudWxsO3ZhciBmPW51bGwhPT1lPzA9PT1lLnR5cGU6ZD8hMTohKDI8Yi5sZW5ndGgpfHxcIm9cIiE9PWJbMF0mJlwiT1wiIT09YlswXXx8XCJuXCIhPT1iWzFdJiZcIk5cIiE9PWJbMV0/ITE6ITA7Znx8KHJiKGIsYyxlLGQpJiYoYz1udWxsKSxkfHxudWxsPT09ZT9wYihiKSYmKG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOmEuc2V0QXR0cmlidXRlKGIsXCJcIitjKSk6ZS5tdXN0VXNlUHJvcGVydHk/YVtlLnByb3BlcnR5TmFtZV09bnVsbD09PWM/Mz09PWUudHlwZT8hMTpcIlwiOmM6KGI9ZS5hdHRyaWJ1dGVOYW1lLGQ9ZS5hdHRyaWJ1dGVOYW1lc3BhY2UsbnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6KGU9ZS50eXBlLGM9Mz09PWV8fDQ9PT1lJiYhMD09PWM/XCJcIjpcIlwiK2MsZD9hLnNldEF0dHJpYnV0ZU5TKGQsYixjKTphLnNldEF0dHJpYnV0ZShiLGMpKSkpfVxuZnVuY3Rpb24gd2IoYSl7dmFyIGI9YS50eXBlO3JldHVybihhPWEubm9kZU5hbWUpJiZcImlucHV0XCI9PT1hLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1ifHxcInJhZGlvXCI9PT1iKX1cbmZ1bmN0aW9uIHhiKGEpe3ZhciBiPXdiKGEpP1wiY2hlY2tlZFwiOlwidmFsdWVcIixjPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsYiksZD1cIlwiK2FbYl07aWYoIWEuaGFzT3duUHJvcGVydHkoYikmJlwidW5kZWZpbmVkXCIhPT10eXBlb2YgYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5zZXQpe3ZhciBlPWMuZ2V0LGY9Yy5zZXQ7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBlLmNhbGwodGhpcyl9LHNldDpmdW5jdGlvbihhKXtkPVwiXCIrYTtmLmNhbGwodGhpcyxhKX19KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtlbnVtZXJhYmxlOmMuZW51bWVyYWJsZX0pO3JldHVybntnZXRWYWx1ZTpmdW5jdGlvbigpe3JldHVybiBkfSxzZXRWYWx1ZTpmdW5jdGlvbihhKXtkPVwiXCIrYX0sc3RvcFRyYWNraW5nOmZ1bmN0aW9uKCl7YS5fdmFsdWVUcmFja2VyPVxubnVsbDtkZWxldGUgYVtiXX19fX1mdW5jdGlvbiB5YihhKXthLl92YWx1ZVRyYWNrZXJ8fChhLl92YWx1ZVRyYWNrZXI9eGIoYSkpfWZ1bmN0aW9uIHpiKGEpe2lmKCFhKXJldHVybiExO3ZhciBiPWEuX3ZhbHVlVHJhY2tlcjtpZighYilyZXR1cm4hMDt2YXIgYz1iLmdldFZhbHVlKCk7dmFyIGQ9XCJcIjthJiYoZD13YihhKT9hLmNoZWNrZWQ/XCJ0cnVlXCI6XCJmYWxzZVwiOmEudmFsdWUpO2E9ZDtyZXR1cm4gYSE9PWM/KGIuc2V0VmFsdWUoYSksITApOiExfWZ1bmN0aW9uIEFiKGEsYil7dmFyIGM9Yi5jaGVja2VkO3JldHVybiBuKHt9LGIse2RlZmF1bHRDaGVja2VkOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLHZhbHVlOnZvaWQgMCxjaGVja2VkOm51bGwhPWM/YzphLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWR9KX1cbmZ1bmN0aW9uIEJiKGEsYil7dmFyIGM9bnVsbD09Yi5kZWZhdWx0VmFsdWU/XCJcIjpiLmRlZmF1bHRWYWx1ZSxkPW51bGwhPWIuY2hlY2tlZD9iLmNoZWNrZWQ6Yi5kZWZhdWx0Q2hlY2tlZDtjPXViKG51bGwhPWIudmFsdWU/Yi52YWx1ZTpjKTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxDaGVja2VkOmQsaW5pdGlhbFZhbHVlOmMsY29udHJvbGxlZDpcImNoZWNrYm94XCI9PT1iLnR5cGV8fFwicmFkaW9cIj09PWIudHlwZT9udWxsIT1iLmNoZWNrZWQ6bnVsbCE9Yi52YWx1ZX19ZnVuY3Rpb24gQ2IoYSxiKXtiPWIuY2hlY2tlZDtudWxsIT1iJiZ2YihhLFwiY2hlY2tlZFwiLGIsITEpfVxuZnVuY3Rpb24gRWIoYSxiKXtDYihhLGIpO3ZhciBjPXViKGIudmFsdWUpLGQ9Yi50eXBlO2lmKG51bGwhPWMpaWYoXCJudW1iZXJcIj09PWQpe2lmKDA9PT1jJiZcIlwiPT09YS52YWx1ZXx8YS52YWx1ZSE9YylhLnZhbHVlPVwiXCIrY31lbHNlIGEudmFsdWUhPT1cIlwiK2MmJihhLnZhbHVlPVwiXCIrYyk7ZWxzZSBpZihcInN1Ym1pdFwiPT09ZHx8XCJyZXNldFwiPT09ZCl7YS5yZW1vdmVBdHRyaWJ1dGUoXCJ2YWx1ZVwiKTtyZXR1cm59Yi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpP0ZiKGEsYi50eXBlLGMpOmIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikmJkZiKGEsYi50eXBlLHViKGIuZGVmYXVsdFZhbHVlKSk7bnVsbD09Yi5jaGVja2VkJiZudWxsIT1iLmRlZmF1bHRDaGVja2VkJiYoYS5kZWZhdWx0Q2hlY2tlZD0hIWIuZGVmYXVsdENoZWNrZWQpfVxuZnVuY3Rpb24gR2IoYSxiLGMpe2lmKGIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKXx8Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSl7dmFyIGQ9Yi50eXBlO2lmKCEoXCJzdWJtaXRcIiE9PWQmJlwicmVzZXRcIiE9PWR8fHZvaWQgMCE9PWIudmFsdWUmJm51bGwhPT1iLnZhbHVlKSlyZXR1cm47Yj1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU7Y3x8Yj09PWEudmFsdWV8fChhLnZhbHVlPWIpO2EuZGVmYXVsdFZhbHVlPWJ9Yz1hLm5hbWU7XCJcIiE9PWMmJihhLm5hbWU9XCJcIik7YS5kZWZhdWx0Q2hlY2tlZD0hYS5kZWZhdWx0Q2hlY2tlZDthLmRlZmF1bHRDaGVja2VkPSEhYS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkO1wiXCIhPT1jJiYoYS5uYW1lPWMpfVxuZnVuY3Rpb24gRmIoYSxiLGMpe2lmKFwibnVtYmVyXCIhPT1ifHxhLm93bmVyRG9jdW1lbnQuYWN0aXZlRWxlbWVudCE9PWEpbnVsbD09Yz9hLmRlZmF1bHRWYWx1ZT1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU6YS5kZWZhdWx0VmFsdWUhPT1cIlwiK2MmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2MpfWZ1bmN0aW9uIEhiKGEpe3ZhciBiPVwiXCI7YWEuQ2hpbGRyZW4uZm9yRWFjaChhLGZ1bmN0aW9uKGEpe251bGwhPWEmJihiKz1hKX0pO3JldHVybiBifWZ1bmN0aW9uIEliKGEsYil7YT1uKHtjaGlsZHJlbjp2b2lkIDB9LGIpO2lmKGI9SGIoYi5jaGlsZHJlbikpYS5jaGlsZHJlbj1iO3JldHVybiBhfVxuZnVuY3Rpb24gSmIoYSxiLGMsZCl7YT1hLm9wdGlvbnM7aWYoYil7Yj17fTtmb3IodmFyIGU9MDtlPGMubGVuZ3RoO2UrKyliW1wiJFwiK2NbZV1dPSEwO2ZvcihjPTA7YzxhLmxlbmd0aDtjKyspZT1iLmhhc093blByb3BlcnR5KFwiJFwiK2FbY10udmFsdWUpLGFbY10uc2VsZWN0ZWQhPT1lJiYoYVtjXS5zZWxlY3RlZD1lKSxlJiZkJiYoYVtjXS5kZWZhdWx0U2VsZWN0ZWQ9ITApfWVsc2V7Yz1cIlwiK3ViKGMpO2I9bnVsbDtmb3IoZT0wO2U8YS5sZW5ndGg7ZSsrKXtpZihhW2VdLnZhbHVlPT09Yyl7YVtlXS5zZWxlY3RlZD0hMDtkJiYoYVtlXS5kZWZhdWx0U2VsZWN0ZWQ9ITApO3JldHVybn1udWxsIT09Ynx8YVtlXS5kaXNhYmxlZHx8KGI9YVtlXSl9bnVsbCE9PWImJihiLnNlbGVjdGVkPSEwKX19XG5mdW5jdGlvbiBLYihhLGIpe2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpdGhyb3cgRXJyb3IodSg5MSkpO3JldHVybiBuKHt9LGIse3ZhbHVlOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLGNoaWxkcmVuOlwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZX0pfWZ1bmN0aW9uIExiKGEsYil7dmFyIGM9Yi52YWx1ZTtpZihudWxsPT1jKXtjPWIuZGVmYXVsdFZhbHVlO2I9Yi5jaGlsZHJlbjtpZihudWxsIT1iKXtpZihudWxsIT1jKXRocm93IEVycm9yKHUoOTIpKTtpZihBcnJheS5pc0FycmF5KGIpKXtpZighKDE+PWIubGVuZ3RoKSl0aHJvdyBFcnJvcih1KDkzKSk7Yj1iWzBdfWM9Yn1udWxsPT1jJiYoYz1cIlwiKX1hLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTp1YihjKX19XG5mdW5jdGlvbiBNYihhLGIpe3ZhciBjPXViKGIudmFsdWUpLGQ9dWIoYi5kZWZhdWx0VmFsdWUpO251bGwhPWMmJihjPVwiXCIrYyxjIT09YS52YWx1ZSYmKGEudmFsdWU9YyksbnVsbD09Yi5kZWZhdWx0VmFsdWUmJmEuZGVmYXVsdFZhbHVlIT09YyYmKGEuZGVmYXVsdFZhbHVlPWMpKTtudWxsIT1kJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitkKX1mdW5jdGlvbiBOYihhKXt2YXIgYj1hLnRleHRDb250ZW50O2I9PT1hLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlJiZcIlwiIT09YiYmbnVsbCE9PWImJihhLnZhbHVlPWIpfXZhciBPYj17aHRtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIixtYXRobWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCIsc3ZnOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIn07XG5mdW5jdGlvbiBQYihhKXtzd2l0Y2goYSl7Y2FzZSBcInN2Z1wiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIjtjYXNlIFwibWF0aFwiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiO2RlZmF1bHQ6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCJ9fWZ1bmN0aW9uIFFiKGEsYil7cmV0dXJuIG51bGw9PWF8fFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YT9QYihiKTpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI9PT1hJiZcImZvcmVpZ25PYmplY3RcIj09PWI/XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI6YX1cbnZhciBSYixTYj1mdW5jdGlvbihhKXtyZXR1cm5cInVuZGVmaW5lZFwiIT09dHlwZW9mIE1TQXBwJiZNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbj9mdW5jdGlvbihiLGMsZCxlKXtNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbigpe3JldHVybiBhKGIsYyxkLGUpfSl9OmF9KGZ1bmN0aW9uKGEsYil7aWYoYS5uYW1lc3BhY2VVUkkhPT1PYi5zdmd8fFwiaW5uZXJIVE1MXCJpbiBhKWEuaW5uZXJIVE1MPWI7ZWxzZXtSYj1SYnx8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtSYi5pbm5lckhUTUw9XCI8c3ZnPlwiK2IudmFsdWVPZigpLnRvU3RyaW5nKCkrXCI8L3N2Zz5cIjtmb3IoYj1SYi5maXJzdENoaWxkO2EuZmlyc3RDaGlsZDspYS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpO2Zvcig7Yi5maXJzdENoaWxkOylhLmFwcGVuZENoaWxkKGIuZmlyc3RDaGlsZCl9fSk7XG5mdW5jdGlvbiBUYihhLGIpe2lmKGIpe3ZhciBjPWEuZmlyc3RDaGlsZDtpZihjJiZjPT09YS5sYXN0Q2hpbGQmJjM9PT1jLm5vZGVUeXBlKXtjLm5vZGVWYWx1ZT1iO3JldHVybn19YS50ZXh0Q29udGVudD1ifWZ1bmN0aW9uIFViKGEsYil7dmFyIGM9e307Y1thLnRvTG93ZXJDYXNlKCldPWIudG9Mb3dlckNhc2UoKTtjW1wiV2Via2l0XCIrYV09XCJ3ZWJraXRcIitiO2NbXCJNb3pcIithXT1cIm1velwiK2I7cmV0dXJuIGN9dmFyIFZiPXthbmltYXRpb25lbmQ6VWIoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkVuZFwiKSxhbmltYXRpb25pdGVyYXRpb246VWIoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkl0ZXJhdGlvblwiKSxhbmltYXRpb25zdGFydDpVYihcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uU3RhcnRcIiksdHJhbnNpdGlvbmVuZDpVYihcIlRyYW5zaXRpb25cIixcIlRyYW5zaXRpb25FbmRcIil9LFdiPXt9LFhiPXt9O1xuWWEmJihYYj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlLFwiQW5pbWF0aW9uRXZlbnRcImluIHdpbmRvd3x8KGRlbGV0ZSBWYi5hbmltYXRpb25lbmQuYW5pbWF0aW9uLGRlbGV0ZSBWYi5hbmltYXRpb25pdGVyYXRpb24uYW5pbWF0aW9uLGRlbGV0ZSBWYi5hbmltYXRpb25zdGFydC5hbmltYXRpb24pLFwiVHJhbnNpdGlvbkV2ZW50XCJpbiB3aW5kb3d8fGRlbGV0ZSBWYi50cmFuc2l0aW9uZW5kLnRyYW5zaXRpb24pO2Z1bmN0aW9uIFliKGEpe2lmKFdiW2FdKXJldHVybiBXYlthXTtpZighVmJbYV0pcmV0dXJuIGE7dmFyIGI9VmJbYV0sYztmb3IoYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykmJmMgaW4gWGIpcmV0dXJuIFdiW2FdPWJbY107cmV0dXJuIGF9dmFyIFpiPVliKFwiYW5pbWF0aW9uZW5kXCIpLCRiPVliKFwiYW5pbWF0aW9uaXRlcmF0aW9uXCIpLGFjPVliKFwiYW5pbWF0aW9uc3RhcnRcIiksYmM9WWIoXCJ0cmFuc2l0aW9uZW5kXCIpLGNjPVwiYWJvcnQgY2FucGxheSBjYW5wbGF5dGhyb3VnaCBkdXJhdGlvbmNoYW5nZSBlbXB0aWVkIGVuY3J5cHRlZCBlbmRlZCBlcnJvciBsb2FkZWRkYXRhIGxvYWRlZG1ldGFkYXRhIGxvYWRzdGFydCBwYXVzZSBwbGF5IHBsYXlpbmcgcHJvZ3Jlc3MgcmF0ZWNoYW5nZSBzZWVrZWQgc2Vla2luZyBzdGFsbGVkIHN1c3BlbmQgdGltZXVwZGF0ZSB2b2x1bWVjaGFuZ2Ugd2FpdGluZ1wiLnNwbGl0KFwiIFwiKTtcbmZ1bmN0aW9uIGVjKGEpe3ZhciBiPWEsYz1hO2lmKGEuYWx0ZXJuYXRlKWZvcig7Yi5yZXR1cm47KWI9Yi5yZXR1cm47ZWxzZXthPWI7ZG8gYj1hLDAhPT0oYi5lZmZlY3RUYWcmMTAyNikmJihjPWIucmV0dXJuKSxhPWIucmV0dXJuO3doaWxlKGEpfXJldHVybiAzPT09Yi50YWc/YzpudWxsfWZ1bmN0aW9uIGZjKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPWEubWVtb2l6ZWRTdGF0ZTtudWxsPT09YiYmKGE9YS5hbHRlcm5hdGUsbnVsbCE9PWEmJihiPWEubWVtb2l6ZWRTdGF0ZSkpO2lmKG51bGwhPT1iKXJldHVybiBiLmRlaHlkcmF0ZWR9cmV0dXJuIG51bGx9ZnVuY3Rpb24gZ2MoYSl7aWYoZWMoYSkhPT1hKXRocm93IEVycm9yKHUoMTg4KSk7fVxuZnVuY3Rpb24gaGMoYSl7dmFyIGI9YS5hbHRlcm5hdGU7aWYoIWIpe2I9ZWMoYSk7aWYobnVsbD09PWIpdGhyb3cgRXJyb3IodSgxODgpKTtyZXR1cm4gYiE9PWE/bnVsbDphfWZvcih2YXIgYz1hLGQ9Yjs7KXt2YXIgZT1jLnJldHVybjtpZihudWxsPT09ZSlicmVhazt2YXIgZj1lLmFsdGVybmF0ZTtpZihudWxsPT09Zil7ZD1lLnJldHVybjtpZihudWxsIT09ZCl7Yz1kO2NvbnRpbnVlfWJyZWFrfWlmKGUuY2hpbGQ9PT1mLmNoaWxkKXtmb3IoZj1lLmNoaWxkO2Y7KXtpZihmPT09YylyZXR1cm4gZ2MoZSksYTtpZihmPT09ZClyZXR1cm4gZ2MoZSksYjtmPWYuc2libGluZ310aHJvdyBFcnJvcih1KDE4OCkpO31pZihjLnJldHVybiE9PWQucmV0dXJuKWM9ZSxkPWY7ZWxzZXtmb3IodmFyIGc9ITEsaD1lLmNoaWxkO2g7KXtpZihoPT09Yyl7Zz0hMDtjPWU7ZD1mO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZTtjPWY7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpe2ZvcihoPWYuY2hpbGQ7aDspe2lmKGg9PT1cbmMpe2c9ITA7Yz1mO2Q9ZTticmVha31pZihoPT09ZCl7Zz0hMDtkPWY7Yz1lO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXRocm93IEVycm9yKHUoMTg5KSk7fX1pZihjLmFsdGVybmF0ZSE9PWQpdGhyb3cgRXJyb3IodSgxOTApKTt9aWYoMyE9PWMudGFnKXRocm93IEVycm9yKHUoMTg4KSk7cmV0dXJuIGMuc3RhdGVOb2RlLmN1cnJlbnQ9PT1jP2E6Yn1mdW5jdGlvbiBpYyhhKXthPWhjKGEpO2lmKCFhKXJldHVybiBudWxsO2Zvcih2YXIgYj1hOzspe2lmKDU9PT1iLnRhZ3x8Nj09PWIudGFnKXJldHVybiBiO2lmKGIuY2hpbGQpYi5jaGlsZC5yZXR1cm49YixiPWIuY2hpbGQ7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoOyFiLnNpYmxpbmc7KXtpZighYi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fXJldHVybiBudWxsfVxudmFyIGpjLGtjLGxjLG1jPSExLG5jPVtdLG9jPW51bGwscGM9bnVsbCxxYz1udWxsLHJjPW5ldyBNYXAsc2M9bmV3IE1hcCx0Yz1bXSx1Yz1cIm1vdXNlZG93biBtb3VzZXVwIHRvdWNoY2FuY2VsIHRvdWNoZW5kIHRvdWNoc3RhcnQgYXV4Y2xpY2sgZGJsY2xpY2sgcG9pbnRlcmNhbmNlbCBwb2ludGVyZG93biBwb2ludGVydXAgZHJhZ2VuZCBkcmFnc3RhcnQgZHJvcCBjb21wb3NpdGlvbmVuZCBjb21wb3NpdGlvbnN0YXJ0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgaW5wdXQgdGV4dElucHV0IGNsb3NlIGNhbmNlbCBjb3B5IGN1dCBwYXN0ZSBjbGljayBjaGFuZ2UgY29udGV4dG1lbnUgcmVzZXQgc3VibWl0XCIuc3BsaXQoXCIgXCIpLHZjPVwiZm9jdXMgYmx1ciBkcmFnZW50ZXIgZHJhZ2xlYXZlIG1vdXNlb3ZlciBtb3VzZW91dCBwb2ludGVyb3ZlciBwb2ludGVyb3V0IGdvdHBvaW50ZXJjYXB0dXJlIGxvc3Rwb2ludGVyY2FwdHVyZVwiLnNwbGl0KFwiIFwiKTtcbmZ1bmN0aW9uIHdjKGEpe3ZhciBiPXhjKGEpO3VjLmZvckVhY2goZnVuY3Rpb24oYyl7eWMoYyxhLGIpfSk7dmMuZm9yRWFjaChmdW5jdGlvbihjKXt5YyhjLGEsYil9KX1mdW5jdGlvbiB6YyhhLGIsYyxkKXtyZXR1cm57YmxvY2tlZE9uOmEsdG9wTGV2ZWxUeXBlOmIsZXZlbnRTeXN0ZW1GbGFnczpjfDMyLG5hdGl2ZUV2ZW50OmR9fWZ1bmN0aW9uIEFjKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c1wiOmNhc2UgXCJibHVyXCI6b2M9bnVsbDticmVhaztjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdsZWF2ZVwiOnBjPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJtb3VzZW91dFwiOnFjPW51bGw7YnJlYWs7Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpyYy5kZWxldGUoYi5wb2ludGVySWQpO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpzYy5kZWxldGUoYi5wb2ludGVySWQpfX1cbmZ1bmN0aW9uIEJjKGEsYixjLGQsZSl7aWYobnVsbD09PWF8fGEubmF0aXZlRXZlbnQhPT1lKXJldHVybiBhPXpjKGIsYyxkLGUpLG51bGwhPT1iJiYoYj1DYyhiKSxudWxsIT09YiYma2MoYikpLGE7YS5ldmVudFN5c3RlbUZsYWdzfD1kO3JldHVybiBhfWZ1bmN0aW9uIERjKGEsYixjLGQpe3N3aXRjaChiKXtjYXNlIFwiZm9jdXNcIjpyZXR1cm4gb2M9QmMob2MsYSxiLGMsZCksITA7Y2FzZSBcImRyYWdlbnRlclwiOnJldHVybiBwYz1CYyhwYyxhLGIsYyxkKSwhMDtjYXNlIFwibW91c2VvdmVyXCI6cmV0dXJuIHFjPUJjKHFjLGEsYixjLGQpLCEwO2Nhc2UgXCJwb2ludGVyb3ZlclwiOnZhciBlPWQucG9pbnRlcklkO3JjLnNldChlLEJjKHJjLmdldChlKXx8bnVsbCxhLGIsYyxkKSk7cmV0dXJuITA7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6cmV0dXJuIGU9ZC5wb2ludGVySWQsc2Muc2V0KGUsQmMoc2MuZ2V0KGUpfHxudWxsLGEsYixjLGQpKSwhMH1yZXR1cm4hMX1cbmZ1bmN0aW9uIEVjKGEpe3ZhciBiPUZjKGEudGFyZ2V0KTtpZihudWxsIT09Yil7dmFyIGM9ZWMoYik7aWYobnVsbCE9PWMpaWYoYj1jLnRhZywxMz09PWIpe2lmKGI9ZmMoYyksbnVsbCE9PWIpe2EuYmxvY2tlZE9uPWI7cS51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkoYS5wcmlvcml0eSxmdW5jdGlvbigpe2xjKGMpfSk7cmV0dXJufX1lbHNlIGlmKDM9PT1iJiZjLnN0YXRlTm9kZS5oeWRyYXRlKXthLmJsb2NrZWRPbj0zPT09Yy50YWc/Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO3JldHVybn19YS5ibG9ja2VkT249bnVsbH1mdW5jdGlvbiBHYyhhKXtpZihudWxsIT09YS5ibG9ja2VkT24pcmV0dXJuITE7dmFyIGI9SGMoYS50b3BMZXZlbFR5cGUsYS5ldmVudFN5c3RlbUZsYWdzLGEubmF0aXZlRXZlbnQpO2lmKG51bGwhPT1iKXt2YXIgYz1DYyhiKTtudWxsIT09YyYma2MoYyk7YS5ibG9ja2VkT249YjtyZXR1cm4hMX1yZXR1cm4hMH1cbmZ1bmN0aW9uIEljKGEsYixjKXtHYyhhKSYmYy5kZWxldGUoYil9ZnVuY3Rpb24gSmMoKXtmb3IobWM9ITE7MDxuYy5sZW5ndGg7KXt2YXIgYT1uY1swXTtpZihudWxsIT09YS5ibG9ja2VkT24pe2E9Q2MoYS5ibG9ja2VkT24pO251bGwhPT1hJiZqYyhhKTticmVha312YXIgYj1IYyhhLnRvcExldmVsVHlwZSxhLmV2ZW50U3lzdGVtRmxhZ3MsYS5uYXRpdmVFdmVudCk7bnVsbCE9PWI/YS5ibG9ja2VkT249YjpuYy5zaGlmdCgpfW51bGwhPT1vYyYmR2Mob2MpJiYob2M9bnVsbCk7bnVsbCE9PXBjJiZHYyhwYykmJihwYz1udWxsKTtudWxsIT09cWMmJkdjKHFjKSYmKHFjPW51bGwpO3JjLmZvckVhY2goSWMpO3NjLmZvckVhY2goSWMpfWZ1bmN0aW9uIEtjKGEsYil7YS5ibG9ja2VkT249PT1iJiYoYS5ibG9ja2VkT249bnVsbCxtY3x8KG1jPSEwLHEudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayhxLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LEpjKSkpfVxuZnVuY3Rpb24gTGMoYSl7ZnVuY3Rpb24gYihiKXtyZXR1cm4gS2MoYixhKX1pZigwPG5jLmxlbmd0aCl7S2MobmNbMF0sYSk7Zm9yKHZhciBjPTE7YzxuYy5sZW5ndGg7YysrKXt2YXIgZD1uY1tjXTtkLmJsb2NrZWRPbj09PWEmJihkLmJsb2NrZWRPbj1udWxsKX19bnVsbCE9PW9jJiZLYyhvYyxhKTtudWxsIT09cGMmJktjKHBjLGEpO251bGwhPT1xYyYmS2MocWMsYSk7cmMuZm9yRWFjaChiKTtzYy5mb3JFYWNoKGIpO2ZvcihjPTA7Yzx0Yy5sZW5ndGg7YysrKWQ9dGNbY10sZC5ibG9ja2VkT249PT1hJiYoZC5ibG9ja2VkT249bnVsbCk7Zm9yKDswPHRjLmxlbmd0aCYmKGM9dGNbMF0sbnVsbD09PWMuYmxvY2tlZE9uKTspRWMoYyksbnVsbD09PWMuYmxvY2tlZE9uJiZ0Yy5zaGlmdCgpfVxuZnVuY3Rpb24gTWMoYSl7YT1hLnRhcmdldHx8YS5zcmNFbGVtZW50fHx3aW5kb3c7YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCYmKGE9YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCk7cmV0dXJuIDM9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphfWZ1bmN0aW9uIE5jKGEpe2RvIGE9YS5yZXR1cm47d2hpbGUoYSYmNSE9PWEudGFnKTtyZXR1cm4gYT9hOm51bGx9ZnVuY3Rpb24gT2MoYSxiLGMpe2lmKGI9RGEoYSxjLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzW2JdKSljLl9kaXNwYXRjaExpc3RlbmVycz14YShjLl9kaXNwYXRjaExpc3RlbmVycyxiKSxjLl9kaXNwYXRjaEluc3RhbmNlcz14YShjLl9kaXNwYXRjaEluc3RhbmNlcyxhKX1cbmZ1bmN0aW9uIFBjKGEpe2lmKGEmJmEuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMpe2Zvcih2YXIgYj1hLl90YXJnZXRJbnN0LGM9W107YjspYy5wdXNoKGIpLGI9TmMoYik7Zm9yKGI9Yy5sZW5ndGg7MDxiLS07KU9jKGNbYl0sXCJjYXB0dXJlZFwiLGEpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspT2MoY1tiXSxcImJ1YmJsZWRcIixhKX19ZnVuY3Rpb24gUWMoYSxiLGMpe2EmJmMmJmMuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSYmKGI9RGEoYSxjLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUpKSYmKGMuX2Rpc3BhdGNoTGlzdGVuZXJzPXhhKGMuX2Rpc3BhdGNoTGlzdGVuZXJzLGIpLGMuX2Rpc3BhdGNoSW5zdGFuY2VzPXhhKGMuX2Rpc3BhdGNoSW5zdGFuY2VzLGEpKX1mdW5jdGlvbiBSYyhhKXthJiZhLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUmJlFjKGEuX3RhcmdldEluc3QsbnVsbCxhKX1cbmZ1bmN0aW9uIFNjKGEpe3lhKGEsUGMpfWZ1bmN0aW9uIFRjKCl7cmV0dXJuITB9ZnVuY3Rpb24gVWMoKXtyZXR1cm4hMX1mdW5jdGlvbiBFKGEsYixjLGQpe3RoaXMuZGlzcGF0Y2hDb25maWc9YTt0aGlzLl90YXJnZXRJbnN0PWI7dGhpcy5uYXRpdmVFdmVudD1jO2E9dGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2U7Zm9yKHZhciBlIGluIGEpYS5oYXNPd25Qcm9wZXJ0eShlKSYmKChiPWFbZV0pP3RoaXNbZV09YihjKTpcInRhcmdldFwiPT09ZT90aGlzLnRhcmdldD1kOnRoaXNbZV09Y1tlXSk7dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9KG51bGwhPWMuZGVmYXVsdFByZXZlbnRlZD9jLmRlZmF1bHRQcmV2ZW50ZWQ6ITE9PT1jLnJldHVyblZhbHVlKT9UYzpVYzt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPVVjO3JldHVybiB0aGlzfVxubihFLnByb3RvdHlwZSx7cHJldmVudERlZmF1bHQ6ZnVuY3Rpb24oKXt0aGlzLmRlZmF1bHRQcmV2ZW50ZWQ9ITA7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5wcmV2ZW50RGVmYXVsdD9hLnByZXZlbnREZWZhdWx0KCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5yZXR1cm5WYWx1ZSYmKGEucmV0dXJuVmFsdWU9ITEpLHRoaXMuaXNEZWZhdWx0UHJldmVudGVkPVRjKX0sc3RvcFByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5zdG9wUHJvcGFnYXRpb24/YS5zdG9wUHJvcGFnYXRpb24oKTpcInVua25vd25cIiE9PXR5cGVvZiBhLmNhbmNlbEJ1YmJsZSYmKGEuY2FuY2VsQnViYmxlPSEwKSx0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPVRjKX0scGVyc2lzdDpmdW5jdGlvbigpe3RoaXMuaXNQZXJzaXN0ZW50PVRjfSxpc1BlcnNpc3RlbnQ6VWMsZGVzdHJ1Y3RvcjpmdW5jdGlvbigpe3ZhciBhPXRoaXMuY29uc3RydWN0b3IuSW50ZXJmYWNlLFxuYjtmb3IoYiBpbiBhKXRoaXNbYl09bnVsbDt0aGlzLm5hdGl2ZUV2ZW50PXRoaXMuX3RhcmdldEluc3Q9dGhpcy5kaXNwYXRjaENvbmZpZz1udWxsO3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9VWM7dGhpcy5fZGlzcGF0Y2hJbnN0YW5jZXM9dGhpcy5fZGlzcGF0Y2hMaXN0ZW5lcnM9bnVsbH19KTtFLkludGVyZmFjZT17dHlwZTpudWxsLHRhcmdldDpudWxsLGN1cnJlbnRUYXJnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbH0sZXZlbnRQaGFzZTpudWxsLGJ1YmJsZXM6bnVsbCxjYW5jZWxhYmxlOm51bGwsdGltZVN0YW1wOmZ1bmN0aW9uKGEpe3JldHVybiBhLnRpbWVTdGFtcHx8RGF0ZS5ub3coKX0sZGVmYXVsdFByZXZlbnRlZDpudWxsLGlzVHJ1c3RlZDpudWxsfTtcbkUuZXh0ZW5kPWZ1bmN0aW9uKGEpe2Z1bmN0aW9uIGIoKXt9ZnVuY3Rpb24gYygpe3JldHVybiBkLmFwcGx5KHRoaXMsYXJndW1lbnRzKX12YXIgZD10aGlzO2IucHJvdG90eXBlPWQucHJvdG90eXBlO3ZhciBlPW5ldyBiO24oZSxjLnByb3RvdHlwZSk7Yy5wcm90b3R5cGU9ZTtjLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1jO2MuSW50ZXJmYWNlPW4oe30sZC5JbnRlcmZhY2UsYSk7Yy5leHRlbmQ9ZC5leHRlbmQ7VmMoYyk7cmV0dXJuIGN9O1ZjKEUpO2Z1bmN0aW9uIFdjKGEsYixjLGQpe2lmKHRoaXMuZXZlbnRQb29sLmxlbmd0aCl7dmFyIGU9dGhpcy5ldmVudFBvb2wucG9wKCk7dGhpcy5jYWxsKGUsYSxiLGMsZCk7cmV0dXJuIGV9cmV0dXJuIG5ldyB0aGlzKGEsYixjLGQpfVxuZnVuY3Rpb24gWGMoYSl7aWYoIShhIGluc3RhbmNlb2YgdGhpcykpdGhyb3cgRXJyb3IodSgyNzkpKTthLmRlc3RydWN0b3IoKTsxMD50aGlzLmV2ZW50UG9vbC5sZW5ndGgmJnRoaXMuZXZlbnRQb29sLnB1c2goYSl9ZnVuY3Rpb24gVmMoYSl7YS5ldmVudFBvb2w9W107YS5nZXRQb29sZWQ9V2M7YS5yZWxlYXNlPVhjfXZhciBZYz1FLmV4dGVuZCh7YW5pbWF0aW9uTmFtZTpudWxsLGVsYXBzZWRUaW1lOm51bGwscHNldWRvRWxlbWVudDpudWxsfSksWmM9RS5leHRlbmQoe2NsaXBib2FyZERhdGE6ZnVuY3Rpb24oYSl7cmV0dXJuXCJjbGlwYm9hcmREYXRhXCJpbiBhP2EuY2xpcGJvYXJkRGF0YTp3aW5kb3cuY2xpcGJvYXJkRGF0YX19KSwkYz1FLmV4dGVuZCh7dmlldzpudWxsLGRldGFpbDpudWxsfSksYWQ9JGMuZXh0ZW5kKHtyZWxhdGVkVGFyZ2V0Om51bGx9KTtcbmZ1bmN0aW9uIGJkKGEpe3ZhciBiPWEua2V5Q29kZTtcImNoYXJDb2RlXCJpbiBhPyhhPWEuY2hhckNvZGUsMD09PWEmJjEzPT09YiYmKGE9MTMpKTphPWI7MTA9PT1hJiYoYT0xMyk7cmV0dXJuIDMyPD1hfHwxMz09PWE/YTowfVxudmFyIGNkPXtFc2M6XCJFc2NhcGVcIixTcGFjZWJhcjpcIiBcIixMZWZ0OlwiQXJyb3dMZWZ0XCIsVXA6XCJBcnJvd1VwXCIsUmlnaHQ6XCJBcnJvd1JpZ2h0XCIsRG93bjpcIkFycm93RG93blwiLERlbDpcIkRlbGV0ZVwiLFdpbjpcIk9TXCIsTWVudTpcIkNvbnRleHRNZW51XCIsQXBwczpcIkNvbnRleHRNZW51XCIsU2Nyb2xsOlwiU2Nyb2xsTG9ja1wiLE1velByaW50YWJsZUtleTpcIlVuaWRlbnRpZmllZFwifSxkZD17ODpcIkJhY2tzcGFjZVwiLDk6XCJUYWJcIiwxMjpcIkNsZWFyXCIsMTM6XCJFbnRlclwiLDE2OlwiU2hpZnRcIiwxNzpcIkNvbnRyb2xcIiwxODpcIkFsdFwiLDE5OlwiUGF1c2VcIiwyMDpcIkNhcHNMb2NrXCIsMjc6XCJFc2NhcGVcIiwzMjpcIiBcIiwzMzpcIlBhZ2VVcFwiLDM0OlwiUGFnZURvd25cIiwzNTpcIkVuZFwiLDM2OlwiSG9tZVwiLDM3OlwiQXJyb3dMZWZ0XCIsMzg6XCJBcnJvd1VwXCIsMzk6XCJBcnJvd1JpZ2h0XCIsNDA6XCJBcnJvd0Rvd25cIiw0NTpcIkluc2VydFwiLDQ2OlwiRGVsZXRlXCIsMTEyOlwiRjFcIiwxMTM6XCJGMlwiLDExNDpcIkYzXCIsMTE1OlwiRjRcIixcbjExNjpcIkY1XCIsMTE3OlwiRjZcIiwxMTg6XCJGN1wiLDExOTpcIkY4XCIsMTIwOlwiRjlcIiwxMjE6XCJGMTBcIiwxMjI6XCJGMTFcIiwxMjM6XCJGMTJcIiwxNDQ6XCJOdW1Mb2NrXCIsMTQ1OlwiU2Nyb2xsTG9ja1wiLDIyNDpcIk1ldGFcIn0sZWQ9e0FsdDpcImFsdEtleVwiLENvbnRyb2w6XCJjdHJsS2V5XCIsTWV0YTpcIm1ldGFLZXlcIixTaGlmdDpcInNoaWZ0S2V5XCJ9O2Z1bmN0aW9uIGdkKGEpe3ZhciBiPXRoaXMubmF0aXZlRXZlbnQ7cmV0dXJuIGIuZ2V0TW9kaWZpZXJTdGF0ZT9iLmdldE1vZGlmaWVyU3RhdGUoYSk6KGE9ZWRbYV0pPyEhYlthXTohMX1mdW5jdGlvbiBoZCgpe3JldHVybiBnZH1cbnZhciBpZD0kYy5leHRlbmQoe2tleTpmdW5jdGlvbihhKXtpZihhLmtleSl7dmFyIGI9Y2RbYS5rZXldfHxhLmtleTtpZihcIlVuaWRlbnRpZmllZFwiIT09YilyZXR1cm4gYn1yZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/KGE9YmQoYSksMTM9PT1hP1wiRW50ZXJcIjpTdHJpbmcuZnJvbUNoYXJDb2RlKGEpKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2RkW2Eua2V5Q29kZV18fFwiVW5pZGVudGlmaWVkXCI6XCJcIn0sbG9jYXRpb246bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwscmVwZWF0Om51bGwsbG9jYWxlOm51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpoZCxjaGFyQ29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/YmQoYSk6MH0sa2V5Q29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfSx3aGljaDpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1cbmEudHlwZT9iZChhKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfX0pLGpkPTAsa2Q9MCxsZD0hMSxtZD0hMSxuZD0kYy5leHRlbmQoe3NjcmVlblg6bnVsbCxzY3JlZW5ZOm51bGwsY2xpZW50WDpudWxsLGNsaWVudFk6bnVsbCxwYWdlWDpudWxsLHBhZ2VZOm51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLGdldE1vZGlmaWVyU3RhdGU6aGQsYnV0dG9uOm51bGwsYnV0dG9uczpudWxsLHJlbGF0ZWRUYXJnZXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGEucmVsYXRlZFRhcmdldHx8KGEuZnJvbUVsZW1lbnQ9PT1hLnNyY0VsZW1lbnQ/YS50b0VsZW1lbnQ6YS5mcm9tRWxlbWVudCl9LG1vdmVtZW50WDpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WFwiaW4gYSlyZXR1cm4gYS5tb3ZlbWVudFg7dmFyIGI9amQ7amQ9YS5zY3JlZW5YO3JldHVybiBsZD9cIm1vdXNlbW92ZVwiPT09YS50eXBlP2Euc2NyZWVuWC1cbmI6MDoobGQ9ITAsMCl9LG1vdmVtZW50WTpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WVwiaW4gYSlyZXR1cm4gYS5tb3ZlbWVudFk7dmFyIGI9a2Q7a2Q9YS5zY3JlZW5ZO3JldHVybiBtZD9cIm1vdXNlbW92ZVwiPT09YS50eXBlP2Euc2NyZWVuWS1iOjA6KG1kPSEwLDApfX0pLG9kPW5kLmV4dGVuZCh7cG9pbnRlcklkOm51bGwsd2lkdGg6bnVsbCxoZWlnaHQ6bnVsbCxwcmVzc3VyZTpudWxsLHRhbmdlbnRpYWxQcmVzc3VyZTpudWxsLHRpbHRYOm51bGwsdGlsdFk6bnVsbCx0d2lzdDpudWxsLHBvaW50ZXJUeXBlOm51bGwsaXNQcmltYXJ5Om51bGx9KSxwZD1uZC5leHRlbmQoe2RhdGFUcmFuc2ZlcjpudWxsfSkscWQ9JGMuZXh0ZW5kKHt0b3VjaGVzOm51bGwsdGFyZ2V0VG91Y2hlczpudWxsLGNoYW5nZWRUb3VjaGVzOm51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGdldE1vZGlmaWVyU3RhdGU6aGR9KSxyZD1FLmV4dGVuZCh7cHJvcGVydHlOYW1lOm51bGwsXG5lbGFwc2VkVGltZTpudWxsLHBzZXVkb0VsZW1lbnQ6bnVsbH0pLHNkPW5kLmV4dGVuZCh7ZGVsdGFYOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFYXCJpbiBhP2EuZGVsdGFYOlwid2hlZWxEZWx0YVhcImluIGE/LWEud2hlZWxEZWx0YVg6MH0sZGVsdGFZOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFZXCJpbiBhP2EuZGVsdGFZOlwid2hlZWxEZWx0YVlcImluIGE/LWEud2hlZWxEZWx0YVk6XCJ3aGVlbERlbHRhXCJpbiBhPy1hLndoZWVsRGVsdGE6MH0sZGVsdGFaOm51bGwsZGVsdGFNb2RlOm51bGx9KSx0ZD1bW1wiYmx1clwiLFwiYmx1clwiLDBdLFtcImNhbmNlbFwiLFwiY2FuY2VsXCIsMF0sW1wiY2xpY2tcIixcImNsaWNrXCIsMF0sW1wiY2xvc2VcIixcImNsb3NlXCIsMF0sW1wiY29udGV4dG1lbnVcIixcImNvbnRleHRNZW51XCIsMF0sW1wiY29weVwiLFwiY29weVwiLDBdLFtcImN1dFwiLFwiY3V0XCIsMF0sW1wiYXV4Y2xpY2tcIixcImF1eENsaWNrXCIsMF0sW1wiZGJsY2xpY2tcIixcImRvdWJsZUNsaWNrXCIsMF0sW1wiZHJhZ2VuZFwiLFwiZHJhZ0VuZFwiLFxuMF0sW1wiZHJhZ3N0YXJ0XCIsXCJkcmFnU3RhcnRcIiwwXSxbXCJkcm9wXCIsXCJkcm9wXCIsMF0sW1wiZm9jdXNcIixcImZvY3VzXCIsMF0sW1wiaW5wdXRcIixcImlucHV0XCIsMF0sW1wiaW52YWxpZFwiLFwiaW52YWxpZFwiLDBdLFtcImtleWRvd25cIixcImtleURvd25cIiwwXSxbXCJrZXlwcmVzc1wiLFwia2V5UHJlc3NcIiwwXSxbXCJrZXl1cFwiLFwia2V5VXBcIiwwXSxbXCJtb3VzZWRvd25cIixcIm1vdXNlRG93blwiLDBdLFtcIm1vdXNldXBcIixcIm1vdXNlVXBcIiwwXSxbXCJwYXN0ZVwiLFwicGFzdGVcIiwwXSxbXCJwYXVzZVwiLFwicGF1c2VcIiwwXSxbXCJwbGF5XCIsXCJwbGF5XCIsMF0sW1wicG9pbnRlcmNhbmNlbFwiLFwicG9pbnRlckNhbmNlbFwiLDBdLFtcInBvaW50ZXJkb3duXCIsXCJwb2ludGVyRG93blwiLDBdLFtcInBvaW50ZXJ1cFwiLFwicG9pbnRlclVwXCIsMF0sW1wicmF0ZWNoYW5nZVwiLFwicmF0ZUNoYW5nZVwiLDBdLFtcInJlc2V0XCIsXCJyZXNldFwiLDBdLFtcInNlZWtlZFwiLFwic2Vla2VkXCIsMF0sW1wic3VibWl0XCIsXCJzdWJtaXRcIiwwXSxbXCJ0b3VjaGNhbmNlbFwiLFwidG91Y2hDYW5jZWxcIixcbjBdLFtcInRvdWNoZW5kXCIsXCJ0b3VjaEVuZFwiLDBdLFtcInRvdWNoc3RhcnRcIixcInRvdWNoU3RhcnRcIiwwXSxbXCJ2b2x1bWVjaGFuZ2VcIixcInZvbHVtZUNoYW5nZVwiLDBdLFtcImRyYWdcIixcImRyYWdcIiwxXSxbXCJkcmFnZW50ZXJcIixcImRyYWdFbnRlclwiLDFdLFtcImRyYWdleGl0XCIsXCJkcmFnRXhpdFwiLDFdLFtcImRyYWdsZWF2ZVwiLFwiZHJhZ0xlYXZlXCIsMV0sW1wiZHJhZ292ZXJcIixcImRyYWdPdmVyXCIsMV0sW1wibW91c2Vtb3ZlXCIsXCJtb3VzZU1vdmVcIiwxXSxbXCJtb3VzZW91dFwiLFwibW91c2VPdXRcIiwxXSxbXCJtb3VzZW92ZXJcIixcIm1vdXNlT3ZlclwiLDFdLFtcInBvaW50ZXJtb3ZlXCIsXCJwb2ludGVyTW92ZVwiLDFdLFtcInBvaW50ZXJvdXRcIixcInBvaW50ZXJPdXRcIiwxXSxbXCJwb2ludGVyb3ZlclwiLFwicG9pbnRlck92ZXJcIiwxXSxbXCJzY3JvbGxcIixcInNjcm9sbFwiLDFdLFtcInRvZ2dsZVwiLFwidG9nZ2xlXCIsMV0sW1widG91Y2htb3ZlXCIsXCJ0b3VjaE1vdmVcIiwxXSxbXCJ3aGVlbFwiLFwid2hlZWxcIiwxXSxbXCJhYm9ydFwiLFwiYWJvcnRcIixcbjJdLFtaYixcImFuaW1hdGlvbkVuZFwiLDJdLFskYixcImFuaW1hdGlvbkl0ZXJhdGlvblwiLDJdLFthYyxcImFuaW1hdGlvblN0YXJ0XCIsMl0sW1wiY2FucGxheVwiLFwiY2FuUGxheVwiLDJdLFtcImNhbnBsYXl0aHJvdWdoXCIsXCJjYW5QbGF5VGhyb3VnaFwiLDJdLFtcImR1cmF0aW9uY2hhbmdlXCIsXCJkdXJhdGlvbkNoYW5nZVwiLDJdLFtcImVtcHRpZWRcIixcImVtcHRpZWRcIiwyXSxbXCJlbmNyeXB0ZWRcIixcImVuY3J5cHRlZFwiLDJdLFtcImVuZGVkXCIsXCJlbmRlZFwiLDJdLFtcImVycm9yXCIsXCJlcnJvclwiLDJdLFtcImdvdHBvaW50ZXJjYXB0dXJlXCIsXCJnb3RQb2ludGVyQ2FwdHVyZVwiLDJdLFtcImxvYWRcIixcImxvYWRcIiwyXSxbXCJsb2FkZWRkYXRhXCIsXCJsb2FkZWREYXRhXCIsMl0sW1wibG9hZGVkbWV0YWRhdGFcIixcImxvYWRlZE1ldGFkYXRhXCIsMl0sW1wibG9hZHN0YXJ0XCIsXCJsb2FkU3RhcnRcIiwyXSxbXCJsb3N0cG9pbnRlcmNhcHR1cmVcIixcImxvc3RQb2ludGVyQ2FwdHVyZVwiLDJdLFtcInBsYXlpbmdcIixcInBsYXlpbmdcIiwyXSxbXCJwcm9ncmVzc1wiLFxuXCJwcm9ncmVzc1wiLDJdLFtcInNlZWtpbmdcIixcInNlZWtpbmdcIiwyXSxbXCJzdGFsbGVkXCIsXCJzdGFsbGVkXCIsMl0sW1wic3VzcGVuZFwiLFwic3VzcGVuZFwiLDJdLFtcInRpbWV1cGRhdGVcIixcInRpbWVVcGRhdGVcIiwyXSxbYmMsXCJ0cmFuc2l0aW9uRW5kXCIsMl0sW1wid2FpdGluZ1wiLFwid2FpdGluZ1wiLDJdXSx1ZD17fSx2ZD17fSx3ZD0wO2Zvcig7d2Q8dGQubGVuZ3RoO3dkKyspe3ZhciB5ZD10ZFt3ZF0semQ9eWRbMF0sQWQ9eWRbMV0sQmQ9eWRbMl0sQ2Q9XCJvblwiKyhBZFswXS50b1VwcGVyQ2FzZSgpK0FkLnNsaWNlKDEpKSxEZD17cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6Q2QsY2FwdHVyZWQ6Q2QrXCJDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpbemRdLGV2ZW50UHJpb3JpdHk6QmR9O3VkW0FkXT1EZDt2ZFt6ZF09RGR9XG52YXIgRWQ9e2V2ZW50VHlwZXM6dWQsZ2V0RXZlbnRQcmlvcml0eTpmdW5jdGlvbihhKXthPXZkW2FdO3JldHVybiB2b2lkIDAhPT1hP2EuZXZlbnRQcmlvcml0eToyfSxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPXZkW2FdO2lmKCFlKXJldHVybiBudWxsO3N3aXRjaChhKXtjYXNlIFwia2V5cHJlc3NcIjppZigwPT09YmQoYykpcmV0dXJuIG51bGw7Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjphPWlkO2JyZWFrO2Nhc2UgXCJibHVyXCI6Y2FzZSBcImZvY3VzXCI6YT1hZDticmVhaztjYXNlIFwiY2xpY2tcIjppZigyPT09Yy5idXR0b24pcmV0dXJuIG51bGw7Y2FzZSBcImF1eGNsaWNrXCI6Y2FzZSBcImRibGNsaWNrXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJtb3VzZW1vdmVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwiY29udGV4dG1lbnVcIjphPW5kO2JyZWFrO2Nhc2UgXCJkcmFnXCI6Y2FzZSBcImRyYWdlbmRcIjpjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdleGl0XCI6Y2FzZSBcImRyYWdsZWF2ZVwiOmNhc2UgXCJkcmFnb3ZlclwiOmNhc2UgXCJkcmFnc3RhcnRcIjpjYXNlIFwiZHJvcFwiOmE9XG5wZDticmVhaztjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2htb3ZlXCI6Y2FzZSBcInRvdWNoc3RhcnRcIjphPXFkO2JyZWFrO2Nhc2UgWmI6Y2FzZSAkYjpjYXNlIGFjOmE9WWM7YnJlYWs7Y2FzZSBiYzphPXJkO2JyZWFrO2Nhc2UgXCJzY3JvbGxcIjphPSRjO2JyZWFrO2Nhc2UgXCJ3aGVlbFwiOmE9c2Q7YnJlYWs7Y2FzZSBcImNvcHlcIjpjYXNlIFwiY3V0XCI6Y2FzZSBcInBhc3RlXCI6YT1aYzticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVydXBcIjphPW9kO2JyZWFrO2RlZmF1bHQ6YT1FfWI9YS5nZXRQb29sZWQoZSxiLGMsZCk7U2MoYik7cmV0dXJuIGJ9fSxGZD1xLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5LFxuR2Q9cS51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHksSGQ9RWQuZ2V0RXZlbnRQcmlvcml0eSxJZD0xMCxKZD1bXTtcbmZ1bmN0aW9uIEtkKGEpe3ZhciBiPWEudGFyZ2V0SW5zdCxjPWI7ZG97aWYoIWMpe2EuYW5jZXN0b3JzLnB1c2goYyk7YnJlYWt9dmFyIGQ9YztpZigzPT09ZC50YWcpZD1kLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2Vsc2V7Zm9yKDtkLnJldHVybjspZD1kLnJldHVybjtkPTMhPT1kLnRhZz9udWxsOmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm99aWYoIWQpYnJlYWs7Yj1jLnRhZzs1IT09YiYmNiE9PWJ8fGEuYW5jZXN0b3JzLnB1c2goYyk7Yz1GYyhkKX13aGlsZShjKTtmb3IoYz0wO2M8YS5hbmNlc3RvcnMubGVuZ3RoO2MrKyl7Yj1hLmFuY2VzdG9yc1tjXTt2YXIgZT1NYyhhLm5hdGl2ZUV2ZW50KTtkPWEudG9wTGV2ZWxUeXBlO2Zvcih2YXIgZj1hLm5hdGl2ZUV2ZW50LGc9YS5ldmVudFN5c3RlbUZsYWdzLGg9bnVsbCxrPTA7azxlYS5sZW5ndGg7aysrKXt2YXIgbD1lYVtrXTtsJiYobD1sLmV4dHJhY3RFdmVudHMoZCxiLGYsZSxnKSkmJihoPXhhKGgsbCkpfUJhKGgpfX1cbnZhciBMZD0hMDtmdW5jdGlvbiBGKGEsYil7TWQoYixhLCExKX1mdW5jdGlvbiBNZChhLGIsYyl7c3dpdGNoKEhkKGIpKXtjYXNlIDA6dmFyIGQ9TmQuYmluZChudWxsLGIsMSk7YnJlYWs7Y2FzZSAxOmQ9T2QuYmluZChudWxsLGIsMSk7YnJlYWs7ZGVmYXVsdDpkPVBkLmJpbmQobnVsbCxiLDEpfWM/YS5hZGRFdmVudExpc3RlbmVyKGIsZCwhMCk6YS5hZGRFdmVudExpc3RlbmVyKGIsZCwhMSl9ZnVuY3Rpb24gTmQoYSxiLGMpe2lifHxnYigpO3ZhciBkPVBkLGU9aWI7aWI9ITA7dHJ5e2ZiKGQsYSxiLGMpfWZpbmFsbHl7KGliPWUpfHxrYigpfX1mdW5jdGlvbiBPZChhLGIsYyl7R2QoRmQsUGQuYmluZChudWxsLGEsYixjKSl9XG5mdW5jdGlvbiBRZChhLGIsYyxkKXtpZihKZC5sZW5ndGgpe3ZhciBlPUpkLnBvcCgpO2UudG9wTGV2ZWxUeXBlPWE7ZS5ldmVudFN5c3RlbUZsYWdzPWI7ZS5uYXRpdmVFdmVudD1jO2UudGFyZ2V0SW5zdD1kO2E9ZX1lbHNlIGE9e3RvcExldmVsVHlwZTphLGV2ZW50U3lzdGVtRmxhZ3M6YixuYXRpdmVFdmVudDpjLHRhcmdldEluc3Q6ZCxhbmNlc3RvcnM6W119O3RyeXtpZihiPUtkLGM9YSxqYiliKGMsdm9pZCAwKTtlbHNle2piPSEwO3RyeXtoYihiLGMsdm9pZCAwKX1maW5hbGx5e2piPSExLGtiKCl9fX1maW5hbGx5e2EudG9wTGV2ZWxUeXBlPW51bGwsYS5uYXRpdmVFdmVudD1udWxsLGEudGFyZ2V0SW5zdD1udWxsLGEuYW5jZXN0b3JzLmxlbmd0aD0wLEpkLmxlbmd0aDxJZCYmSmQucHVzaChhKX19XG5mdW5jdGlvbiBQZChhLGIsYyl7aWYoTGQpaWYoMDxuYy5sZW5ndGgmJi0xPHVjLmluZGV4T2YoYSkpYT16YyhudWxsLGEsYixjKSxuYy5wdXNoKGEpO2Vsc2V7dmFyIGQ9SGMoYSxiLGMpO251bGw9PT1kP0FjKGEsYyk6LTE8dWMuaW5kZXhPZihhKT8oYT16YyhkLGEsYixjKSxuYy5wdXNoKGEpKTpEYyhkLGEsYixjKXx8KEFjKGEsYyksUWQoYSxiLGMsbnVsbCkpfX1mdW5jdGlvbiBIYyhhLGIsYyl7dmFyIGQ9TWMoYyk7ZD1GYyhkKTtpZihudWxsIT09ZCl7dmFyIGU9ZWMoZCk7aWYobnVsbD09PWUpZD1udWxsO2Vsc2V7dmFyIGY9ZS50YWc7aWYoMTM9PT1mKXtkPWZjKGUpO2lmKG51bGwhPT1kKXJldHVybiBkO2Q9bnVsbH1lbHNlIGlmKDM9PT1mKXtpZihlLnN0YXRlTm9kZS5oeWRyYXRlKXJldHVybiAzPT09ZS50YWc/ZS5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO2Q9bnVsbH1lbHNlIGUhPT1kJiYoZD1udWxsKX19UWQoYSxiLGMsZCk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBSZChhKXtpZighWWEpcmV0dXJuITE7YT1cIm9uXCIrYTt2YXIgYj1hIGluIGRvY3VtZW50O2J8fChiPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYi5zZXRBdHRyaWJ1dGUoYSxcInJldHVybjtcIiksYj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgYlthXSk7cmV0dXJuIGJ9dmFyIFNkPW5ldyAoXCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtNYXA/V2Vha01hcDpNYXApO2Z1bmN0aW9uIHhjKGEpe3ZhciBiPVNkLmdldChhKTt2b2lkIDA9PT1iJiYoYj1uZXcgU2V0LFNkLnNldChhLGIpKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIHljKGEsYixjKXtpZighYy5oYXMoYSkpe3N3aXRjaChhKXtjYXNlIFwic2Nyb2xsXCI6TWQoYixcInNjcm9sbFwiLCEwKTticmVhaztjYXNlIFwiZm9jdXNcIjpjYXNlIFwiYmx1clwiOk1kKGIsXCJmb2N1c1wiLCEwKTtNZChiLFwiYmx1clwiLCEwKTtjLmFkZChcImJsdXJcIik7Yy5hZGQoXCJmb2N1c1wiKTticmVhaztjYXNlIFwiY2FuY2VsXCI6Y2FzZSBcImNsb3NlXCI6UmQoYSkmJk1kKGIsYSwhMCk7YnJlYWs7Y2FzZSBcImludmFsaWRcIjpjYXNlIFwic3VibWl0XCI6Y2FzZSBcInJlc2V0XCI6YnJlYWs7ZGVmYXVsdDotMT09PWNjLmluZGV4T2YoYSkmJkYoYSxiKX1jLmFkZChhKX19XG52YXIgVGQ9e2FuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiEwLGJvcmRlckltYWdlT3V0c2V0OiEwLGJvcmRlckltYWdlU2xpY2U6ITAsYm9yZGVySW1hZ2VXaWR0aDohMCxib3hGbGV4OiEwLGJveEZsZXhHcm91cDohMCxib3hPcmRpbmFsR3JvdXA6ITAsY29sdW1uQ291bnQ6ITAsY29sdW1uczohMCxmbGV4OiEwLGZsZXhHcm93OiEwLGZsZXhQb3NpdGl2ZTohMCxmbGV4U2hyaW5rOiEwLGZsZXhOZWdhdGl2ZTohMCxmbGV4T3JkZXI6ITAsZ3JpZEFyZWE6ITAsZ3JpZFJvdzohMCxncmlkUm93RW5kOiEwLGdyaWRSb3dTcGFuOiEwLGdyaWRSb3dTdGFydDohMCxncmlkQ29sdW1uOiEwLGdyaWRDb2x1bW5FbmQ6ITAsZ3JpZENvbHVtblNwYW46ITAsZ3JpZENvbHVtblN0YXJ0OiEwLGZvbnRXZWlnaHQ6ITAsbGluZUNsYW1wOiEwLGxpbmVIZWlnaHQ6ITAsb3BhY2l0eTohMCxvcmRlcjohMCxvcnBoYW5zOiEwLHRhYlNpemU6ITAsd2lkb3dzOiEwLHpJbmRleDohMCx6b29tOiEwLGZpbGxPcGFjaXR5OiEwLFxuZmxvb2RPcGFjaXR5OiEwLHN0b3BPcGFjaXR5OiEwLHN0cm9rZURhc2hhcnJheTohMCxzdHJva2VEYXNob2Zmc2V0OiEwLHN0cm9rZU1pdGVybGltaXQ6ITAsc3Ryb2tlT3BhY2l0eTohMCxzdHJva2VXaWR0aDohMH0sVWQ9W1wiV2Via2l0XCIsXCJtc1wiLFwiTW96XCIsXCJPXCJdO09iamVjdC5rZXlzKFRkKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe1VkLmZvckVhY2goZnVuY3Rpb24oYil7Yj1iK2EuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrYS5zdWJzdHJpbmcoMSk7VGRbYl09VGRbYV19KX0pO2Z1bmN0aW9uIFZkKGEsYixjKXtyZXR1cm4gbnVsbD09Ynx8XCJib29sZWFuXCI9PT10eXBlb2YgYnx8XCJcIj09PWI/XCJcIjpjfHxcIm51bWJlclwiIT09dHlwZW9mIGJ8fDA9PT1ifHxUZC5oYXNPd25Qcm9wZXJ0eShhKSYmVGRbYV0/KFwiXCIrYikudHJpbSgpOmIrXCJweFwifVxuZnVuY3Rpb24gV2QoYSxiKXthPWEuc3R5bGU7Zm9yKHZhciBjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9MD09PWMuaW5kZXhPZihcIi0tXCIpLGU9VmQoYyxiW2NdLGQpO1wiZmxvYXRcIj09PWMmJihjPVwiY3NzRmxvYXRcIik7ZD9hLnNldFByb3BlcnR5KGMsZSk6YVtjXT1lfX12YXIgWGQ9bih7bWVudWl0ZW06ITB9LHthcmVhOiEwLGJhc2U6ITAsYnI6ITAsY29sOiEwLGVtYmVkOiEwLGhyOiEwLGltZzohMCxpbnB1dDohMCxrZXlnZW46ITAsbGluazohMCxtZXRhOiEwLHBhcmFtOiEwLHNvdXJjZTohMCx0cmFjazohMCx3YnI6ITB9KTtcbmZ1bmN0aW9uIFlkKGEsYil7aWYoYil7aWYoWGRbYV0mJihudWxsIT1iLmNoaWxkcmVufHxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSl0aHJvdyBFcnJvcih1KDEzNyxhLFwiXCIpKTtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXtpZihudWxsIT1iLmNoaWxkcmVuKXRocm93IEVycm9yKHUoNjApKTtpZighKFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmXCJfX2h0bWxcImluIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHUoNjEpKTt9aWYobnVsbCE9Yi5zdHlsZSYmXCJvYmplY3RcIiE9PXR5cGVvZiBiLnN0eWxlKXRocm93IEVycm9yKHUoNjIsXCJcIikpO319XG5mdW5jdGlvbiBaZChhLGIpe2lmKC0xPT09YS5pbmRleE9mKFwiLVwiKSlyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM7c3dpdGNoKGEpe2Nhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOmNhc2UgXCJjb2xvci1wcm9maWxlXCI6Y2FzZSBcImZvbnQtZmFjZVwiOmNhc2UgXCJmb250LWZhY2Utc3JjXCI6Y2FzZSBcImZvbnQtZmFjZS11cmlcIjpjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOmNhc2UgXCJmb250LWZhY2UtbmFtZVwiOmNhc2UgXCJtaXNzaW5nLWdseXBoXCI6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMH19ZnVuY3Rpb24gJGQoYSxiKXthPTk9PT1hLm5vZGVUeXBlfHwxMT09PWEubm9kZVR5cGU/YTphLm93bmVyRG9jdW1lbnQ7dmFyIGM9eGMoYSk7Yj1qYVtiXTtmb3IodmFyIGQ9MDtkPGIubGVuZ3RoO2QrKyl5YyhiW2RdLGEsYyl9ZnVuY3Rpb24gYWUoKXt9XG5mdW5jdGlvbiBiZShhKXthPWF8fChcInVuZGVmaW5lZFwiIT09dHlwZW9mIGRvY3VtZW50P2RvY3VtZW50OnZvaWQgMCk7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhKXJldHVybiBudWxsO3RyeXtyZXR1cm4gYS5hY3RpdmVFbGVtZW50fHxhLmJvZHl9Y2F0Y2goYil7cmV0dXJuIGEuYm9keX19ZnVuY3Rpb24gY2UoYSl7Zm9yKDthJiZhLmZpcnN0Q2hpbGQ7KWE9YS5maXJzdENoaWxkO3JldHVybiBhfWZ1bmN0aW9uIGRlKGEsYil7dmFyIGM9Y2UoYSk7YT0wO2Zvcih2YXIgZDtjOyl7aWYoMz09PWMubm9kZVR5cGUpe2Q9YStjLnRleHRDb250ZW50Lmxlbmd0aDtpZihhPD1iJiZkPj1iKXJldHVybntub2RlOmMsb2Zmc2V0OmItYX07YT1kfWE6e2Zvcig7Yzspe2lmKGMubmV4dFNpYmxpbmcpe2M9Yy5uZXh0U2libGluZzticmVhayBhfWM9Yy5wYXJlbnROb2RlfWM9dm9pZCAwfWM9Y2UoYyl9fVxuZnVuY3Rpb24gZWUoYSxiKXtyZXR1cm4gYSYmYj9hPT09Yj8hMDphJiYzPT09YS5ub2RlVHlwZT8hMTpiJiYzPT09Yi5ub2RlVHlwZT9lZShhLGIucGFyZW50Tm9kZSk6XCJjb250YWluc1wiaW4gYT9hLmNvbnRhaW5zKGIpOmEuY29tcGFyZURvY3VtZW50UG9zaXRpb24/ISEoYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihiKSYxNik6ITE6ITF9ZnVuY3Rpb24gZmUoKXtmb3IodmFyIGE9d2luZG93LGI9YmUoKTtiIGluc3RhbmNlb2YgYS5IVE1MSUZyYW1lRWxlbWVudDspe3RyeXt2YXIgYz1cInN0cmluZ1wiPT09dHlwZW9mIGIuY29udGVudFdpbmRvdy5sb2NhdGlvbi5ocmVmfWNhdGNoKGQpe2M9ITF9aWYoYylhPWIuY29udGVudFdpbmRvdztlbHNlIGJyZWFrO2I9YmUoYS5kb2N1bWVudCl9cmV0dXJuIGJ9XG5mdW5jdGlvbiBnZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGImJihcImlucHV0XCI9PT1iJiYoXCJ0ZXh0XCI9PT1hLnR5cGV8fFwic2VhcmNoXCI9PT1hLnR5cGV8fFwidGVsXCI9PT1hLnR5cGV8fFwidXJsXCI9PT1hLnR5cGV8fFwicGFzc3dvcmRcIj09PWEudHlwZSl8fFwidGV4dGFyZWFcIj09PWJ8fFwidHJ1ZVwiPT09YS5jb250ZW50RWRpdGFibGUpfXZhciBoZT1cIiRcIixpZT1cIi8kXCIsamU9XCIkP1wiLGtlPVwiJCFcIixsZT1udWxsLG1lPW51bGw7ZnVuY3Rpb24gbmUoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjpyZXR1cm4hIWIuYXV0b0ZvY3VzfXJldHVybiExfVxuZnVuY3Rpb24gb2UoYSxiKXtyZXR1cm5cInRleHRhcmVhXCI9PT1hfHxcIm9wdGlvblwiPT09YXx8XCJub3NjcmlwdFwiPT09YXx8XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm51bWJlclwiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9PWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwuX19odG1sfXZhciBwZT1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0OnZvaWQgMCxxZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDp2b2lkIDA7ZnVuY3Rpb24gcmUoYSl7Zm9yKDtudWxsIT1hO2E9YS5uZXh0U2libGluZyl7dmFyIGI9YS5ub2RlVHlwZTtpZigxPT09Ynx8Mz09PWIpYnJlYWt9cmV0dXJuIGF9XG5mdW5jdGlvbiBzZShhKXthPWEucHJldmlvdXNTaWJsaW5nO2Zvcih2YXIgYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKGM9PT1oZXx8Yz09PWtlfHxjPT09amUpe2lmKDA9PT1iKXJldHVybiBhO2ItLX1lbHNlIGM9PT1pZSYmYisrfWE9YS5wcmV2aW91c1NpYmxpbmd9cmV0dXJuIG51bGx9dmFyIHRlPU1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpLHVlPVwiX19yZWFjdEludGVybmFsSW5zdGFuY2UkXCIrdGUsdmU9XCJfX3JlYWN0RXZlbnRIYW5kbGVycyRcIit0ZSx3ZT1cIl9fcmVhY3RDb250YWluZXJlJFwiK3RlO1xuZnVuY3Rpb24gRmMoYSl7dmFyIGI9YVt1ZV07aWYoYilyZXR1cm4gYjtmb3IodmFyIGM9YS5wYXJlbnROb2RlO2M7KXtpZihiPWNbd2VdfHxjW3VlXSl7Yz1iLmFsdGVybmF0ZTtpZihudWxsIT09Yi5jaGlsZHx8bnVsbCE9PWMmJm51bGwhPT1jLmNoaWxkKWZvcihhPXNlKGEpO251bGwhPT1hOyl7aWYoYz1hW3VlXSlyZXR1cm4gYzthPXNlKGEpfXJldHVybiBifWE9YztjPWEucGFyZW50Tm9kZX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBDYyhhKXthPWFbdWVdfHxhW3dlXTtyZXR1cm4hYXx8NSE9PWEudGFnJiY2IT09YS50YWcmJjEzIT09YS50YWcmJjMhPT1hLnRhZz9udWxsOmF9ZnVuY3Rpb24geGUoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGEuc3RhdGVOb2RlO3Rocm93IEVycm9yKHUoMzMpKTt9ZnVuY3Rpb24geWUoYSl7cmV0dXJuIGFbdmVdfHxudWxsfXZhciB6ZT1udWxsLEFlPW51bGwsQmU9bnVsbDtcbmZ1bmN0aW9uIENlKCl7aWYoQmUpcmV0dXJuIEJlO3ZhciBhLGI9QWUsYz1iLmxlbmd0aCxkLGU9XCJ2YWx1ZVwiaW4gemU/emUudmFsdWU6emUudGV4dENvbnRlbnQsZj1lLmxlbmd0aDtmb3IoYT0wO2E8YyYmYlthXT09PWVbYV07YSsrKTt2YXIgZz1jLWE7Zm9yKGQ9MTtkPD1nJiZiW2MtZF09PT1lW2YtZF07ZCsrKTtyZXR1cm4gQmU9ZS5zbGljZShhLDE8ZD8xLWQ6dm9pZCAwKX12YXIgRGU9RS5leHRlbmQoe2RhdGE6bnVsbH0pLEVlPUUuZXh0ZW5kKHtkYXRhOm51bGx9KSxGZT1bOSwxMywyNywzMl0sR2U9WWEmJlwiQ29tcG9zaXRpb25FdmVudFwiaW4gd2luZG93LEhlPW51bGw7WWEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmKEhlPWRvY3VtZW50LmRvY3VtZW50TW9kZSk7XG52YXIgSWU9WWEmJlwiVGV4dEV2ZW50XCJpbiB3aW5kb3cmJiFIZSxKZT1ZYSYmKCFHZXx8SGUmJjg8SGUmJjExPj1IZSksS2U9U3RyaW5nLmZyb21DaGFyQ29kZSgzMiksTGU9e2JlZm9yZUlucHV0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQmVmb3JlSW5wdXRcIixjYXB0dXJlZDpcIm9uQmVmb3JlSW5wdXRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpbXCJjb21wb3NpdGlvbmVuZFwiLFwia2V5cHJlc3NcIixcInRleHRJbnB1dFwiLFwicGFzdGVcIl19LGNvbXBvc2l0aW9uRW5kOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25FbmRcIixjYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25FbmRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb25lbmQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIil9LGNvbXBvc2l0aW9uU3RhcnQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvblN0YXJ0XCIsXG5jYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25TdGFydENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbnN0YXJ0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpfSxjb21wb3NpdGlvblVwZGF0ZTp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uVXBkYXRlXCIsY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uVXBkYXRlQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9udXBkYXRlIGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpfX0sTWU9ITE7XG5mdW5jdGlvbiBOZShhLGIpe3N3aXRjaChhKXtjYXNlIFwia2V5dXBcIjpyZXR1cm4tMSE9PUZlLmluZGV4T2YoYi5rZXlDb2RlKTtjYXNlIFwia2V5ZG93blwiOnJldHVybiAyMjkhPT1iLmtleUNvZGU7Y2FzZSBcImtleXByZXNzXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJibHVyXCI6cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gT2UoYSl7YT1hLmRldGFpbDtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJlwiZGF0YVwiaW4gYT9hLmRhdGE6bnVsbH12YXIgUGU9ITE7ZnVuY3Rpb24gUWUoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIE9lKGIpO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDMyIT09Yi53aGljaClyZXR1cm4gbnVsbDtNZT0hMDtyZXR1cm4gS2U7Y2FzZSBcInRleHRJbnB1dFwiOnJldHVybiBhPWIuZGF0YSxhPT09S2UmJk1lP251bGw6YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbmZ1bmN0aW9uIFJlKGEsYil7aWYoUGUpcmV0dXJuXCJjb21wb3NpdGlvbmVuZFwiPT09YXx8IUdlJiZOZShhLGIpPyhhPUNlKCksQmU9QWU9emU9bnVsbCxQZT0hMSxhKTpudWxsO3N3aXRjaChhKXtjYXNlIFwicGFzdGVcIjpyZXR1cm4gbnVsbDtjYXNlIFwia2V5cHJlc3NcIjppZighKGIuY3RybEtleXx8Yi5hbHRLZXl8fGIubWV0YUtleSl8fGIuY3RybEtleSYmYi5hbHRLZXkpe2lmKGIuY2hhciYmMTxiLmNoYXIubGVuZ3RoKXJldHVybiBiLmNoYXI7aWYoYi53aGljaClyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShiLndoaWNoKX1yZXR1cm4gbnVsbDtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gSmUmJlwia29cIiE9PWIubG9jYWxlP251bGw6Yi5kYXRhO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxudmFyIFNlPXtldmVudFR5cGVzOkxlLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU7aWYoR2UpYjp7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbnN0YXJ0XCI6dmFyIGY9TGUuY29tcG9zaXRpb25TdGFydDticmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOmY9TGUuY29tcG9zaXRpb25FbmQ7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb251cGRhdGVcIjpmPUxlLmNvbXBvc2l0aW9uVXBkYXRlO2JyZWFrIGJ9Zj12b2lkIDB9ZWxzZSBQZT9OZShhLGMpJiYoZj1MZS5jb21wb3NpdGlvbkVuZCk6XCJrZXlkb3duXCI9PT1hJiYyMjk9PT1jLmtleUNvZGUmJihmPUxlLmNvbXBvc2l0aW9uU3RhcnQpO2Y/KEplJiZcImtvXCIhPT1jLmxvY2FsZSYmKFBlfHxmIT09TGUuY29tcG9zaXRpb25TdGFydD9mPT09TGUuY29tcG9zaXRpb25FbmQmJlBlJiYoZT1DZSgpKTooemU9ZCxBZT1cInZhbHVlXCJpbiB6ZT96ZS52YWx1ZTp6ZS50ZXh0Q29udGVudCxQZT0hMCkpLGY9RGUuZ2V0UG9vbGVkKGYsXG5iLGMsZCksZT9mLmRhdGE9ZTooZT1PZShjKSxudWxsIT09ZSYmKGYuZGF0YT1lKSksU2MoZiksZT1mKTplPW51bGw7KGE9SWU/UWUoYSxjKTpSZShhLGMpKT8oYj1FZS5nZXRQb29sZWQoTGUuYmVmb3JlSW5wdXQsYixjLGQpLGIuZGF0YT1hLFNjKGIpKTpiPW51bGw7cmV0dXJuIG51bGw9PT1lP2I6bnVsbD09PWI/ZTpbZSxiXX19LFRlPXtjb2xvcjohMCxkYXRlOiEwLGRhdGV0aW1lOiEwLFwiZGF0ZXRpbWUtbG9jYWxcIjohMCxlbWFpbDohMCxtb250aDohMCxudW1iZXI6ITAscGFzc3dvcmQ6ITAscmFuZ2U6ITAsc2VhcmNoOiEwLHRlbDohMCx0ZXh0OiEwLHRpbWU6ITAsdXJsOiEwLHdlZWs6ITB9O2Z1bmN0aW9uIFVlKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm5cImlucHV0XCI9PT1iPyEhVGVbYS50eXBlXTpcInRleHRhcmVhXCI9PT1iPyEwOiExfVxudmFyIFZlPXtjaGFuZ2U6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25DaGFuZ2VcIixjYXB0dXJlZDpcIm9uQ2hhbmdlQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNoYW5nZSBjbGljayBmb2N1cyBpbnB1dCBrZXlkb3duIGtleXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKX19O2Z1bmN0aW9uIFdlKGEsYixjKXthPUUuZ2V0UG9vbGVkKFZlLmNoYW5nZSxhLGIsYyk7YS50eXBlPVwiY2hhbmdlXCI7Y2IoYyk7U2MoYSk7cmV0dXJuIGF9dmFyIFhlPW51bGwsWWU9bnVsbDtmdW5jdGlvbiBaZShhKXtCYShhKX1mdW5jdGlvbiAkZShhKXt2YXIgYj14ZShhKTtpZih6YihiKSlyZXR1cm4gYX1mdW5jdGlvbiBhZihhLGIpe2lmKFwiY2hhbmdlXCI9PT1hKXJldHVybiBifXZhciBiZj0hMTtZYSYmKGJmPVJkKFwiaW5wdXRcIikmJighZG9jdW1lbnQuZG9jdW1lbnRNb2RlfHw5PGRvY3VtZW50LmRvY3VtZW50TW9kZSkpO1xuZnVuY3Rpb24gY2YoKXtYZSYmKFhlLmRldGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLGRmKSxZZT1YZT1udWxsKX1mdW5jdGlvbiBkZihhKXtpZihcInZhbHVlXCI9PT1hLnByb3BlcnR5TmFtZSYmJGUoWWUpKWlmKGE9V2UoWWUsYSxNYyhhKSksaWIpQmEoYSk7ZWxzZXtpYj0hMDt0cnl7ZWIoWmUsYSl9ZmluYWxseXtpYj0hMSxrYigpfX19ZnVuY3Rpb24gZWYoYSxiLGMpe1wiZm9jdXNcIj09PWE/KGNmKCksWGU9YixZZT1jLFhlLmF0dGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLGRmKSk6XCJibHVyXCI9PT1hJiZjZigpfWZ1bmN0aW9uIGZmKGEpe2lmKFwic2VsZWN0aW9uY2hhbmdlXCI9PT1hfHxcImtleXVwXCI9PT1hfHxcImtleWRvd25cIj09PWEpcmV0dXJuICRlKFllKX1mdW5jdGlvbiBnZihhLGIpe2lmKFwiY2xpY2tcIj09PWEpcmV0dXJuICRlKGIpfWZ1bmN0aW9uIGhmKGEsYil7aWYoXCJpbnB1dFwiPT09YXx8XCJjaGFuZ2VcIj09PWEpcmV0dXJuICRlKGIpfVxudmFyIGpmPXtldmVudFR5cGVzOlZlLF9pc0lucHV0RXZlbnRTdXBwb3J0ZWQ6YmYsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1iP3hlKGIpOndpbmRvdyxmPWUubm9kZU5hbWUmJmUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtpZihcInNlbGVjdFwiPT09Znx8XCJpbnB1dFwiPT09ZiYmXCJmaWxlXCI9PT1lLnR5cGUpdmFyIGc9YWY7ZWxzZSBpZihVZShlKSlpZihiZilnPWhmO2Vsc2V7Zz1mZjt2YXIgaD1lZn1lbHNlKGY9ZS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWYudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWUudHlwZXx8XCJyYWRpb1wiPT09ZS50eXBlKSYmKGc9Z2YpO2lmKGcmJihnPWcoYSxiKSkpcmV0dXJuIFdlKGcsYyxkKTtoJiZoKGEsZSxiKTtcImJsdXJcIj09PWEmJihhPWUuX3dyYXBwZXJTdGF0ZSkmJmEuY29udHJvbGxlZCYmXCJudW1iZXJcIj09PWUudHlwZSYmRmIoZSxcIm51bWJlclwiLGUudmFsdWUpfX0sa2Y9e21vdXNlRW50ZXI6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvbk1vdXNlRW50ZXJcIixcbmRlcGVuZGVuY2llczpbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdfSxtb3VzZUxlYXZlOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUxlYXZlXCIsZGVwZW5kZW5jaWVzOltcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl19LHBvaW50ZXJFbnRlcjp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uUG9pbnRlckVudGVyXCIsZGVwZW5kZW5jaWVzOltcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdfSxwb2ludGVyTGVhdmU6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvblBvaW50ZXJMZWF2ZVwiLGRlcGVuZGVuY2llczpbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXX19LGxmLG1mPXtldmVudFR5cGVzOmtmLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1cIm1vdXNlb3ZlclwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSxnPVwibW91c2VvdXRcIj09PWF8fFwicG9pbnRlcm91dFwiPT09YTtpZihmJiYwPT09KGUmMzIpJiYoYy5yZWxhdGVkVGFyZ2V0fHxjLmZyb21FbGVtZW50KXx8IWcmJiFmKXJldHVybiBudWxsO1xuZT1kLndpbmRvdz09PWQ/ZDooZT1kLm93bmVyRG9jdW1lbnQpP2UuZGVmYXVsdFZpZXd8fGUucGFyZW50V2luZG93OndpbmRvdztpZihnKXtpZihnPWIsYj0oYj1jLnJlbGF0ZWRUYXJnZXR8fGMudG9FbGVtZW50KT9GYyhiKTpudWxsLG51bGwhPT1iJiYoZj1lYyhiKSxiIT09Znx8NSE9PWIudGFnJiY2IT09Yi50YWcpKWI9bnVsbH1lbHNlIGc9bnVsbDtpZihnPT09YilyZXR1cm4gbnVsbDtpZihcIm1vdXNlb3V0XCI9PT1hfHxcIm1vdXNlb3ZlclwiPT09YSl7dmFyIGg9bmQ7dmFyIGs9a2YubW91c2VMZWF2ZTt2YXIgbD1rZi5tb3VzZUVudGVyO3ZhciBtPVwibW91c2VcIn1lbHNlIGlmKFwicG9pbnRlcm91dFwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSloPW9kLGs9a2YucG9pbnRlckxlYXZlLGw9a2YucG9pbnRlckVudGVyLG09XCJwb2ludGVyXCI7YT1udWxsPT1nP2U6eGUoZyk7ZT1udWxsPT1iP2U6eGUoYik7az1oLmdldFBvb2xlZChrLGcsYyxkKTtrLnR5cGU9bStcImxlYXZlXCI7ay50YXJnZXQ9XG5hO2sucmVsYXRlZFRhcmdldD1lO2Q9aC5nZXRQb29sZWQobCxiLGMsZCk7ZC50eXBlPW0rXCJlbnRlclwiO2QudGFyZ2V0PWU7ZC5yZWxhdGVkVGFyZ2V0PWE7aD1nO209YjtpZihoJiZtKWE6e2w9aDthPW07Zz0wO2ZvcihiPWw7YjtiPU5jKGIpKWcrKztiPTA7Zm9yKGU9YTtlO2U9TmMoZSkpYisrO2Zvcig7MDxnLWI7KWw9TmMobCksZy0tO2Zvcig7MDxiLWc7KWE9TmMoYSksYi0tO2Zvcig7Zy0tOyl7aWYobD09PWF8fGw9PT1hLmFsdGVybmF0ZSlicmVhayBhO2w9TmMobCk7YT1OYyhhKX1sPW51bGx9ZWxzZSBsPW51bGw7YT1sO2ZvcihsPVtdO2gmJmghPT1hOyl7Zz1oLmFsdGVybmF0ZTtpZihudWxsIT09ZyYmZz09PWEpYnJlYWs7bC5wdXNoKGgpO2g9TmMoaCl9Zm9yKGg9W107bSYmbSE9PWE7KXtnPW0uYWx0ZXJuYXRlO2lmKG51bGwhPT1nJiZnPT09YSlicmVhaztoLnB1c2gobSk7bT1OYyhtKX1mb3IobT0wO208bC5sZW5ndGg7bSsrKVFjKGxbbV0sXCJidWJibGVkXCIsayk7Zm9yKG09XG5oLmxlbmd0aDswPG0tLTspUWMoaFttXSxcImNhcHR1cmVkXCIsZCk7aWYoYz09PWxmKXJldHVybiBsZj1udWxsLFtrXTtsZj1jO3JldHVybltrLGRdfX07ZnVuY3Rpb24gbmYoYSxiKXtyZXR1cm4gYT09PWImJigwIT09YXx8MS9hPT09MS9iKXx8YSE9PWEmJmIhPT1ifXZhciBvZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgT2JqZWN0LmlzP09iamVjdC5pczpuZixwZj1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O2Z1bmN0aW9uIHFmKGEsYil7aWYob2YoYSxiKSlyZXR1cm4hMDtpZihcIm9iamVjdFwiIT09dHlwZW9mIGF8fG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGJ8fG51bGw9PT1iKXJldHVybiExO3ZhciBjPU9iamVjdC5rZXlzKGEpLGQ9T2JqZWN0LmtleXMoYik7aWYoYy5sZW5ndGghPT1kLmxlbmd0aClyZXR1cm4hMTtmb3IoZD0wO2Q8Yy5sZW5ndGg7ZCsrKWlmKCFwZi5jYWxsKGIsY1tkXSl8fCFvZihhW2NbZF1dLGJbY1tkXV0pKXJldHVybiExO3JldHVybiEwfVxudmFyIHJmPVlhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJjExPj1kb2N1bWVudC5kb2N1bWVudE1vZGUsc2Y9e3NlbGVjdDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvblNlbGVjdFwiLGNhcHR1cmVkOlwib25TZWxlY3RDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29udGV4dG1lbnUgZHJhZ2VuZCBmb2N1cyBrZXlkb3duIGtleXVwIG1vdXNlZG93biBtb3VzZXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKX19LHRmPW51bGwsdWY9bnVsbCx2Zj1udWxsLHdmPSExO1xuZnVuY3Rpb24geGYoYSxiKXt2YXIgYz1iLndpbmRvdz09PWI/Yi5kb2N1bWVudDo5PT09Yi5ub2RlVHlwZT9iOmIub3duZXJEb2N1bWVudDtpZih3Znx8bnVsbD09dGZ8fHRmIT09YmUoYykpcmV0dXJuIG51bGw7Yz10ZjtcInNlbGVjdGlvblN0YXJ0XCJpbiBjJiZnZShjKT9jPXtzdGFydDpjLnNlbGVjdGlvblN0YXJ0LGVuZDpjLnNlbGVjdGlvbkVuZH06KGM9KGMub3duZXJEb2N1bWVudCYmYy5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3fHx3aW5kb3cpLmdldFNlbGVjdGlvbigpLGM9e2FuY2hvck5vZGU6Yy5hbmNob3JOb2RlLGFuY2hvck9mZnNldDpjLmFuY2hvck9mZnNldCxmb2N1c05vZGU6Yy5mb2N1c05vZGUsZm9jdXNPZmZzZXQ6Yy5mb2N1c09mZnNldH0pO3JldHVybiB2ZiYmcWYodmYsYyk/bnVsbDoodmY9YyxhPUUuZ2V0UG9vbGVkKHNmLnNlbGVjdCx1ZixhLGIpLGEudHlwZT1cInNlbGVjdFwiLGEudGFyZ2V0PXRmLFNjKGEpLGEpfVxudmFyIHlmPXtldmVudFR5cGVzOnNmLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9ZC53aW5kb3c9PT1kP2QuZG9jdW1lbnQ6OT09PWQubm9kZVR5cGU/ZDpkLm93bmVyRG9jdW1lbnQsZjtpZighKGY9IWUpKXthOntlPXhjKGUpO2Y9amEub25TZWxlY3Q7Zm9yKHZhciBnPTA7ZzxmLmxlbmd0aDtnKyspaWYoIWUuaGFzKGZbZ10pKXtlPSExO2JyZWFrIGF9ZT0hMH1mPSFlfWlmKGYpcmV0dXJuIG51bGw7ZT1iP3hlKGIpOndpbmRvdztzd2l0Y2goYSl7Y2FzZSBcImZvY3VzXCI6aWYoVWUoZSl8fFwidHJ1ZVwiPT09ZS5jb250ZW50RWRpdGFibGUpdGY9ZSx1Zj1iLHZmPW51bGw7YnJlYWs7Y2FzZSBcImJsdXJcIjp2Zj11Zj10Zj1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZWRvd25cIjp3Zj0hMDticmVhaztjYXNlIFwiY29udGV4dG1lbnVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJkcmFnZW5kXCI6cmV0dXJuIHdmPSExLHhmKGMsZCk7Y2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOmlmKHJmKWJyZWFrO1xuY2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjpyZXR1cm4geGYoYyxkKX1yZXR1cm4gbnVsbH19O0NhLmluamVjdEV2ZW50UGx1Z2luT3JkZXIoXCJSZXNwb25kZXJFdmVudFBsdWdpbiBTaW1wbGVFdmVudFBsdWdpbiBFbnRlckxlYXZlRXZlbnRQbHVnaW4gQ2hhbmdlRXZlbnRQbHVnaW4gU2VsZWN0RXZlbnRQbHVnaW4gQmVmb3JlSW5wdXRFdmVudFBsdWdpblwiLnNwbGl0KFwiIFwiKSk7dmFyIHpmPUNjO3NhPXllO3VhPXpmO3ZhPXhlO0NhLmluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSh7U2ltcGxlRXZlbnRQbHVnaW46RWQsRW50ZXJMZWF2ZUV2ZW50UGx1Z2luOm1mLENoYW5nZUV2ZW50UGx1Z2luOmpmLFNlbGVjdEV2ZW50UGx1Z2luOnlmLEJlZm9yZUlucHV0RXZlbnRQbHVnaW46U2V9KTtuZXcgU2V0O3ZhciBBZj1bXSxCZj0tMTtmdW5jdGlvbiBHKGEpezA+QmZ8fChhLmN1cnJlbnQ9QWZbQmZdLEFmW0JmXT1udWxsLEJmLS0pfVxuZnVuY3Rpb24gSShhLGIpe0JmKys7QWZbQmZdPWEuY3VycmVudDthLmN1cnJlbnQ9Yn12YXIgQ2Y9e30sSj17Y3VycmVudDpDZn0sSz17Y3VycmVudDohMX0sRGY9Q2Y7ZnVuY3Rpb24gRWYoYSxiKXt2YXIgYz1hLnR5cGUuY29udGV4dFR5cGVzO2lmKCFjKXJldHVybiBDZjt2YXIgZD1hLnN0YXRlTm9kZTtpZihkJiZkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9PT1iKXJldHVybiBkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0O3ZhciBlPXt9LGY7Zm9yKGYgaW4gYyllW2ZdPWJbZl07ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWIsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1lKTtyZXR1cm4gZX1mdW5jdGlvbiBMKGEpe2E9YS5jaGlsZENvbnRleHRUeXBlcztyZXR1cm4gbnVsbCE9PWEmJnZvaWQgMCE9PWF9XG5mdW5jdGlvbiBGZihhKXtHKEssYSk7RyhKLGEpfWZ1bmN0aW9uIEdmKGEpe0coSyxhKTtHKEosYSl9ZnVuY3Rpb24gSGYoYSxiLGMpe2lmKEouY3VycmVudCE9PUNmKXRocm93IEVycm9yKHUoMTY4KSk7SShKLGIsYSk7SShLLGMsYSl9ZnVuY3Rpb24gSWYoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2E9Yi5jaGlsZENvbnRleHRUeXBlcztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5nZXRDaGlsZENvbnRleHQpcmV0dXJuIGM7ZD1kLmdldENoaWxkQ29udGV4dCgpO2Zvcih2YXIgZSBpbiBkKWlmKCEoZSBpbiBhKSl0aHJvdyBFcnJvcih1KDEwOCxXYShiKXx8XCJVbmtub3duXCIsZSkpO3JldHVybiBuKHt9LGMse30sZCl9ZnVuY3Rpb24gSmYoYSl7dmFyIGI9YS5zdGF0ZU5vZGU7Yj1iJiZiLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0fHxDZjtEZj1KLmN1cnJlbnQ7SShKLGIsYSk7SShLLEsuY3VycmVudCxhKTtyZXR1cm4hMH1cbmZ1bmN0aW9uIEtmKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTtpZighZCl0aHJvdyBFcnJvcih1KDE2OSkpO2M/KGI9SWYoYSxiLERmKSxkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0PWIsRyhLLGEpLEcoSixhKSxJKEosYixhKSk6RyhLLGEpO0koSyxjLGEpfVxudmFyIExmPXEudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5LE1mPXEudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayxOZj1xLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrLE9mPXEudW5zdGFibGVfc2hvdWxkWWllbGQsUGY9cS51bnN0YWJsZV9yZXF1ZXN0UGFpbnQsUWY9cS51bnN0YWJsZV9ub3csUmY9cS51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCxTZj1xLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5LFRmPXEudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHksVWY9cS51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSxWZj1xLnVuc3RhYmxlX0xvd1ByaW9yaXR5LFdmPXEudW5zdGFibGVfSWRsZVByaW9yaXR5LFhmPXt9LFlmPXZvaWQgMCE9PVBmP1BmOmZ1bmN0aW9uKCl7fSxaZj1udWxsLCRmPW51bGwsYWc9ITEsYmc9UWYoKSxjZz0xRTQ+Ymc/UWY6ZnVuY3Rpb24oKXtyZXR1cm4gUWYoKS1iZ307XG5mdW5jdGlvbiBkZygpe3N3aXRjaChSZigpKXtjYXNlIFNmOnJldHVybiA5OTtjYXNlIFRmOnJldHVybiA5ODtjYXNlIFVmOnJldHVybiA5NztjYXNlIFZmOnJldHVybiA5NjtjYXNlIFdmOnJldHVybiA5NTtkZWZhdWx0OnRocm93IEVycm9yKHUoMzMyKSk7fX1mdW5jdGlvbiBlZyhhKXtzd2l0Y2goYSl7Y2FzZSA5OTpyZXR1cm4gU2Y7Y2FzZSA5ODpyZXR1cm4gVGY7Y2FzZSA5NzpyZXR1cm4gVWY7Y2FzZSA5NjpyZXR1cm4gVmY7Y2FzZSA5NTpyZXR1cm4gV2Y7ZGVmYXVsdDp0aHJvdyBFcnJvcih1KDMzMikpO319ZnVuY3Rpb24gZmcoYSxiKXthPWVnKGEpO3JldHVybiBMZihhLGIpfWZ1bmN0aW9uIGdnKGEsYixjKXthPWVnKGEpO3JldHVybiBNZihhLGIsYyl9ZnVuY3Rpb24gaGcoYSl7bnVsbD09PVpmPyhaZj1bYV0sJGY9TWYoU2YsaWcpKTpaZi5wdXNoKGEpO3JldHVybiBYZn1mdW5jdGlvbiBqZygpe2lmKG51bGwhPT0kZil7dmFyIGE9JGY7JGY9bnVsbDtOZihhKX1pZygpfVxuZnVuY3Rpb24gaWcoKXtpZighYWcmJm51bGwhPT1aZil7YWc9ITA7dmFyIGE9MDt0cnl7dmFyIGI9WmY7ZmcoOTksZnVuY3Rpb24oKXtmb3IoO2E8Yi5sZW5ndGg7YSsrKXt2YXIgYz1iW2FdO2RvIGM9YyghMCk7d2hpbGUobnVsbCE9PWMpfX0pO1pmPW51bGx9Y2F0Y2goYyl7dGhyb3cgbnVsbCE9PVpmJiYoWmY9WmYuc2xpY2UoYSsxKSksTWYoU2YsamcpLGM7fWZpbmFsbHl7YWc9ITF9fX12YXIga2c9MztmdW5jdGlvbiBsZyhhLGIsYyl7Yy89MTA7cmV0dXJuIDEwNzM3NDE4MjEtKCgoMTA3Mzc0MTgyMS1hK2IvMTApL2N8MCkrMSkqY31mdW5jdGlvbiBtZyhhLGIpe2lmKGEmJmEuZGVmYXVsdFByb3BzKXtiPW4oe30sYik7YT1hLmRlZmF1bHRQcm9wcztmb3IodmFyIGMgaW4gYSl2b2lkIDA9PT1iW2NdJiYoYltjXT1hW2NdKX1yZXR1cm4gYn12YXIgbmc9e2N1cnJlbnQ6bnVsbH0sb2c9bnVsbCxwZz1udWxsLHFnPW51bGw7ZnVuY3Rpb24gcmcoKXtxZz1wZz1vZz1udWxsfVxuZnVuY3Rpb24gc2coYSxiKXt2YXIgYz1hLnR5cGUuX2NvbnRleHQ7SShuZyxjLl9jdXJyZW50VmFsdWUsYSk7Yy5fY3VycmVudFZhbHVlPWJ9ZnVuY3Rpb24gdGcoYSl7dmFyIGI9bmcuY3VycmVudDtHKG5nLGEpO2EudHlwZS5fY29udGV4dC5fY3VycmVudFZhbHVlPWJ9ZnVuY3Rpb24gdWcoYSxiKXtmb3IoO251bGwhPT1hOyl7dmFyIGM9YS5hbHRlcm5hdGU7aWYoYS5jaGlsZEV4cGlyYXRpb25UaW1lPGIpYS5jaGlsZEV4cGlyYXRpb25UaW1lPWIsbnVsbCE9PWMmJmMuY2hpbGRFeHBpcmF0aW9uVGltZTxiJiYoYy5jaGlsZEV4cGlyYXRpb25UaW1lPWIpO2Vsc2UgaWYobnVsbCE9PWMmJmMuY2hpbGRFeHBpcmF0aW9uVGltZTxiKWMuY2hpbGRFeHBpcmF0aW9uVGltZT1iO2Vsc2UgYnJlYWs7YT1hLnJldHVybn19XG5mdW5jdGlvbiB2ZyhhLGIpe29nPWE7cWc9cGc9bnVsbDthPWEuZGVwZW5kZW5jaWVzO251bGwhPT1hJiZudWxsIT09YS5maXJzdENvbnRleHQmJihhLmV4cGlyYXRpb25UaW1lPj1iJiYod2c9ITApLGEuZmlyc3RDb250ZXh0PW51bGwpfWZ1bmN0aW9uIHhnKGEsYil7aWYocWchPT1hJiYhMSE9PWImJjAhPT1iKXtpZihcIm51bWJlclwiIT09dHlwZW9mIGJ8fDEwNzM3NDE4MjM9PT1iKXFnPWEsYj0xMDczNzQxODIzO2I9e2NvbnRleHQ6YSxvYnNlcnZlZEJpdHM6YixuZXh0Om51bGx9O2lmKG51bGw9PT1wZyl7aWYobnVsbD09PW9nKXRocm93IEVycm9yKHUoMzA4KSk7cGc9YjtvZy5kZXBlbmRlbmNpZXM9e2V4cGlyYXRpb25UaW1lOjAsZmlyc3RDb250ZXh0OmIscmVzcG9uZGVyczpudWxsfX1lbHNlIHBnPXBnLm5leHQ9Yn1yZXR1cm4gYS5fY3VycmVudFZhbHVlfXZhciB5Zz0hMTtcbmZ1bmN0aW9uIHpnKGEpe3JldHVybntiYXNlU3RhdGU6YSxmaXJzdFVwZGF0ZTpudWxsLGxhc3RVcGRhdGU6bnVsbCxmaXJzdENhcHR1cmVkVXBkYXRlOm51bGwsbGFzdENhcHR1cmVkVXBkYXRlOm51bGwsZmlyc3RFZmZlY3Q6bnVsbCxsYXN0RWZmZWN0Om51bGwsZmlyc3RDYXB0dXJlZEVmZmVjdDpudWxsLGxhc3RDYXB0dXJlZEVmZmVjdDpudWxsfX1mdW5jdGlvbiBBZyhhKXtyZXR1cm57YmFzZVN0YXRlOmEuYmFzZVN0YXRlLGZpcnN0VXBkYXRlOmEuZmlyc3RVcGRhdGUsbGFzdFVwZGF0ZTphLmxhc3RVcGRhdGUsZmlyc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGxhc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGZpcnN0RWZmZWN0Om51bGwsbGFzdEVmZmVjdDpudWxsLGZpcnN0Q2FwdHVyZWRFZmZlY3Q6bnVsbCxsYXN0Q2FwdHVyZWRFZmZlY3Q6bnVsbH19XG5mdW5jdGlvbiBCZyhhLGIpe3JldHVybntleHBpcmF0aW9uVGltZTphLHN1c3BlbnNlQ29uZmlnOmIsdGFnOjAscGF5bG9hZDpudWxsLGNhbGxiYWNrOm51bGwsbmV4dDpudWxsLG5leHRFZmZlY3Q6bnVsbH19ZnVuY3Rpb24gQ2coYSxiKXtudWxsPT09YS5sYXN0VXBkYXRlP2EuZmlyc3RVcGRhdGU9YS5sYXN0VXBkYXRlPWI6KGEubGFzdFVwZGF0ZS5uZXh0PWIsYS5sYXN0VXBkYXRlPWIpfVxuZnVuY3Rpb24gRGcoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtpZihudWxsPT09Yyl7dmFyIGQ9YS51cGRhdGVRdWV1ZTt2YXIgZT1udWxsO251bGw9PT1kJiYoZD1hLnVwZGF0ZVF1ZXVlPXpnKGEubWVtb2l6ZWRTdGF0ZSkpfWVsc2UgZD1hLnVwZGF0ZVF1ZXVlLGU9Yy51cGRhdGVRdWV1ZSxudWxsPT09ZD9udWxsPT09ZT8oZD1hLnVwZGF0ZVF1ZXVlPXpnKGEubWVtb2l6ZWRTdGF0ZSksZT1jLnVwZGF0ZVF1ZXVlPXpnKGMubWVtb2l6ZWRTdGF0ZSkpOmQ9YS51cGRhdGVRdWV1ZT1BZyhlKTpudWxsPT09ZSYmKGU9Yy51cGRhdGVRdWV1ZT1BZyhkKSk7bnVsbD09PWV8fGQ9PT1lP0NnKGQsYik6bnVsbD09PWQubGFzdFVwZGF0ZXx8bnVsbD09PWUubGFzdFVwZGF0ZT8oQ2coZCxiKSxDZyhlLGIpKTooQ2coZCxiKSxlLmxhc3RVcGRhdGU9Yil9XG5mdW5jdGlvbiBFZyhhLGIpe3ZhciBjPWEudXBkYXRlUXVldWU7Yz1udWxsPT09Yz9hLnVwZGF0ZVF1ZXVlPXpnKGEubWVtb2l6ZWRTdGF0ZSk6RmcoYSxjKTtudWxsPT09Yy5sYXN0Q2FwdHVyZWRVcGRhdGU/Yy5maXJzdENhcHR1cmVkVXBkYXRlPWMubGFzdENhcHR1cmVkVXBkYXRlPWI6KGMubGFzdENhcHR1cmVkVXBkYXRlLm5leHQ9YixjLmxhc3RDYXB0dXJlZFVwZGF0ZT1iKX1mdW5jdGlvbiBGZyhhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiZiPT09Yy51cGRhdGVRdWV1ZSYmKGI9YS51cGRhdGVRdWV1ZT1BZyhiKSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiBHZyhhLGIsYyxkLGUsZil7c3dpdGNoKGMudGFnKXtjYXNlIDE6cmV0dXJuIGE9Yy5wYXlsb2FkLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2EuY2FsbChmLGQsZSk6YTtjYXNlIDM6YS5lZmZlY3RUYWc9YS5lZmZlY3RUYWcmLTQwOTd8NjQ7Y2FzZSAwOmE9Yy5wYXlsb2FkO2U9XCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YS5jYWxsKGYsZCxlKTphO2lmKG51bGw9PT1lfHx2b2lkIDA9PT1lKWJyZWFrO3JldHVybiBuKHt9LGQsZSk7Y2FzZSAyOnlnPSEwfXJldHVybiBkfVxuZnVuY3Rpb24gSGcoYSxiLGMsZCxlKXt5Zz0hMTtiPUZnKGEsYik7Zm9yKHZhciBmPWIuYmFzZVN0YXRlLGc9bnVsbCxoPTAsaz1iLmZpcnN0VXBkYXRlLGw9ZjtudWxsIT09azspe3ZhciBtPWsuZXhwaXJhdGlvblRpbWU7bTxlPyhudWxsPT09ZyYmKGc9ayxmPWwpLGg8bSYmKGg9bSkpOihJZyhtLGsuc3VzcGVuc2VDb25maWcpLGw9R2coYSxiLGssbCxjLGQpLG51bGwhPT1rLmNhbGxiYWNrJiYoYS5lZmZlY3RUYWd8PTMyLGsubmV4dEVmZmVjdD1udWxsLG51bGw9PT1iLmxhc3RFZmZlY3Q/Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9azooYi5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9ayxiLmxhc3RFZmZlY3Q9aykpKTtrPWsubmV4dH1tPW51bGw7Zm9yKGs9Yi5maXJzdENhcHR1cmVkVXBkYXRlO251bGwhPT1rOyl7dmFyIEM9ay5leHBpcmF0aW9uVGltZTtDPGU/KG51bGw9PT1tJiYobT1rLG51bGw9PT1nJiYoZj1sKSksaDxDJiYoaD1DKSk6KGw9R2coYSxiLGssbCxjLGQpLG51bGwhPT1cbmsuY2FsbGJhY2smJihhLmVmZmVjdFRhZ3w9MzIsay5uZXh0RWZmZWN0PW51bGwsbnVsbD09PWIubGFzdENhcHR1cmVkRWZmZWN0P2IuZmlyc3RDYXB0dXJlZEVmZmVjdD1iLmxhc3RDYXB0dXJlZEVmZmVjdD1rOihiLmxhc3RDYXB0dXJlZEVmZmVjdC5uZXh0RWZmZWN0PWssYi5sYXN0Q2FwdHVyZWRFZmZlY3Q9aykpKTtrPWsubmV4dH1udWxsPT09ZyYmKGIubGFzdFVwZGF0ZT1udWxsKTtudWxsPT09bT9iLmxhc3RDYXB0dXJlZFVwZGF0ZT1udWxsOmEuZWZmZWN0VGFnfD0zMjtudWxsPT09ZyYmbnVsbD09PW0mJihmPWwpO2IuYmFzZVN0YXRlPWY7Yi5maXJzdFVwZGF0ZT1nO2IuZmlyc3RDYXB0dXJlZFVwZGF0ZT1tO0pnKGgpO2EuZXhwaXJhdGlvblRpbWU9aDthLm1lbW9pemVkU3RhdGU9bH1cbmZ1bmN0aW9uIEtnKGEsYixjKXtudWxsIT09Yi5maXJzdENhcHR1cmVkVXBkYXRlJiYobnVsbCE9PWIubGFzdFVwZGF0ZSYmKGIubGFzdFVwZGF0ZS5uZXh0PWIuZmlyc3RDYXB0dXJlZFVwZGF0ZSxiLmxhc3RVcGRhdGU9Yi5sYXN0Q2FwdHVyZWRVcGRhdGUpLGIuZmlyc3RDYXB0dXJlZFVwZGF0ZT1iLmxhc3RDYXB0dXJlZFVwZGF0ZT1udWxsKTtMZyhiLmZpcnN0RWZmZWN0LGMpO2IuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PW51bGw7TGcoYi5maXJzdENhcHR1cmVkRWZmZWN0LGMpO2IuZmlyc3RDYXB0dXJlZEVmZmVjdD1iLmxhc3RDYXB0dXJlZEVmZmVjdD1udWxsfWZ1bmN0aW9uIExnKGEsYil7Zm9yKDtudWxsIT09YTspe3ZhciBjPWEuY2FsbGJhY2s7aWYobnVsbCE9PWMpe2EuY2FsbGJhY2s9bnVsbDt2YXIgZD1iO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjKXRocm93IEVycm9yKHUoMTkxLGMpKTtjLmNhbGwoZCl9YT1hLm5leHRFZmZlY3R9fVxudmFyIE1nPUVhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLE5nPShuZXcgYWEuQ29tcG9uZW50KS5yZWZzO2Z1bmN0aW9uIE9nKGEsYixjLGQpe2I9YS5tZW1vaXplZFN0YXRlO2M9YyhkLGIpO2M9bnVsbD09PWN8fHZvaWQgMD09PWM/YjpuKHt9LGIsYyk7YS5tZW1vaXplZFN0YXRlPWM7ZD1hLnVwZGF0ZVF1ZXVlO251bGwhPT1kJiYwPT09YS5leHBpcmF0aW9uVGltZSYmKGQuYmFzZVN0YXRlPWMpfVxudmFyIFNnPXtpc01vdW50ZWQ6ZnVuY3Rpb24oYSl7cmV0dXJuKGE9YS5fcmVhY3RJbnRlcm5hbEZpYmVyKT9lYyhhKT09PWE6ITF9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGQ9UGcoKSxlPU1nLnN1c3BlbnNlO2Q9UWcoZCxhLGUpO2U9QmcoZCxlKTtlLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGUuY2FsbGJhY2s9Yyk7RGcoYSxlKTtSZyhhLGQpfSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgZD1QZygpLGU9TWcuc3VzcGVuc2U7ZD1RZyhkLGEsZSk7ZT1CZyhkLGUpO2UudGFnPTE7ZS5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihlLmNhbGxiYWNrPWMpO0RnKGEsZSk7UmcoYSxkKX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKGEsYil7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGM9UGcoKSxkPU1nLnN1c3BlbnNlO1xuYz1RZyhjLGEsZCk7ZD1CZyhjLGQpO2QudGFnPTI7dm9pZCAwIT09YiYmbnVsbCE9PWImJihkLmNhbGxiYWNrPWIpO0RnKGEsZCk7UmcoYSxjKX19O2Z1bmN0aW9uIFRnKGEsYixjLGQsZSxmLGcpe2E9YS5zdGF0ZU5vZGU7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuc2hvdWxkQ29tcG9uZW50VXBkYXRlP2Euc2hvdWxkQ29tcG9uZW50VXBkYXRlKGQsZixnKTpiLnByb3RvdHlwZSYmYi5wcm90b3R5cGUuaXNQdXJlUmVhY3RDb21wb25lbnQ/IXFmKGMsZCl8fCFxZihlLGYpOiEwfVxuZnVuY3Rpb24gVWcoYSxiLGMpe3ZhciBkPSExLGU9Q2Y7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2Y9eGcoZik6KGU9TChiKT9EZjpKLmN1cnJlbnQsZD1iLmNvbnRleHRUeXBlcyxmPShkPW51bGwhPT1kJiZ2b2lkIDAhPT1kKT9FZihhLGUpOkNmKTtiPW5ldyBiKGMsZik7YS5tZW1vaXplZFN0YXRlPW51bGwhPT1iLnN0YXRlJiZ2b2lkIDAhPT1iLnN0YXRlP2Iuc3RhdGU6bnVsbDtiLnVwZGF0ZXI9U2c7YS5zdGF0ZU5vZGU9YjtiLl9yZWFjdEludGVybmFsRmliZXI9YTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9ZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWYpO3JldHVybiBifVxuZnVuY3Rpb24gVmcoYSxiLGMsZCl7YT1iLnN0YXRlO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7Yi5zdGF0ZSE9PWEmJlNnLmVucXVldWVSZXBsYWNlU3RhdGUoYixiLnN0YXRlLG51bGwpfVxuZnVuY3Rpb24gV2coYSxiLGMsZCl7dmFyIGU9YS5zdGF0ZU5vZGU7ZS5wcm9wcz1jO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2UucmVmcz1OZzt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/ZS5jb250ZXh0PXhnKGYpOihmPUwoYik/RGY6Si5jdXJyZW50LGUuY29udGV4dD1FZihhLGYpKTtmPWEudXBkYXRlUXVldWU7bnVsbCE9PWYmJihIZyhhLGYsYyxlLGQpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtmPWIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBmJiYoT2coYSxiLGYsYyksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc3x8XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PVxudHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50fHwoYj1lLnN0YXRlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudCYmZS5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSxiIT09ZS5zdGF0ZSYmU2cuZW5xdWV1ZVJlcGxhY2VTdGF0ZShlLGUuc3RhdGUsbnVsbCksZj1hLnVwZGF0ZVF1ZXVlLG51bGwhPT1mJiYoSGcoYSxmLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSkpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudERpZE1vdW50JiYoYS5lZmZlY3RUYWd8PTQpfXZhciBYZz1BcnJheS5pc0FycmF5O1xuZnVuY3Rpb24gWWcoYSxiLGMpe2E9Yy5yZWY7aWYobnVsbCE9PWEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZcIm9iamVjdFwiIT09dHlwZW9mIGEpe2lmKGMuX293bmVyKXtjPWMuX293bmVyO2lmKGMpe2lmKDEhPT1jLnRhZyl0aHJvdyBFcnJvcih1KDMwOSkpO3ZhciBkPWMuc3RhdGVOb2RlfWlmKCFkKXRocm93IEVycm9yKHUoMTQ3LGEpKTt2YXIgZT1cIlwiK2E7aWYobnVsbCE9PWImJm51bGwhPT1iLnJlZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGIucmVmJiZiLnJlZi5fc3RyaW5nUmVmPT09ZSlyZXR1cm4gYi5yZWY7Yj1mdW5jdGlvbihhKXt2YXIgYj1kLnJlZnM7Yj09PU5nJiYoYj1kLnJlZnM9e30pO251bGw9PT1hP2RlbGV0ZSBiW2VdOmJbZV09YX07Yi5fc3RyaW5nUmVmPWU7cmV0dXJuIGJ9aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBhKXRocm93IEVycm9yKHUoMjg0KSk7aWYoIWMuX293bmVyKXRocm93IEVycm9yKHUoMjkwLGEpKTt9cmV0dXJuIGF9XG5mdW5jdGlvbiBaZyhhLGIpe2lmKFwidGV4dGFyZWFcIiE9PWEudHlwZSl0aHJvdyBFcnJvcih1KDMxLFwiW29iamVjdCBPYmplY3RdXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYik/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhiKS5qb2luKFwiLCBcIikrXCJ9XCI6YixcIlwiKSk7fVxuZnVuY3Rpb24gJGcoYSl7ZnVuY3Rpb24gYihiLGMpe2lmKGEpe3ZhciBkPWIubGFzdEVmZmVjdDtudWxsIT09ZD8oZC5uZXh0RWZmZWN0PWMsYi5sYXN0RWZmZWN0PWMpOmIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWM7Yy5uZXh0RWZmZWN0PW51bGw7Yy5lZmZlY3RUYWc9OH19ZnVuY3Rpb24gYyhjLGQpe2lmKCFhKXJldHVybiBudWxsO2Zvcig7bnVsbCE9PWQ7KWIoYyxkKSxkPWQuc2libGluZztyZXR1cm4gbnVsbH1mdW5jdGlvbiBkKGEsYil7Zm9yKGE9bmV3IE1hcDtudWxsIT09YjspbnVsbCE9PWIua2V5P2Euc2V0KGIua2V5LGIpOmEuc2V0KGIuaW5kZXgsYiksYj1iLnNpYmxpbmc7cmV0dXJuIGF9ZnVuY3Rpb24gZShhLGIsYyl7YT1haChhLGIsYyk7YS5pbmRleD0wO2Euc2libGluZz1udWxsO3JldHVybiBhfWZ1bmN0aW9uIGYoYixjLGQpe2IuaW5kZXg9ZDtpZighYSlyZXR1cm4gYztkPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1kKXJldHVybiBkPWQuaW5kZXgsZDxjPyhiLmVmZmVjdFRhZz1cbjIsYyk6ZDtiLmVmZmVjdFRhZz0yO3JldHVybiBjfWZ1bmN0aW9uIGcoYil7YSYmbnVsbD09PWIuYWx0ZXJuYXRlJiYoYi5lZmZlY3RUYWc9Mik7cmV0dXJuIGJ9ZnVuY3Rpb24gaChhLGIsYyxkKXtpZihudWxsPT09Ynx8NiE9PWIudGFnKXJldHVybiBiPWJoKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjLGQpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gayhhLGIsYyxkKXtpZihudWxsIT09YiYmYi5lbGVtZW50VHlwZT09PWMudHlwZSlyZXR1cm4gZD1lKGIsYy5wcm9wcyxkKSxkLnJlZj1ZZyhhLGIsYyksZC5yZXR1cm49YSxkO2Q9Y2goYy50eXBlLGMua2V5LGMucHJvcHMsbnVsbCxhLm1vZGUsZCk7ZC5yZWY9WWcoYSxiLGMpO2QucmV0dXJuPWE7cmV0dXJuIGR9ZnVuY3Rpb24gbChhLGIsYyxkKXtpZihudWxsPT09Ynx8NCE9PWIudGFnfHxiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvIT09Yy5jb250YWluZXJJbmZvfHxiLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbiE9PVxuYy5pbXBsZW1lbnRhdGlvbilyZXR1cm4gYj1kaChjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYy5jaGlsZHJlbnx8W10sZCk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBtKGEsYixjLGQsZil7aWYobnVsbD09PWJ8fDchPT1iLnRhZylyZXR1cm4gYj1laChjLGEubW9kZSxkLGYpLGIucmV0dXJuPWEsYjtiPWUoYixjLGQpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gQyhhLGIsYyl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBifHxcIm51bWJlclwiPT09dHlwZW9mIGIpcmV0dXJuIGI9YmgoXCJcIitiLGEubW9kZSxjKSxiLnJldHVybj1hLGI7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBiJiZudWxsIT09Yil7c3dpdGNoKGIuJCR0eXBlb2Ype2Nhc2UgR2E6cmV0dXJuIGM9Y2goYi50eXBlLGIua2V5LGIucHJvcHMsbnVsbCxhLm1vZGUsYyksYy5yZWY9WWcoYSxudWxsLGIpLGMucmV0dXJuPWEsYztjYXNlIEhhOnJldHVybiBiPWRoKGIsYS5tb2RlLGMpLGIucmV0dXJuPWEsYn1pZihYZyhiKXx8XG5VYShiKSlyZXR1cm4gYj1laChiLGEubW9kZSxjLG51bGwpLGIucmV0dXJuPWEsYjtaZyhhLGIpfXJldHVybiBudWxsfWZ1bmN0aW9uIHkoYSxiLGMsZCl7dmFyIGU9bnVsbCE9PWI/Yi5rZXk6bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGN8fFwibnVtYmVyXCI9PT10eXBlb2YgYylyZXR1cm4gbnVsbCE9PWU/bnVsbDpoKGEsYixcIlwiK2MsZCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yyl7c3dpdGNoKGMuJCR0eXBlb2Ype2Nhc2UgR2E6cmV0dXJuIGMua2V5PT09ZT9jLnR5cGU9PT1JYT9tKGEsYixjLnByb3BzLmNoaWxkcmVuLGQsZSk6ayhhLGIsYyxkKTpudWxsO2Nhc2UgSGE6cmV0dXJuIGMua2V5PT09ZT9sKGEsYixjLGQpOm51bGx9aWYoWGcoYyl8fFVhKGMpKXJldHVybiBudWxsIT09ZT9udWxsOm0oYSxiLGMsZCxudWxsKTtaZyhhLGMpfXJldHVybiBudWxsfWZ1bmN0aW9uIEgoYSxiLGMsZCxlKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGR8fFwibnVtYmVyXCI9PT10eXBlb2YgZClyZXR1cm4gYT1cbmEuZ2V0KGMpfHxudWxsLGgoYixhLFwiXCIrZCxlKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kKXtzd2l0Y2goZC4kJHR5cGVvZil7Y2FzZSBHYTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsZC50eXBlPT09SWE/bShiLGEsZC5wcm9wcy5jaGlsZHJlbixlLGQua2V5KTprKGIsYSxkLGUpO2Nhc2UgSGE6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGwoYixhLGQsZSl9aWYoWGcoZCl8fFVhKGQpKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLG0oYixhLGQsZSxudWxsKTtaZyhiLGQpfXJldHVybiBudWxsfWZ1bmN0aW9uIHooZSxnLGgsayl7Zm9yKHZhciBsPW51bGwsbT1udWxsLHI9Zyx4PWc9MCxBPW51bGw7bnVsbCE9PXImJng8aC5sZW5ndGg7eCsrKXtyLmluZGV4Png/KEE9cixyPW51bGwpOkE9ci5zaWJsaW5nO3ZhciBwPXkoZSxyLGhbeF0sayk7aWYobnVsbD09PXApe251bGw9PT1yJiYocj1BKTticmVha31hJiZcbnImJm51bGw9PT1wLmFsdGVybmF0ZSYmYihlLHIpO2c9ZihwLGcseCk7bnVsbD09PW0/bD1wOm0uc2libGluZz1wO209cDtyPUF9aWYoeD09PWgubGVuZ3RoKXJldHVybiBjKGUsciksbDtpZihudWxsPT09cil7Zm9yKDt4PGgubGVuZ3RoO3grKylyPUMoZSxoW3hdLGspLG51bGwhPT1yJiYoZz1mKHIsZyx4KSxudWxsPT09bT9sPXI6bS5zaWJsaW5nPXIsbT1yKTtyZXR1cm4gbH1mb3Iocj1kKGUscik7eDxoLmxlbmd0aDt4KyspQT1IKHIsZSx4LGhbeF0sayksbnVsbCE9PUEmJihhJiZudWxsIT09QS5hbHRlcm5hdGUmJnIuZGVsZXRlKG51bGw9PT1BLmtleT94OkEua2V5KSxnPWYoQSxnLHgpLG51bGw9PT1tP2w9QTptLnNpYmxpbmc9QSxtPUEpO2EmJnIuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIGx9ZnVuY3Rpb24gdGEoZSxnLGgsayl7dmFyIGw9VWEoaCk7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGwpdGhyb3cgRXJyb3IodSgxNTApKTtoPWwuY2FsbChoKTtcbmlmKG51bGw9PWgpdGhyb3cgRXJyb3IodSgxNTEpKTtmb3IodmFyIG09bD1udWxsLHI9Zyx4PWc9MCxBPW51bGwscD1oLm5leHQoKTtudWxsIT09ciYmIXAuZG9uZTt4KysscD1oLm5leHQoKSl7ci5pbmRleD54PyhBPXIscj1udWxsKTpBPXIuc2libGluZzt2YXIgej15KGUscixwLnZhbHVlLGspO2lmKG51bGw9PT16KXtudWxsPT09ciYmKHI9QSk7YnJlYWt9YSYmciYmbnVsbD09PXouYWx0ZXJuYXRlJiZiKGUscik7Zz1mKHosZyx4KTtudWxsPT09bT9sPXo6bS5zaWJsaW5nPXo7bT16O3I9QX1pZihwLmRvbmUpcmV0dXJuIGMoZSxyKSxsO2lmKG51bGw9PT1yKXtmb3IoOyFwLmRvbmU7eCsrLHA9aC5uZXh0KCkpcD1DKGUscC52YWx1ZSxrKSxudWxsIT09cCYmKGc9ZihwLGcseCksbnVsbD09PW0/bD1wOm0uc2libGluZz1wLG09cCk7cmV0dXJuIGx9Zm9yKHI9ZChlLHIpOyFwLmRvbmU7eCsrLHA9aC5uZXh0KCkpcD1IKHIsZSx4LHAudmFsdWUsayksbnVsbCE9PXAmJihhJiZudWxsIT09XG5wLmFsdGVybmF0ZSYmci5kZWxldGUobnVsbD09PXAua2V5P3g6cC5rZXkpLGc9ZihwLGcseCksbnVsbD09PW0/bD1wOm0uc2libGluZz1wLG09cCk7YSYmci5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gbH1yZXR1cm4gZnVuY3Rpb24oYSxkLGYsaCl7dmFyIGs9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZiYmZi50eXBlPT09SWEmJm51bGw9PT1mLmtleTtrJiYoZj1mLnByb3BzLmNoaWxkcmVuKTt2YXIgbD1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mO2lmKGwpc3dpdGNoKGYuJCR0eXBlb2Ype2Nhc2UgR2E6YTp7bD1mLmtleTtmb3Ioaz1kO251bGwhPT1rOyl7aWYoay5rZXk9PT1sKWlmKDc9PT1rLnRhZz9mLnR5cGU9PT1JYTprLmVsZW1lbnRUeXBlPT09Zi50eXBlKXtjKGEsay5zaWJsaW5nKTtkPWUoayxmLnR5cGU9PT1JYT9mLnByb3BzLmNoaWxkcmVuOmYucHJvcHMsaCk7ZC5yZWY9WWcoYSxrLGYpO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9ZWxzZXtjKGEsXG5rKTticmVha31lbHNlIGIoYSxrKTtrPWsuc2libGluZ31mLnR5cGU9PT1JYT8oZD1laChmLnByb3BzLmNoaWxkcmVuLGEubW9kZSxoLGYua2V5KSxkLnJldHVybj1hLGE9ZCk6KGg9Y2goZi50eXBlLGYua2V5LGYucHJvcHMsbnVsbCxhLm1vZGUsaCksaC5yZWY9WWcoYSxkLGYpLGgucmV0dXJuPWEsYT1oKX1yZXR1cm4gZyhhKTtjYXNlIEhhOmE6e2ZvcihrPWYua2V5O251bGwhPT1kOyl7aWYoZC5rZXk9PT1rKWlmKDQ9PT1kLnRhZyYmZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbz09PWYuY29udGFpbmVySW5mbyYmZC5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb249PT1mLmltcGxlbWVudGF0aW9uKXtjKGEsZC5zaWJsaW5nKTtkPWUoZCxmLmNoaWxkcmVufHxbXSxoKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGQpO2JyZWFrfWVsc2UgYihhLGQpO2Q9ZC5zaWJsaW5nfWQ9ZGgoZixhLm1vZGUsaCk7ZC5yZXR1cm49YTthPWR9cmV0dXJuIGcoYSl9aWYoXCJzdHJpbmdcIj09PVxudHlwZW9mIGZ8fFwibnVtYmVyXCI9PT10eXBlb2YgZilyZXR1cm4gZj1cIlwiK2YsbnVsbCE9PWQmJjY9PT1kLnRhZz8oYyhhLGQuc2libGluZyksZD1lKGQsZixoKSxkLnJldHVybj1hLGE9ZCk6KGMoYSxkKSxkPWJoKGYsYS5tb2RlLGgpLGQucmV0dXJuPWEsYT1kKSxnKGEpO2lmKFhnKGYpKXJldHVybiB6KGEsZCxmLGgpO2lmKFVhKGYpKXJldHVybiB0YShhLGQsZixoKTtsJiZaZyhhLGYpO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgZiYmIWspc3dpdGNoKGEudGFnKXtjYXNlIDE6Y2FzZSAwOnRocm93IGE9YS50eXBlLEVycm9yKHUoMTUyLGEuZGlzcGxheU5hbWV8fGEubmFtZXx8XCJDb21wb25lbnRcIikpO31yZXR1cm4gYyhhLGQpfX12YXIgZmg9JGcoITApLGdoPSRnKCExKSxoaD17fSxpaD17Y3VycmVudDpoaH0samg9e2N1cnJlbnQ6aGh9LGtoPXtjdXJyZW50OmhofTtmdW5jdGlvbiBsaChhKXtpZihhPT09aGgpdGhyb3cgRXJyb3IodSgxNzQpKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIG1oKGEsYil7SShraCxiLGEpO0koamgsYSxhKTtJKGloLGhoLGEpO3ZhciBjPWIubm9kZVR5cGU7c3dpdGNoKGMpe2Nhc2UgOTpjYXNlIDExOmI9KGI9Yi5kb2N1bWVudEVsZW1lbnQpP2IubmFtZXNwYWNlVVJJOlFiKG51bGwsXCJcIik7YnJlYWs7ZGVmYXVsdDpjPTg9PT1jP2IucGFyZW50Tm9kZTpiLGI9Yy5uYW1lc3BhY2VVUkl8fG51bGwsYz1jLnRhZ05hbWUsYj1RYihiLGMpfUcoaWgsYSk7SShpaCxiLGEpfWZ1bmN0aW9uIG5oKGEpe0coaWgsYSk7RyhqaCxhKTtHKGtoLGEpfWZ1bmN0aW9uIG9oKGEpe2xoKGtoLmN1cnJlbnQpO3ZhciBiPWxoKGloLmN1cnJlbnQpO3ZhciBjPVFiKGIsYS50eXBlKTtiIT09YyYmKEkoamgsYSxhKSxJKGloLGMsYSkpfWZ1bmN0aW9uIHBoKGEpe2poLmN1cnJlbnQ9PT1hJiYoRyhpaCxhKSxHKGpoLGEpKX12YXIgTT17Y3VycmVudDowfTtcbmZ1bmN0aW9uIHFoKGEpe2Zvcih2YXIgYj1hO251bGwhPT1iOyl7aWYoMTM9PT1iLnRhZyl7dmFyIGM9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1jJiYoYz1jLmRlaHlkcmF0ZWQsbnVsbD09PWN8fGMuZGF0YT09PWplfHxjLmRhdGE9PT1rZSkpcmV0dXJuIGJ9ZWxzZSBpZigxOT09PWIudGFnJiZ2b2lkIDAhPT1iLm1lbW9pemVkUHJvcHMucmV2ZWFsT3JkZXIpe2lmKDAhPT0oYi5lZmZlY3RUYWcmNjQpKXJldHVybiBifWVsc2UgaWYobnVsbCE9PWIuY2hpbGQpe2IuY2hpbGQucmV0dXJuPWI7Yj1iLmNoaWxkO2NvbnRpbnVlfWlmKGI9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWIuc2libGluZzspe2lmKG51bGw9PT1iLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiBudWxsO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ31yZXR1cm4gbnVsbH1mdW5jdGlvbiByaChhLGIpe3JldHVybntyZXNwb25kZXI6YSxwcm9wczpifX1cbnZhciBzaD1FYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLE49RWEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWcsdGg9MCx1aD1udWxsLE89bnVsbCx2aD1udWxsLHdoPW51bGwsUD1udWxsLHhoPW51bGwseWg9MCx6aD1udWxsLEFoPTAsQmg9ITEsQ2g9bnVsbCxHaD0wO2Z1bmN0aW9uIFEoKXt0aHJvdyBFcnJvcih1KDMyMSkpO31mdW5jdGlvbiBIaChhLGIpe2lmKG51bGw9PT1iKXJldHVybiExO2Zvcih2YXIgYz0wO2M8Yi5sZW5ndGgmJmM8YS5sZW5ndGg7YysrKWlmKCFvZihhW2NdLGJbY10pKXJldHVybiExO3JldHVybiEwfVxuZnVuY3Rpb24gSWgoYSxiLGMsZCxlLGYpe3RoPWY7dWg9Yjt2aD1udWxsIT09YT9hLm1lbW9pemVkU3RhdGU6bnVsbDtzaC5jdXJyZW50PW51bGw9PT12aD9KaDpLaDtiPWMoZCxlKTtpZihCaCl7ZG8gQmg9ITEsR2grPTEsdmg9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGwseGg9d2gsemg9UD1PPW51bGwsc2guY3VycmVudD1LaCxiPWMoZCxlKTt3aGlsZShCaCk7Q2g9bnVsbDtHaD0wfXNoLmN1cnJlbnQ9TGg7YT11aDthLm1lbW9pemVkU3RhdGU9d2g7YS5leHBpcmF0aW9uVGltZT15aDthLnVwZGF0ZVF1ZXVlPXpoO2EuZWZmZWN0VGFnfD1BaDthPW51bGwhPT1PJiZudWxsIT09Ty5uZXh0O3RoPTA7eGg9UD13aD12aD1PPXVoPW51bGw7eWg9MDt6aD1udWxsO0FoPTA7aWYoYSl0aHJvdyBFcnJvcih1KDMwMCkpO3JldHVybiBifVxuZnVuY3Rpb24gTWgoKXtzaC5jdXJyZW50PUxoO3RoPTA7eGg9UD13aD12aD1PPXVoPW51bGw7eWg9MDt6aD1udWxsO0FoPTA7Qmg9ITE7Q2g9bnVsbDtHaD0wfWZ1bmN0aW9uIE5oKCl7dmFyIGE9e21lbW9pemVkU3RhdGU6bnVsbCxiYXNlU3RhdGU6bnVsbCxxdWV1ZTpudWxsLGJhc2VVcGRhdGU6bnVsbCxuZXh0Om51bGx9O251bGw9PT1QP3doPVA9YTpQPVAubmV4dD1hO3JldHVybiBQfWZ1bmN0aW9uIE9oKCl7aWYobnVsbCE9PXhoKVA9eGgseGg9UC5uZXh0LE89dmgsdmg9bnVsbCE9PU8/Ty5uZXh0Om51bGw7ZWxzZXtpZihudWxsPT09dmgpdGhyb3cgRXJyb3IodSgzMTApKTtPPXZoO3ZhciBhPXttZW1vaXplZFN0YXRlOk8ubWVtb2l6ZWRTdGF0ZSxiYXNlU3RhdGU6Ty5iYXNlU3RhdGUscXVldWU6Ty5xdWV1ZSxiYXNlVXBkYXRlOk8uYmFzZVVwZGF0ZSxuZXh0Om51bGx9O1A9bnVsbD09PVA/d2g9YTpQLm5leHQ9YTt2aD1PLm5leHR9cmV0dXJuIFB9XG5mdW5jdGlvbiBQaChhLGIpe3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBiP2IoYSk6Yn1cbmZ1bmN0aW9uIFFoKGEpe3ZhciBiPU9oKCksYz1iLnF1ZXVlO2lmKG51bGw9PT1jKXRocm93IEVycm9yKHUoMzExKSk7Yy5sYXN0UmVuZGVyZWRSZWR1Y2VyPWE7aWYoMDxHaCl7dmFyIGQ9Yy5kaXNwYXRjaDtpZihudWxsIT09Q2gpe3ZhciBlPUNoLmdldChjKTtpZih2b2lkIDAhPT1lKXtDaC5kZWxldGUoYyk7dmFyIGY9Yi5tZW1vaXplZFN0YXRlO2RvIGY9YShmLGUuYWN0aW9uKSxlPWUubmV4dDt3aGlsZShudWxsIT09ZSk7b2YoZixiLm1lbW9pemVkU3RhdGUpfHwod2c9ITApO2IubWVtb2l6ZWRTdGF0ZT1mO2IuYmFzZVVwZGF0ZT09PWMubGFzdCYmKGIuYmFzZVN0YXRlPWYpO2MubGFzdFJlbmRlcmVkU3RhdGU9ZjtyZXR1cm5bZixkXX19cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxkXX1kPWMubGFzdDt2YXIgZz1iLmJhc2VVcGRhdGU7Zj1iLmJhc2VTdGF0ZTtudWxsIT09Zz8obnVsbCE9PWQmJihkLm5leHQ9bnVsbCksZD1nLm5leHQpOmQ9bnVsbCE9PWQ/ZC5uZXh0Om51bGw7aWYobnVsbCE9PVxuZCl7dmFyIGg9ZT1udWxsLGs9ZCxsPSExO2Rve3ZhciBtPWsuZXhwaXJhdGlvblRpbWU7bTx0aD8obHx8KGw9ITAsaD1nLGU9ZiksbT55aCYmKHloPW0sSmcoeWgpKSk6KElnKG0say5zdXNwZW5zZUNvbmZpZyksZj1rLmVhZ2VyUmVkdWNlcj09PWE/ay5lYWdlclN0YXRlOmEoZixrLmFjdGlvbikpO2c9aztrPWsubmV4dH13aGlsZShudWxsIT09ayYmayE9PWQpO2x8fChoPWcsZT1mKTtvZihmLGIubWVtb2l6ZWRTdGF0ZSl8fCh3Zz0hMCk7Yi5tZW1vaXplZFN0YXRlPWY7Yi5iYXNlVXBkYXRlPWg7Yi5iYXNlU3RhdGU9ZTtjLmxhc3RSZW5kZXJlZFN0YXRlPWZ9cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxjLmRpc3BhdGNoXX1cbmZ1bmN0aW9uIFJoKGEpe3ZhciBiPU5oKCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGEmJihhPWEoKSk7Yi5tZW1vaXplZFN0YXRlPWIuYmFzZVN0YXRlPWE7YT1iLnF1ZXVlPXtsYXN0Om51bGwsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOlBoLGxhc3RSZW5kZXJlZFN0YXRlOmF9O2E9YS5kaXNwYXRjaD1TaC5iaW5kKG51bGwsdWgsYSk7cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxhXX1mdW5jdGlvbiBUaChhKXtyZXR1cm4gUWgoUGgsYSl9ZnVuY3Rpb24gVWgoYSxiLGMsZCl7YT17dGFnOmEsY3JlYXRlOmIsZGVzdHJveTpjLGRlcHM6ZCxuZXh0Om51bGx9O251bGw9PT16aD8oemg9e2xhc3RFZmZlY3Q6bnVsbH0semgubGFzdEVmZmVjdD1hLm5leHQ9YSk6KGI9emgubGFzdEVmZmVjdCxudWxsPT09Yj96aC5sYXN0RWZmZWN0PWEubmV4dD1hOihjPWIubmV4dCxiLm5leHQ9YSxhLm5leHQ9Yyx6aC5sYXN0RWZmZWN0PWEpKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIFZoKGEsYixjLGQpe3ZhciBlPU5oKCk7QWh8PWE7ZS5tZW1vaXplZFN0YXRlPVVoKGIsYyx2b2lkIDAsdm9pZCAwPT09ZD9udWxsOmQpfWZ1bmN0aW9uIFdoKGEsYixjLGQpe3ZhciBlPU9oKCk7ZD12b2lkIDA9PT1kP251bGw6ZDt2YXIgZj12b2lkIDA7aWYobnVsbCE9PU8pe3ZhciBnPU8ubWVtb2l6ZWRTdGF0ZTtmPWcuZGVzdHJveTtpZihudWxsIT09ZCYmSGgoZCxnLmRlcHMpKXtVaCgwLGMsZixkKTtyZXR1cm59fUFofD1hO2UubWVtb2l6ZWRTdGF0ZT1VaChiLGMsZixkKX1mdW5jdGlvbiBYaChhLGIpe3JldHVybiBWaCg1MTYsMTkyLGEsYil9ZnVuY3Rpb24gWWgoYSxiKXtyZXR1cm4gV2goNTE2LDE5MixhLGIpfVxuZnVuY3Rpb24gWmgoYSxiKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYilyZXR1cm4gYT1hKCksYihhKSxmdW5jdGlvbigpe2IobnVsbCl9O2lmKG51bGwhPT1iJiZ2b2lkIDAhPT1iKXJldHVybiBhPWEoKSxiLmN1cnJlbnQ9YSxmdW5jdGlvbigpe2IuY3VycmVudD1udWxsfX1mdW5jdGlvbiAkaCgpe31mdW5jdGlvbiBhaShhLGIpe05oKCkubWVtb2l6ZWRTdGF0ZT1bYSx2b2lkIDA9PT1iP251bGw6Yl07cmV0dXJuIGF9ZnVuY3Rpb24gYmkoYSxiKXt2YXIgYz1PaCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmSGgoYixkWzFdKSlyZXR1cm4gZFswXTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9XG5mdW5jdGlvbiBTaChhLGIsYyl7aWYoISgyNT5HaCkpdGhyb3cgRXJyb3IodSgzMDEpKTt2YXIgZD1hLmFsdGVybmF0ZTtpZihhPT09dWh8fG51bGwhPT1kJiZkPT09dWgpaWYoQmg9ITAsYT17ZXhwaXJhdGlvblRpbWU6dGgsc3VzcGVuc2VDb25maWc6bnVsbCxhY3Rpb246YyxlYWdlclJlZHVjZXI6bnVsbCxlYWdlclN0YXRlOm51bGwsbmV4dDpudWxsfSxudWxsPT09Q2gmJihDaD1uZXcgTWFwKSxjPUNoLmdldChiKSx2b2lkIDA9PT1jKUNoLnNldChiLGEpO2Vsc2V7Zm9yKGI9YztudWxsIT09Yi5uZXh0OyliPWIubmV4dDtiLm5leHQ9YX1lbHNle3ZhciBlPVBnKCksZj1NZy5zdXNwZW5zZTtlPVFnKGUsYSxmKTtmPXtleHBpcmF0aW9uVGltZTplLHN1c3BlbnNlQ29uZmlnOmYsYWN0aW9uOmMsZWFnZXJSZWR1Y2VyOm51bGwsZWFnZXJTdGF0ZTpudWxsLG5leHQ6bnVsbH07dmFyIGc9Yi5sYXN0O2lmKG51bGw9PT1nKWYubmV4dD1mO2Vsc2V7dmFyIGg9Zy5uZXh0O251bGwhPT1oJiZcbihmLm5leHQ9aCk7Zy5uZXh0PWZ9Yi5sYXN0PWY7aWYoMD09PWEuZXhwaXJhdGlvblRpbWUmJihudWxsPT09ZHx8MD09PWQuZXhwaXJhdGlvblRpbWUpJiYoZD1iLmxhc3RSZW5kZXJlZFJlZHVjZXIsbnVsbCE9PWQpKXRyeXt2YXIgaz1iLmxhc3RSZW5kZXJlZFN0YXRlLGw9ZChrLGMpO2YuZWFnZXJSZWR1Y2VyPWQ7Zi5lYWdlclN0YXRlPWw7aWYob2YobCxrKSlyZXR1cm59Y2F0Y2gobSl7fWZpbmFsbHl7fVJnKGEsZSl9fVxudmFyIExoPXtyZWFkQ29udGV4dDp4Zyx1c2VDYWxsYmFjazpRLHVzZUNvbnRleHQ6USx1c2VFZmZlY3Q6USx1c2VJbXBlcmF0aXZlSGFuZGxlOlEsdXNlTGF5b3V0RWZmZWN0OlEsdXNlTWVtbzpRLHVzZVJlZHVjZXI6USx1c2VSZWY6USx1c2VTdGF0ZTpRLHVzZURlYnVnVmFsdWU6USx1c2VSZXNwb25kZXI6USx1c2VEZWZlcnJlZFZhbHVlOlEsdXNlVHJhbnNpdGlvbjpRfSxKaD17cmVhZENvbnRleHQ6eGcsdXNlQ2FsbGJhY2s6YWksdXNlQ29udGV4dDp4Zyx1c2VFZmZlY3Q6WGgsdXNlSW1wZXJhdGl2ZUhhbmRsZTpmdW5jdGlvbihhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIFZoKDQsMzYsWmguYmluZChudWxsLGIsYSksYyl9LHVzZUxheW91dEVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBWaCg0LDM2LGEsYil9LHVzZU1lbW86ZnVuY3Rpb24oYSxiKXt2YXIgYz1OaCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVxuW2EsYl07cmV0dXJuIGF9LHVzZVJlZHVjZXI6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPU5oKCk7Yj12b2lkIDAhPT1jP2MoYik6YjtkLm1lbW9pemVkU3RhdGU9ZC5iYXNlU3RhdGU9YjthPWQucXVldWU9e2xhc3Q6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6YSxsYXN0UmVuZGVyZWRTdGF0ZTpifTthPWEuZGlzcGF0Y2g9U2guYmluZChudWxsLHVoLGEpO3JldHVybltkLm1lbW9pemVkU3RhdGUsYV19LHVzZVJlZjpmdW5jdGlvbihhKXt2YXIgYj1OaCgpO2E9e2N1cnJlbnQ6YX07cmV0dXJuIGIubWVtb2l6ZWRTdGF0ZT1hfSx1c2VTdGF0ZTpSaCx1c2VEZWJ1Z1ZhbHVlOiRoLHVzZVJlc3BvbmRlcjpyaCx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEsYil7dmFyIGM9UmgoYSksZD1jWzBdLGU9Y1sxXTtYaChmdW5jdGlvbigpe3EudW5zdGFibGVfbmV4dChmdW5jdGlvbigpe3ZhciBjPU4uc3VzcGVuc2U7Ti5zdXNwZW5zZT12b2lkIDA9PT1iP251bGw6Yjt0cnl7ZShhKX1maW5hbGx5e04uc3VzcGVuc2U9XG5jfX0pfSxbYSxiXSk7cmV0dXJuIGR9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oYSl7dmFyIGI9UmgoITEpLGM9YlswXSxkPWJbMV07cmV0dXJuW2FpKGZ1bmN0aW9uKGIpe2QoITApO3EudW5zdGFibGVfbmV4dChmdW5jdGlvbigpe3ZhciBjPU4uc3VzcGVuc2U7Ti5zdXNwZW5zZT12b2lkIDA9PT1hP251bGw6YTt0cnl7ZCghMSksYigpfWZpbmFsbHl7Ti5zdXNwZW5zZT1jfX0pfSxbYSxjXSksY119fSxLaD17cmVhZENvbnRleHQ6eGcsdXNlQ2FsbGJhY2s6YmksdXNlQ29udGV4dDp4Zyx1c2VFZmZlY3Q6WWgsdXNlSW1wZXJhdGl2ZUhhbmRsZTpmdW5jdGlvbihhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIFdoKDQsMzYsWmguYmluZChudWxsLGIsYSksYyl9LHVzZUxheW91dEVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBXaCg0LDM2LGEsYil9LHVzZU1lbW86ZnVuY3Rpb24oYSxiKXt2YXIgYz1PaCgpO2I9dm9pZCAwPT09Yj9cbm51bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZIaChiLGRbMV0pKXJldHVybiBkWzBdO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX0sdXNlUmVkdWNlcjpRaCx1c2VSZWY6ZnVuY3Rpb24oKXtyZXR1cm4gT2goKS5tZW1vaXplZFN0YXRlfSx1c2VTdGF0ZTpUaCx1c2VEZWJ1Z1ZhbHVlOiRoLHVzZVJlc3BvbmRlcjpyaCx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEsYil7dmFyIGM9VGgoYSksZD1jWzBdLGU9Y1sxXTtZaChmdW5jdGlvbigpe3EudW5zdGFibGVfbmV4dChmdW5jdGlvbigpe3ZhciBjPU4uc3VzcGVuc2U7Ti5zdXNwZW5zZT12b2lkIDA9PT1iP251bGw6Yjt0cnl7ZShhKX1maW5hbGx5e04uc3VzcGVuc2U9Y319KX0sW2EsYl0pO3JldHVybiBkfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKGEpe3ZhciBiPVRoKCExKSxjPWJbMF0sZD1iWzFdO3JldHVybltiaShmdW5jdGlvbihiKXtkKCEwKTtxLnVuc3RhYmxlX25leHQoZnVuY3Rpb24oKXt2YXIgYz1cbk4uc3VzcGVuc2U7Ti5zdXNwZW5zZT12b2lkIDA9PT1hP251bGw6YTt0cnl7ZCghMSksYigpfWZpbmFsbHl7Ti5zdXNwZW5zZT1jfX0pfSxbYSxjXSksY119fSxjaT1udWxsLGRpPW51bGwsZWk9ITE7ZnVuY3Rpb24gZmkoYSxiKXt2YXIgYz1naSg1LG51bGwsbnVsbCwwKTtjLmVsZW1lbnRUeXBlPVwiREVMRVRFRFwiO2MudHlwZT1cIkRFTEVURURcIjtjLnN0YXRlTm9kZT1iO2MucmV0dXJuPWE7Yy5lZmZlY3RUYWc9ODtudWxsIT09YS5sYXN0RWZmZWN0PyhhLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGEubGFzdEVmZmVjdD1jKTphLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1jfVxuZnVuY3Rpb24gaGkoYSxiKXtzd2l0Y2goYS50YWcpe2Nhc2UgNTp2YXIgYz1hLnR5cGU7Yj0xIT09Yi5ub2RlVHlwZXx8Yy50b0xvd2VyQ2FzZSgpIT09Yi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpP251bGw6YjtyZXR1cm4gbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2Nhc2UgNjpyZXR1cm4gYj1cIlwiPT09YS5wZW5kaW5nUHJvcHN8fDMhPT1iLm5vZGVUeXBlP251bGw6YixudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7Y2FzZSAxMzpyZXR1cm4hMTtkZWZhdWx0OnJldHVybiExfX1cbmZ1bmN0aW9uIGlpKGEpe2lmKGVpKXt2YXIgYj1kaTtpZihiKXt2YXIgYz1iO2lmKCFoaShhLGIpKXtiPXJlKGMubmV4dFNpYmxpbmcpO2lmKCFifHwhaGkoYSxiKSl7YS5lZmZlY3RUYWc9YS5lZmZlY3RUYWcmLTEwMjV8MjtlaT0hMTtjaT1hO3JldHVybn1maShjaSxjKX1jaT1hO2RpPXJlKGIuZmlyc3RDaGlsZCl9ZWxzZSBhLmVmZmVjdFRhZz1hLmVmZmVjdFRhZyYtMTAyNXwyLGVpPSExLGNpPWF9fWZ1bmN0aW9uIGppKGEpe2ZvcihhPWEucmV0dXJuO251bGwhPT1hJiY1IT09YS50YWcmJjMhPT1hLnRhZyYmMTMhPT1hLnRhZzspYT1hLnJldHVybjtjaT1hfVxuZnVuY3Rpb24ga2koYSl7aWYoYSE9PWNpKXJldHVybiExO2lmKCFlaSlyZXR1cm4gamkoYSksZWk9ITAsITE7dmFyIGI9YS50eXBlO2lmKDUhPT1hLnRhZ3x8XCJoZWFkXCIhPT1iJiZcImJvZHlcIiE9PWImJiFvZShiLGEubWVtb2l6ZWRQcm9wcykpZm9yKGI9ZGk7YjspZmkoYSxiKSxiPXJlKGIubmV4dFNpYmxpbmcpO2ppKGEpO2lmKDEzPT09YS50YWcpe2E9YS5tZW1vaXplZFN0YXRlO2E9bnVsbCE9PWE/YS5kZWh5ZHJhdGVkOm51bGw7aWYoIWEpdGhyb3cgRXJyb3IodSgzMTcpKTthOnthPWEubmV4dFNpYmxpbmc7Zm9yKGI9MDthOyl7aWYoOD09PWEubm9kZVR5cGUpe3ZhciBjPWEuZGF0YTtpZihjPT09aWUpe2lmKDA9PT1iKXtkaT1yZShhLm5leHRTaWJsaW5nKTticmVhayBhfWItLX1lbHNlIGMhPT1oZSYmYyE9PWtlJiZjIT09amV8fGIrK31hPWEubmV4dFNpYmxpbmd9ZGk9bnVsbH19ZWxzZSBkaT1jaT9yZShhLnN0YXRlTm9kZS5uZXh0U2libGluZyk6bnVsbDtyZXR1cm4hMH1cbmZ1bmN0aW9uIGxpKCl7ZGk9Y2k9bnVsbDtlaT0hMX12YXIgbWk9RWEuUmVhY3RDdXJyZW50T3duZXIsd2c9ITE7ZnVuY3Rpb24gUihhLGIsYyxkKXtiLmNoaWxkPW51bGw9PT1hP2doKGIsbnVsbCxjLGQpOmZoKGIsYS5jaGlsZCxjLGQpfWZ1bmN0aW9uIG5pKGEsYixjLGQsZSl7Yz1jLnJlbmRlcjt2YXIgZj1iLnJlZjt2ZyhiLGUpO2Q9SWgoYSxiLGMsZCxmLGUpO2lmKG51bGwhPT1hJiYhd2cpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmVmZmVjdFRhZyY9LTUxNyxhLmV4cGlyYXRpb25UaW1lPD1lJiYoYS5leHBpcmF0aW9uVGltZT0wKSxvaShhLGIsZSk7Yi5lZmZlY3RUYWd8PTE7UihhLGIsZCxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIHBpKGEsYixjLGQsZSxmKXtpZihudWxsPT09YSl7dmFyIGc9Yy50eXBlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnJiYhcWkoZykmJnZvaWQgMD09PWcuZGVmYXVsdFByb3BzJiZudWxsPT09Yy5jb21wYXJlJiZ2b2lkIDA9PT1jLmRlZmF1bHRQcm9wcylyZXR1cm4gYi50YWc9MTUsYi50eXBlPWcscmkoYSxiLGcsZCxlLGYpO2E9Y2goYy50eXBlLG51bGwsZCxudWxsLGIubW9kZSxmKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9Zz1hLmNoaWxkO2lmKGU8ZiYmKGU9Zy5tZW1vaXplZFByb3BzLGM9Yy5jb21wYXJlLGM9bnVsbCE9PWM/YzpxZixjKGUsZCkmJmEucmVmPT09Yi5yZWYpKXJldHVybiBvaShhLGIsZik7Yi5lZmZlY3RUYWd8PTE7YT1haChnLGQsZik7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfVxuZnVuY3Rpb24gcmkoYSxiLGMsZCxlLGYpe3JldHVybiBudWxsIT09YSYmcWYoYS5tZW1vaXplZFByb3BzLGQpJiZhLnJlZj09PWIucmVmJiYod2c9ITEsZTxmKT9vaShhLGIsZik6c2koYSxiLGMsZCxmKX1mdW5jdGlvbiB0aShhLGIpe3ZhciBjPWIucmVmO2lmKG51bGw9PT1hJiZudWxsIT09Y3x8bnVsbCE9PWEmJmEucmVmIT09YyliLmVmZmVjdFRhZ3w9MTI4fWZ1bmN0aW9uIHNpKGEsYixjLGQsZSl7dmFyIGY9TChjKT9EZjpKLmN1cnJlbnQ7Zj1FZihiLGYpO3ZnKGIsZSk7Yz1JaChhLGIsYyxkLGYsZSk7aWYobnVsbCE9PWEmJiF3ZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZWZmZWN0VGFnJj0tNTE3LGEuZXhwaXJhdGlvblRpbWU8PWUmJihhLmV4cGlyYXRpb25UaW1lPTApLG9pKGEsYixlKTtiLmVmZmVjdFRhZ3w9MTtSKGEsYixjLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gdWkoYSxiLGMsZCxlKXtpZihMKGMpKXt2YXIgZj0hMDtKZihiKX1lbHNlIGY9ITE7dmcoYixlKTtpZihudWxsPT09Yi5zdGF0ZU5vZGUpbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpLFVnKGIsYyxkLGUpLFdnKGIsYyxkLGUpLGQ9ITA7ZWxzZSBpZihudWxsPT09YSl7dmFyIGc9Yi5zdGF0ZU5vZGUsaD1iLm1lbW9pemVkUHJvcHM7Zy5wcm9wcz1oO3ZhciBrPWcuY29udGV4dCxsPWMuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBsJiZudWxsIT09bD9sPXhnKGwpOihsPUwoYyk/RGY6Si5jdXJyZW50LGw9RWYoYixsKSk7dmFyIG09Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsQz1cImZ1bmN0aW9uXCI9PT10eXBlb2YgbXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGU7Q3x8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlxuXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1kfHxrIT09bCkmJlZnKGIsZyxkLGwpO3lnPSExO3ZhciB5PWIubWVtb2l6ZWRTdGF0ZTtrPWcuc3RhdGU9eTt2YXIgSD1iLnVwZGF0ZVF1ZXVlO251bGwhPT1IJiYoSGcoYixILGQsZyxlKSxrPWIubWVtb2l6ZWRTdGF0ZSk7aCE9PWR8fHkhPT1rfHxLLmN1cnJlbnR8fHlnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgbSYmKE9nKGIsYyxtLGQpLGs9Yi5tZW1vaXplZFN0YXRlKSwoaD15Z3x8VGcoYixjLGgsZCx5LGssbCkpPyhDfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnR8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnQmJmcuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXG5nLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCkpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZWZmZWN0VGFnfD00KSxiLm1lbW9pemVkUHJvcHM9ZCxiLm1lbW9pemVkU3RhdGU9ayksZy5wcm9wcz1kLGcuc3RhdGU9ayxnLmNvbnRleHQ9bCxkPWgpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZWZmZWN0VGFnfD00KSxkPSExKX1lbHNlIGc9Yi5zdGF0ZU5vZGUsaD1iLm1lbW9pemVkUHJvcHMsZy5wcm9wcz1iLnR5cGU9PT1iLmVsZW1lbnRUeXBlP2g6bWcoYi50eXBlLGgpLGs9Zy5jb250ZXh0LGw9Yy5jb250ZXh0VHlwZSxcIm9iamVjdFwiPT09dHlwZW9mIGwmJm51bGwhPT1sP2w9eGcobCk6KGw9TChjKT9EZjpKLmN1cnJlbnQsbD1FZihiLGwpKSxtPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLChDPVxuXCJmdW5jdGlvblwiPT09dHlwZW9mIG18fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09ZHx8ayE9PWwpJiZWZyhiLGcsZCxsKSx5Zz0hMSxrPWIubWVtb2l6ZWRTdGF0ZSx5PWcuc3RhdGU9ayxIPWIudXBkYXRlUXVldWUsbnVsbCE9PUgmJihIZyhiLEgsZCxnLGUpLHk9Yi5tZW1vaXplZFN0YXRlKSxoIT09ZHx8ayE9PXl8fEsuY3VycmVudHx8eWc/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBtJiYoT2coYixjLG0sZCkseT1iLm1lbW9pemVkU3RhdGUpLChtPXlnfHxUZyhiLGMsaCxkLGsseSxsKSk/KEN8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlfHxcbihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlJiZnLmNvbXBvbmVudFdpbGxVcGRhdGUoZCx5LGwpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlKGQseSxsKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlJiYoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlJiYoYi5lZmZlY3RUYWd8PTI1NikpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJms9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJms9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9MjU2KSxiLm1lbW9pemVkUHJvcHM9XG5kLGIubWVtb2l6ZWRTdGF0ZT15KSxnLnByb3BzPWQsZy5zdGF0ZT15LGcuY29udGV4dD1sLGQ9bSk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmaz09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmaz09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD0yNTYpLGQ9ITEpO3JldHVybiB2aShhLGIsYyxkLGYsZSl9XG5mdW5jdGlvbiB2aShhLGIsYyxkLGUsZil7dGkoYSxiKTt2YXIgZz0wIT09KGIuZWZmZWN0VGFnJjY0KTtpZighZCYmIWcpcmV0dXJuIGUmJktmKGIsYywhMSksb2koYSxiLGYpO2Q9Yi5zdGF0ZU5vZGU7bWkuY3VycmVudD1iO3ZhciBoPWcmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcj9udWxsOmQucmVuZGVyKCk7Yi5lZmZlY3RUYWd8PTE7bnVsbCE9PWEmJmc/KGIuY2hpbGQ9ZmgoYixhLmNoaWxkLG51bGwsZiksYi5jaGlsZD1maChiLG51bGwsaCxmKSk6UihhLGIsaCxmKTtiLm1lbW9pemVkU3RhdGU9ZC5zdGF0ZTtlJiZLZihiLGMsITApO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIHdpKGEpe3ZhciBiPWEuc3RhdGVOb2RlO2IucGVuZGluZ0NvbnRleHQ/SGYoYSxiLnBlbmRpbmdDb250ZXh0LGIucGVuZGluZ0NvbnRleHQhPT1iLmNvbnRleHQpOmIuY29udGV4dCYmSGYoYSxiLmNvbnRleHQsITEpO21oKGEsYi5jb250YWluZXJJbmZvKX1cbnZhciB4aT17ZGVoeWRyYXRlZDpudWxsLHJldHJ5VGltZTowfTtcbmZ1bmN0aW9uIHlpKGEsYixjKXt2YXIgZD1iLm1vZGUsZT1iLnBlbmRpbmdQcm9wcyxmPU0uY3VycmVudCxnPSExLGg7KGg9MCE9PShiLmVmZmVjdFRhZyY2NCkpfHwoaD0wIT09KGYmMikmJihudWxsPT09YXx8bnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSkpO2g/KGc9ITAsYi5lZmZlY3RUYWcmPS02NSk6bnVsbCE9PWEmJm51bGw9PT1hLm1lbW9pemVkU3RhdGV8fHZvaWQgMD09PWUuZmFsbGJhY2t8fCEwPT09ZS51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFja3x8KGZ8PTEpO0koTSxmJjEsYik7aWYobnVsbD09PWEpe3ZvaWQgMCE9PWUuZmFsbGJhY2smJmlpKGIpO2lmKGcpe2c9ZS5mYWxsYmFjaztlPWVoKG51bGwsZCwwLG51bGwpO2UucmV0dXJuPWI7aWYoMD09PShiLm1vZGUmMikpZm9yKGE9bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZT9iLmNoaWxkLmNoaWxkOmIuY2hpbGQsZS5jaGlsZD1hO251bGwhPT1hOylhLnJldHVybj1lLGE9YS5zaWJsaW5nO2M9ZWgoZyxkLGMsbnVsbCk7Yy5yZXR1cm49XG5iO2Uuc2libGluZz1jO2IubWVtb2l6ZWRTdGF0ZT14aTtiLmNoaWxkPWU7cmV0dXJuIGN9ZD1lLmNoaWxkcmVuO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBiLmNoaWxkPWdoKGIsbnVsbCxkLGMpfWlmKG51bGwhPT1hLm1lbW9pemVkU3RhdGUpe2E9YS5jaGlsZDtkPWEuc2libGluZztpZihnKXtlPWUuZmFsbGJhY2s7Yz1haChhLGEucGVuZGluZ1Byb3BzLDApO2MucmV0dXJuPWI7aWYoMD09PShiLm1vZGUmMikmJihnPW51bGwhPT1iLm1lbW9pemVkU3RhdGU/Yi5jaGlsZC5jaGlsZDpiLmNoaWxkLGchPT1hLmNoaWxkKSlmb3IoYy5jaGlsZD1nO251bGwhPT1nOylnLnJldHVybj1jLGc9Zy5zaWJsaW5nO2Q9YWgoZCxlLGQuZXhwaXJhdGlvblRpbWUpO2QucmV0dXJuPWI7Yy5zaWJsaW5nPWQ7Yy5jaGlsZEV4cGlyYXRpb25UaW1lPTA7Yi5tZW1vaXplZFN0YXRlPXhpO2IuY2hpbGQ9YztyZXR1cm4gZH1jPWZoKGIsYS5jaGlsZCxlLmNoaWxkcmVuLGMpO2IubWVtb2l6ZWRTdGF0ZT1cbm51bGw7cmV0dXJuIGIuY2hpbGQ9Y31hPWEuY2hpbGQ7aWYoZyl7Zz1lLmZhbGxiYWNrO2U9ZWgobnVsbCxkLDAsbnVsbCk7ZS5yZXR1cm49YjtlLmNoaWxkPWE7bnVsbCE9PWEmJihhLnJldHVybj1lKTtpZigwPT09KGIubW9kZSYyKSlmb3IoYT1udWxsIT09Yi5tZW1vaXplZFN0YXRlP2IuY2hpbGQuY2hpbGQ6Yi5jaGlsZCxlLmNoaWxkPWE7bnVsbCE9PWE7KWEucmV0dXJuPWUsYT1hLnNpYmxpbmc7Yz1laChnLGQsYyxudWxsKTtjLnJldHVybj1iO2Uuc2libGluZz1jO2MuZWZmZWN0VGFnfD0yO2UuY2hpbGRFeHBpcmF0aW9uVGltZT0wO2IubWVtb2l6ZWRTdGF0ZT14aTtiLmNoaWxkPWU7cmV0dXJuIGN9Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGIuY2hpbGQ9ZmgoYixhLGUuY2hpbGRyZW4sYyl9XG5mdW5jdGlvbiB6aShhLGIpe2EuZXhwaXJhdGlvblRpbWU8YiYmKGEuZXhwaXJhdGlvblRpbWU9Yik7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJmMuZXhwaXJhdGlvblRpbWU8YiYmKGMuZXhwaXJhdGlvblRpbWU9Yik7dWcoYS5yZXR1cm4sYil9ZnVuY3Rpb24gQWkoYSxiLGMsZCxlLGYpe3ZhciBnPWEubWVtb2l6ZWRTdGF0ZTtudWxsPT09Zz9hLm1lbW9pemVkU3RhdGU9e2lzQmFja3dhcmRzOmIscmVuZGVyaW5nOm51bGwsbGFzdDpkLHRhaWw6Yyx0YWlsRXhwaXJhdGlvbjowLHRhaWxNb2RlOmUsbGFzdEVmZmVjdDpmfTooZy5pc0JhY2t3YXJkcz1iLGcucmVuZGVyaW5nPW51bGwsZy5sYXN0PWQsZy50YWlsPWMsZy50YWlsRXhwaXJhdGlvbj0wLGcudGFpbE1vZGU9ZSxnLmxhc3RFZmZlY3Q9Zil9XG5mdW5jdGlvbiBCaShhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1kLnJldmVhbE9yZGVyLGY9ZC50YWlsO1IoYSxiLGQuY2hpbGRyZW4sYyk7ZD1NLmN1cnJlbnQ7aWYoMCE9PShkJjIpKWQ9ZCYxfDIsYi5lZmZlY3RUYWd8PTY0O2Vsc2V7aWYobnVsbCE9PWEmJjAhPT0oYS5lZmZlY3RUYWcmNjQpKWE6Zm9yKGE9Yi5jaGlsZDtudWxsIT09YTspe2lmKDEzPT09YS50YWcpbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSYmemkoYSxjKTtlbHNlIGlmKDE5PT09YS50YWcpemkoYSxjKTtlbHNlIGlmKG51bGwhPT1hLmNoaWxkKXthLmNoaWxkLnJldHVybj1hO2E9YS5jaGlsZDtjb250aW51ZX1pZihhPT09YilicmVhayBhO2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8YS5yZXR1cm49PT1iKWJyZWFrIGE7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2E9YS5zaWJsaW5nfWQmPTF9SShNLGQsYik7aWYoMD09PShiLm1vZGUmMikpYi5tZW1vaXplZFN0YXRlPVxubnVsbDtlbHNlIHN3aXRjaChlKXtjYXNlIFwiZm9yd2FyZHNcIjpjPWIuY2hpbGQ7Zm9yKGU9bnVsbDtudWxsIT09YzspYT1jLmFsdGVybmF0ZSxudWxsIT09YSYmbnVsbD09PXFoKGEpJiYoZT1jKSxjPWMuc2libGluZztjPWU7bnVsbD09PWM/KGU9Yi5jaGlsZCxiLmNoaWxkPW51bGwpOihlPWMuc2libGluZyxjLnNpYmxpbmc9bnVsbCk7QWkoYiwhMSxlLGMsZixiLmxhc3RFZmZlY3QpO2JyZWFrO2Nhc2UgXCJiYWNrd2FyZHNcIjpjPW51bGw7ZT1iLmNoaWxkO2ZvcihiLmNoaWxkPW51bGw7bnVsbCE9PWU7KXthPWUuYWx0ZXJuYXRlO2lmKG51bGwhPT1hJiZudWxsPT09cWgoYSkpe2IuY2hpbGQ9ZTticmVha31hPWUuc2libGluZztlLnNpYmxpbmc9YztjPWU7ZT1hfUFpKGIsITAsYyxudWxsLGYsYi5sYXN0RWZmZWN0KTticmVhaztjYXNlIFwidG9nZXRoZXJcIjpBaShiLCExLG51bGwsbnVsbCx2b2lkIDAsYi5sYXN0RWZmZWN0KTticmVhaztkZWZhdWx0OmIubWVtb2l6ZWRTdGF0ZT1udWxsfXJldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gb2koYSxiLGMpe251bGwhPT1hJiYoYi5kZXBlbmRlbmNpZXM9YS5kZXBlbmRlbmNpZXMpO3ZhciBkPWIuZXhwaXJhdGlvblRpbWU7MCE9PWQmJkpnKGQpO2lmKGIuY2hpbGRFeHBpcmF0aW9uVGltZTxjKXJldHVybiBudWxsO2lmKG51bGwhPT1hJiZiLmNoaWxkIT09YS5jaGlsZCl0aHJvdyBFcnJvcih1KDE1MykpO2lmKG51bGwhPT1iLmNoaWxkKXthPWIuY2hpbGQ7Yz1haChhLGEucGVuZGluZ1Byb3BzLGEuZXhwaXJhdGlvblRpbWUpO2IuY2hpbGQ9Yztmb3IoYy5yZXR1cm49YjtudWxsIT09YS5zaWJsaW5nOylhPWEuc2libGluZyxjPWMuc2libGluZz1haChhLGEucGVuZGluZ1Byb3BzLGEuZXhwaXJhdGlvblRpbWUpLGMucmV0dXJuPWI7Yy5zaWJsaW5nPW51bGx9cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gQ2koYSl7YS5lZmZlY3RUYWd8PTR9dmFyIEhpLElpLEppLEtpO1xuSGk9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9Yi5jaGlsZDtudWxsIT09Yzspe2lmKDU9PT1jLnRhZ3x8Nj09PWMudGFnKWEuYXBwZW5kQ2hpbGQoYy5zdGF0ZU5vZGUpO2Vsc2UgaWYoNCE9PWMudGFnJiZudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PWIpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWIpcmV0dXJuO2M9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319O0lpPWZ1bmN0aW9uKCl7fTtcbkppPWZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9YS5tZW1vaXplZFByb3BzO2lmKGYhPT1kKXt2YXIgZz1iLnN0YXRlTm9kZTtsaChpaC5jdXJyZW50KTthPW51bGw7c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOmY9QWIoZyxmKTtkPUFiKGcsZCk7YT1bXTticmVhaztjYXNlIFwib3B0aW9uXCI6Zj1JYihnLGYpO2Q9SWIoZyxkKTthPVtdO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpmPW4oe30sZix7dmFsdWU6dm9pZCAwfSk7ZD1uKHt9LGQse3ZhbHVlOnZvaWQgMH0pO2E9W107YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6Zj1LYihnLGYpO2Q9S2IoZyxkKTthPVtdO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiIT09dHlwZW9mIGYub25DbGljayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQub25DbGljayYmKGcub25jbGljaz1hZSl9WWQoYyxkKTt2YXIgaCxrO2M9bnVsbDtmb3IoaCBpbiBmKWlmKCFkLmhhc093blByb3BlcnR5KGgpJiZmLmhhc093blByb3BlcnR5KGgpJiZudWxsIT1mW2hdKWlmKFwic3R5bGVcIj09PVxuaClmb3IoayBpbiBnPWZbaF0sZylnLmhhc093blByb3BlcnR5KGspJiYoY3x8KGM9e30pLGNba109XCJcIik7ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIiE9PWgmJlwiY2hpbGRyZW5cIiE9PWgmJlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1oJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09aCYmXCJhdXRvRm9jdXNcIiE9PWgmJihpYS5oYXNPd25Qcm9wZXJ0eShoKT9hfHwoYT1bXSk6KGE9YXx8W10pLnB1c2goaCxudWxsKSk7Zm9yKGggaW4gZCl7dmFyIGw9ZFtoXTtnPW51bGwhPWY/ZltoXTp2b2lkIDA7aWYoZC5oYXNPd25Qcm9wZXJ0eShoKSYmbCE9PWcmJihudWxsIT1sfHxudWxsIT1nKSlpZihcInN0eWxlXCI9PT1oKWlmKGcpe2ZvcihrIGluIGcpIWcuaGFzT3duUHJvcGVydHkoayl8fGwmJmwuaGFzT3duUHJvcGVydHkoayl8fChjfHwoYz17fSksY1trXT1cIlwiKTtmb3IoayBpbiBsKWwuaGFzT3duUHJvcGVydHkoaykmJmdba10hPT1sW2tdJiYoY3x8KGM9e30pLFxuY1trXT1sW2tdKX1lbHNlIGN8fChhfHwoYT1bXSksYS5wdXNoKGgsYykpLGM9bDtlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09aD8obD1sP2wuX19odG1sOnZvaWQgMCxnPWc/Zy5fX2h0bWw6dm9pZCAwLG51bGwhPWwmJmchPT1sJiYoYT1hfHxbXSkucHVzaChoLFwiXCIrbCkpOlwiY2hpbGRyZW5cIj09PWg/Zz09PWx8fFwic3RyaW5nXCIhPT10eXBlb2YgbCYmXCJudW1iZXJcIiE9PXR5cGVvZiBsfHwoYT1hfHxbXSkucHVzaChoLFwiXCIrbCk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWgmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1oJiYoaWEuaGFzT3duUHJvcGVydHkoaCk/KG51bGwhPWwmJiRkKGUsaCksYXx8Zz09PWx8fChhPVtdKSk6KGE9YXx8W10pLnB1c2goaCxsKSl9YyYmKGE9YXx8W10pLnB1c2goXCJzdHlsZVwiLGMpO2U9YTsoYi51cGRhdGVRdWV1ZT1lKSYmQ2koYil9fTtLaT1mdW5jdGlvbihhLGIsYyxkKXtjIT09ZCYmQ2koYil9O1xuZnVuY3Rpb24gTGkoYSxiKXtzd2l0Y2goYS50YWlsTW9kZSl7Y2FzZSBcImhpZGRlblwiOmI9YS50YWlsO2Zvcih2YXIgYz1udWxsO251bGwhPT1iOyludWxsIT09Yi5hbHRlcm5hdGUmJihjPWIpLGI9Yi5zaWJsaW5nO251bGw9PT1jP2EudGFpbD1udWxsOmMuc2libGluZz1udWxsO2JyZWFrO2Nhc2UgXCJjb2xsYXBzZWRcIjpjPWEudGFpbDtmb3IodmFyIGQ9bnVsbDtudWxsIT09YzspbnVsbCE9PWMuYWx0ZXJuYXRlJiYoZD1jKSxjPWMuc2libGluZztudWxsPT09ZD9ifHxudWxsPT09YS50YWlsP2EudGFpbD1udWxsOmEudGFpbC5zaWJsaW5nPW51bGw6ZC5zaWJsaW5nPW51bGx9fVxuZnVuY3Rpb24gTWkoYSl7c3dpdGNoKGEudGFnKXtjYXNlIDE6TChhLnR5cGUpJiZGZihhKTt2YXIgYj1hLmVmZmVjdFRhZztyZXR1cm4gYiY0MDk2PyhhLmVmZmVjdFRhZz1iJi00MDk3fDY0LGEpOm51bGw7Y2FzZSAzOm5oKGEpO0dmKGEpO2I9YS5lZmZlY3RUYWc7aWYoMCE9PShiJjY0KSl0aHJvdyBFcnJvcih1KDI4NSkpO2EuZWZmZWN0VGFnPWImLTQwOTd8NjQ7cmV0dXJuIGE7Y2FzZSA1OnJldHVybiBwaChhKSxudWxsO2Nhc2UgMTM6cmV0dXJuIEcoTSxhKSxiPWEuZWZmZWN0VGFnLGImNDA5Nj8oYS5lZmZlY3RUYWc9YiYtNDA5N3w2NCxhKTpudWxsO2Nhc2UgMTk6cmV0dXJuIEcoTSxhKSxudWxsO2Nhc2UgNDpyZXR1cm4gbmgoYSksbnVsbDtjYXNlIDEwOnJldHVybiB0ZyhhKSxudWxsO2RlZmF1bHQ6cmV0dXJuIG51bGx9fWZ1bmN0aW9uIE5pKGEsYil7cmV0dXJue3ZhbHVlOmEsc291cmNlOmIsc3RhY2s6WGEoYil9fVxudmFyIE9pPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrU2V0P1dlYWtTZXQ6U2V0O2Z1bmN0aW9uIFBpKGEsYil7dmFyIGM9Yi5zb3VyY2UsZD1iLnN0YWNrO251bGw9PT1kJiZudWxsIT09YyYmKGQ9WGEoYykpO251bGwhPT1jJiZXYShjLnR5cGUpO2I9Yi52YWx1ZTtudWxsIT09YSYmMT09PWEudGFnJiZXYShhLnR5cGUpO3RyeXtjb25zb2xlLmVycm9yKGIpfWNhdGNoKGUpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXt0aHJvdyBlO30pfX1mdW5jdGlvbiBRaShhLGIpe3RyeXtiLnByb3BzPWEubWVtb2l6ZWRQcm9wcyxiLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSxiLmNvbXBvbmVudFdpbGxVbm1vdW50KCl9Y2F0Y2goYyl7UmkoYSxjKX19ZnVuY3Rpb24gU2koYSl7dmFyIGI9YS5yZWY7aWYobnVsbCE9PWIpaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpdHJ5e2IobnVsbCl9Y2F0Y2goYyl7UmkoYSxjKX1lbHNlIGIuY3VycmVudD1udWxsfVxuZnVuY3Rpb24gVGkoYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6VWkoMiwwLGIpO2JyZWFrO2Nhc2UgMTppZihiLmVmZmVjdFRhZyYyNTYmJm51bGwhPT1hKXt2YXIgYz1hLm1lbW9pemVkUHJvcHMsZD1hLm1lbW9pemVkU3RhdGU7YT1iLnN0YXRlTm9kZTtiPWEuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoYi5lbGVtZW50VHlwZT09PWIudHlwZT9jOm1nKGIudHlwZSxjKSxkKTthLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlPWJ9YnJlYWs7Y2FzZSAzOmNhc2UgNTpjYXNlIDY6Y2FzZSA0OmNhc2UgMTc6YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcih1KDE2MykpO319XG5mdW5jdGlvbiBVaShhLGIsYyl7Yz1jLnVwZGF0ZVF1ZXVlO2M9bnVsbCE9PWM/Yy5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWMpe3ZhciBkPWM9Yy5uZXh0O2Rve2lmKDAhPT0oZC50YWcmYSkpe3ZhciBlPWQuZGVzdHJveTtkLmRlc3Ryb3k9dm9pZCAwO3ZvaWQgMCE9PWUmJmUoKX0wIT09KGQudGFnJmIpJiYoZT1kLmNyZWF0ZSxkLmRlc3Ryb3k9ZSgpKTtkPWQubmV4dH13aGlsZShkIT09Yyl9fVxuZnVuY3Rpb24gVmkoYSxiLGMpe1wiZnVuY3Rpb25cIj09PXR5cGVvZiBXaSYmV2koYik7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6YT1iLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1hJiYoYT1hLmxhc3RFZmZlY3QsbnVsbCE9PWEpKXt2YXIgZD1hLm5leHQ7ZmcoOTc8Yz85NzpjLGZ1bmN0aW9uKCl7dmFyIGE9ZDtkb3t2YXIgYz1hLmRlc3Ryb3k7aWYodm9pZCAwIT09Yyl7dmFyIGc9Yjt0cnl7YygpfWNhdGNoKGgpe1JpKGcsaCl9fWE9YS5uZXh0fXdoaWxlKGEhPT1kKX0pfWJyZWFrO2Nhc2UgMTpTaShiKTtjPWIuc3RhdGVOb2RlO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmNvbXBvbmVudFdpbGxVbm1vdW50JiZRaShiLGMpO2JyZWFrO2Nhc2UgNTpTaShiKTticmVhaztjYXNlIDQ6WGkoYSxiLGMpfX1cbmZ1bmN0aW9uIFlpKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO2EucmV0dXJuPW51bGw7YS5jaGlsZD1udWxsO2EubWVtb2l6ZWRTdGF0ZT1udWxsO2EudXBkYXRlUXVldWU9bnVsbDthLmRlcGVuZGVuY2llcz1udWxsO2EuYWx0ZXJuYXRlPW51bGw7YS5maXJzdEVmZmVjdD1udWxsO2EubGFzdEVmZmVjdD1udWxsO2EucGVuZGluZ1Byb3BzPW51bGw7YS5tZW1vaXplZFByb3BzPW51bGw7bnVsbCE9PWImJllpKGIpfWZ1bmN0aW9uIFppKGEpe3JldHVybiA1PT09YS50YWd8fDM9PT1hLnRhZ3x8ND09PWEudGFnfVxuZnVuY3Rpb24gJGkoYSl7YTp7Zm9yKHZhciBiPWEucmV0dXJuO251bGwhPT1iOyl7aWYoWmkoYikpe3ZhciBjPWI7YnJlYWsgYX1iPWIucmV0dXJufXRocm93IEVycm9yKHUoMTYwKSk7fWI9Yy5zdGF0ZU5vZGU7c3dpdGNoKGMudGFnKXtjYXNlIDU6dmFyIGQ9ITE7YnJlYWs7Y2FzZSAzOmI9Yi5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7Y2FzZSA0OmI9Yi5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcih1KDE2MSkpO31jLmVmZmVjdFRhZyYxNiYmKFRiKGIsXCJcIiksYy5lZmZlY3RUYWcmPS0xNyk7YTpiOmZvcihjPWE7Oyl7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxaaShjLnJldHVybikpe2M9bnVsbDticmVhayBhfWM9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtmb3IoYz1jLnNpYmxpbmc7NSE9PWMudGFnJiY2IT09Yy50YWcmJjE4IT09Yy50YWc7KXtpZihjLmVmZmVjdFRhZyYyKWNvbnRpbnVlIGI7XG5pZihudWxsPT09Yy5jaGlsZHx8ND09PWMudGFnKWNvbnRpbnVlIGI7ZWxzZSBjLmNoaWxkLnJldHVybj1jLGM9Yy5jaGlsZH1pZighKGMuZWZmZWN0VGFnJjIpKXtjPWMuc3RhdGVOb2RlO2JyZWFrIGF9fWZvcih2YXIgZT1hOzspe3ZhciBmPTU9PT1lLnRhZ3x8Nj09PWUudGFnO2lmKGYpe3ZhciBnPWY/ZS5zdGF0ZU5vZGU6ZS5zdGF0ZU5vZGUuaW5zdGFuY2U7aWYoYylpZihkKXtmPWI7dmFyIGg9ZztnPWM7OD09PWYubm9kZVR5cGU/Zi5wYXJlbnROb2RlLmluc2VydEJlZm9yZShoLGcpOmYuaW5zZXJ0QmVmb3JlKGgsZyl9ZWxzZSBiLmluc2VydEJlZm9yZShnLGMpO2Vsc2UgZD8oaD1iLDg9PT1oLm5vZGVUeXBlPyhmPWgucGFyZW50Tm9kZSxmLmluc2VydEJlZm9yZShnLGgpKTooZj1oLGYuYXBwZW5kQ2hpbGQoZykpLGg9aC5fcmVhY3RSb290Q29udGFpbmVyLG51bGwhPT1oJiZ2b2lkIDAhPT1ofHxudWxsIT09Zi5vbmNsaWNrfHwoZi5vbmNsaWNrPWFlKSk6Yi5hcHBlbmRDaGlsZChnKX1lbHNlIGlmKDQhPT1cbmUudGFnJiZudWxsIT09ZS5jaGlsZCl7ZS5jaGlsZC5yZXR1cm49ZTtlPWUuY2hpbGQ7Y29udGludWV9aWYoZT09PWEpYnJlYWs7Zm9yKDtudWxsPT09ZS5zaWJsaW5nOyl7aWYobnVsbD09PWUucmV0dXJufHxlLnJldHVybj09PWEpcmV0dXJuO2U9ZS5yZXR1cm59ZS5zaWJsaW5nLnJldHVybj1lLnJldHVybjtlPWUuc2libGluZ319XG5mdW5jdGlvbiBYaShhLGIsYyl7Zm9yKHZhciBkPWIsZT0hMSxmLGc7Oyl7aWYoIWUpe2U9ZC5yZXR1cm47YTpmb3IoOzspe2lmKG51bGw9PT1lKXRocm93IEVycm9yKHUoMTYwKSk7Zj1lLnN0YXRlTm9kZTtzd2l0Y2goZS50YWcpe2Nhc2UgNTpnPSExO2JyZWFrIGE7Y2FzZSAzOmY9Zi5jb250YWluZXJJbmZvO2c9ITA7YnJlYWsgYTtjYXNlIDQ6Zj1mLmNvbnRhaW5lckluZm87Zz0hMDticmVhayBhfWU9ZS5yZXR1cm59ZT0hMH1pZig1PT09ZC50YWd8fDY9PT1kLnRhZyl7YTpmb3IodmFyIGg9YSxrPWQsbD1jLG09azs7KWlmKFZpKGgsbSxsKSxudWxsIT09bS5jaGlsZCYmNCE9PW0udGFnKW0uY2hpbGQucmV0dXJuPW0sbT1tLmNoaWxkO2Vsc2V7aWYobT09PWspYnJlYWs7Zm9yKDtudWxsPT09bS5zaWJsaW5nOyl7aWYobnVsbD09PW0ucmV0dXJufHxtLnJldHVybj09PWspYnJlYWsgYTttPW0ucmV0dXJufW0uc2libGluZy5yZXR1cm49bS5yZXR1cm47bT1tLnNpYmxpbmd9Zz8oaD1cbmYsaz1kLnN0YXRlTm9kZSw4PT09aC5ub2RlVHlwZT9oLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoayk6aC5yZW1vdmVDaGlsZChrKSk6Zi5yZW1vdmVDaGlsZChkLnN0YXRlTm9kZSl9ZWxzZSBpZig0PT09ZC50YWcpe2lmKG51bGwhPT1kLmNoaWxkKXtmPWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87Zz0hMDtkLmNoaWxkLnJldHVybj1kO2Q9ZC5jaGlsZDtjb250aW51ZX19ZWxzZSBpZihWaShhLGQsYyksbnVsbCE9PWQuY2hpbGQpe2QuY2hpbGQucmV0dXJuPWQ7ZD1kLmNoaWxkO2NvbnRpbnVlfWlmKGQ9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWQuc2libGluZzspe2lmKG51bGw9PT1kLnJldHVybnx8ZC5yZXR1cm49PT1iKXJldHVybjtkPWQucmV0dXJuOzQ9PT1kLnRhZyYmKGU9ITEpfWQuc2libGluZy5yZXR1cm49ZC5yZXR1cm47ZD1kLnNpYmxpbmd9fVxuZnVuY3Rpb24gYWooYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpVaSg0LDgsYik7YnJlYWs7Y2FzZSAxOmJyZWFrO2Nhc2UgNTp2YXIgYz1iLnN0YXRlTm9kZTtpZihudWxsIT1jKXt2YXIgZD1iLm1lbW9pemVkUHJvcHMsZT1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6ZDthPWIudHlwZTt2YXIgZj1iLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9bnVsbDtpZihudWxsIT09Zil7Y1t2ZV09ZDtcImlucHV0XCI9PT1hJiZcInJhZGlvXCI9PT1kLnR5cGUmJm51bGwhPWQubmFtZSYmQ2IoYyxkKTtaZChhLGUpO2I9WmQoYSxkKTtmb3IoZT0wO2U8Zi5sZW5ndGg7ZSs9Mil7dmFyIGc9ZltlXSxoPWZbZSsxXTtcInN0eWxlXCI9PT1nP1dkKGMsaCk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zz9TYihjLGgpOlwiY2hpbGRyZW5cIj09PWc/VGIoYyxoKTp2YihjLGcsaCxiKX1zd2l0Y2goYSl7Y2FzZSBcImlucHV0XCI6RWIoYyxkKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpNYihjLFxuZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9Yy5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlLGMuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZT0hIWQubXVsdGlwbGUsYT1kLnZhbHVlLG51bGwhPWE/SmIoYywhIWQubXVsdGlwbGUsYSwhMSk6YiE9PSEhZC5tdWx0aXBsZSYmKG51bGwhPWQuZGVmYXVsdFZhbHVlP0piKGMsISFkLm11bHRpcGxlLGQuZGVmYXVsdFZhbHVlLCEwKTpKYihjLCEhZC5tdWx0aXBsZSxkLm11bHRpcGxlP1tdOlwiXCIsITEpKX19fWJyZWFrO2Nhc2UgNjppZihudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IodSgxNjIpKTtiLnN0YXRlTm9kZS5ub2RlVmFsdWU9Yi5tZW1vaXplZFByb3BzO2JyZWFrO2Nhc2UgMzpiPWIuc3RhdGVOb2RlO2IuaHlkcmF0ZSYmKGIuaHlkcmF0ZT0hMSxMYyhiLmNvbnRhaW5lckluZm8pKTticmVhaztjYXNlIDEyOmJyZWFrO2Nhc2UgMTM6Yz1iO251bGw9PT1iLm1lbW9pemVkU3RhdGU/ZD0hMTooZD0hMCxjPWIuY2hpbGQsYmo9Y2coKSk7XG5pZihudWxsIT09YylhOmZvcihhPWM7Oyl7aWYoNT09PWEudGFnKWY9YS5zdGF0ZU5vZGUsZD8oZj1mLnN0eWxlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLnNldFByb3BlcnR5P2Yuc2V0UHJvcGVydHkoXCJkaXNwbGF5XCIsXCJub25lXCIsXCJpbXBvcnRhbnRcIik6Zi5kaXNwbGF5PVwibm9uZVwiKTooZj1hLnN0YXRlTm9kZSxlPWEubWVtb2l6ZWRQcm9wcy5zdHlsZSxlPXZvaWQgMCE9PWUmJm51bGwhPT1lJiZlLmhhc093blByb3BlcnR5KFwiZGlzcGxheVwiKT9lLmRpc3BsYXk6bnVsbCxmLnN0eWxlLmRpc3BsYXk9VmQoXCJkaXNwbGF5XCIsZSkpO2Vsc2UgaWYoNj09PWEudGFnKWEuc3RhdGVOb2RlLm5vZGVWYWx1ZT1kP1wiXCI6YS5tZW1vaXplZFByb3BzO2Vsc2UgaWYoMTM9PT1hLnRhZyYmbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSYmbnVsbD09PWEubWVtb2l6ZWRTdGF0ZS5kZWh5ZHJhdGVkKXtmPWEuY2hpbGQuc2libGluZztmLnJldHVybj1hO2E9Zjtjb250aW51ZX1lbHNlIGlmKG51bGwhPT1hLmNoaWxkKXthLmNoaWxkLnJldHVybj1cbmE7YT1hLmNoaWxkO2NvbnRpbnVlfWlmKGE9PT1jKWJyZWFrIGE7Zm9yKDtudWxsPT09YS5zaWJsaW5nOyl7aWYobnVsbD09PWEucmV0dXJufHxhLnJldHVybj09PWMpYnJlYWsgYTthPWEucmV0dXJufWEuc2libGluZy5yZXR1cm49YS5yZXR1cm47YT1hLnNpYmxpbmd9Y2ooYik7YnJlYWs7Y2FzZSAxOTpjaihiKTticmVhaztjYXNlIDE3OmJyZWFrO2Nhc2UgMjA6YnJlYWs7Y2FzZSAyMTpicmVhaztkZWZhdWx0OnRocm93IEVycm9yKHUoMTYzKSk7fX1mdW5jdGlvbiBjaihhKXt2YXIgYj1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthLnVwZGF0ZVF1ZXVlPW51bGw7dmFyIGM9YS5zdGF0ZU5vZGU7bnVsbD09PWMmJihjPWEuc3RhdGVOb2RlPW5ldyBPaSk7Yi5mb3JFYWNoKGZ1bmN0aW9uKGIpe3ZhciBkPWRqLmJpbmQobnVsbCxhLGIpO2MuaGFzKGIpfHwoYy5hZGQoYiksYi50aGVuKGQsZCkpfSl9fXZhciBlaj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha01hcD9XZWFrTWFwOk1hcDtcbmZ1bmN0aW9uIGZqKGEsYixjKXtjPUJnKGMsbnVsbCk7Yy50YWc9MztjLnBheWxvYWQ9e2VsZW1lbnQ6bnVsbH07dmFyIGQ9Yi52YWx1ZTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7Z2p8fChnaj0hMCxoaj1kKTtQaShhLGIpfTtyZXR1cm4gY31cbmZ1bmN0aW9uIGlqKGEsYixjKXtjPUJnKGMsbnVsbCk7Yy50YWc9Mzt2YXIgZD1hLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2YXIgZT1iLnZhbHVlO2MucGF5bG9hZD1mdW5jdGlvbigpe1BpKGEsYik7cmV0dXJuIGQoZSl9fXZhciBmPWEuc3RhdGVOb2RlO251bGwhPT1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5jb21wb25lbnREaWRDYXRjaCYmKGMuY2FsbGJhY2s9ZnVuY3Rpb24oKXtcImZ1bmN0aW9uXCIhPT10eXBlb2YgZCYmKG51bGw9PT1qaj9qaj1uZXcgU2V0KFt0aGlzXSk6amouYWRkKHRoaXMpLFBpKGEsYikpO3ZhciBjPWIuc3RhY2s7dGhpcy5jb21wb25lbnREaWRDYXRjaChiLnZhbHVlLHtjb21wb25lbnRTdGFjazpudWxsIT09Yz9jOlwiXCJ9KX0pO3JldHVybiBjfVxudmFyIGtqPU1hdGguY2VpbCxsaj1FYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLG1qPUVhLlJlYWN0Q3VycmVudE93bmVyLFM9MCxuaj04LG9qPTE2LHBqPTMyLHFqPTAscmo9MSxzaj0yLHRqPTMsdWo9NCx2aj01LFQ9UyxVPW51bGwsVj1udWxsLFc9MCxYPXFqLHdqPW51bGwseGo9MTA3Mzc0MTgyMyx5aj0xMDczNzQxODIzLHpqPW51bGwsQWo9MCxCaj0hMSxiaj0wLENqPTUwMCxZPW51bGwsZ2o9ITEsaGo9bnVsbCxqaj1udWxsLERqPSExLEVqPW51bGwsRmo9OTAsR2o9bnVsbCxIaj0wLElqPW51bGwsSmo9MDtmdW5jdGlvbiBQZygpe3JldHVybihUJihvanxwaikpIT09Uz8xMDczNzQxODIxLShjZygpLzEwfDApOjAhPT1Kaj9KajpKaj0xMDczNzQxODIxLShjZygpLzEwfDApfVxuZnVuY3Rpb24gUWcoYSxiLGMpe2I9Yi5tb2RlO2lmKDA9PT0oYiYyKSlyZXR1cm4gMTA3Mzc0MTgyMzt2YXIgZD1kZygpO2lmKDA9PT0oYiY0KSlyZXR1cm4gOTk9PT1kPzEwNzM3NDE4MjM6MTA3Mzc0MTgyMjtpZigoVCZvaikhPT1TKXJldHVybiBXO2lmKG51bGwhPT1jKWE9bGcoYSxjLnRpbWVvdXRNc3wwfHw1RTMsMjUwKTtlbHNlIHN3aXRjaChkKXtjYXNlIDk5OmE9MTA3Mzc0MTgyMzticmVhaztjYXNlIDk4OmE9bGcoYSwxNTAsMTAwKTticmVhaztjYXNlIDk3OmNhc2UgOTY6YT1sZyhhLDVFMywyNTApO2JyZWFrO2Nhc2UgOTU6YT0yO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IodSgzMjYpKTt9bnVsbCE9PVUmJmE9PT1XJiYtLWE7cmV0dXJuIGF9XG5mdW5jdGlvbiBSZyhhLGIpe2lmKDUwPEhqKXRocm93IEhqPTAsSWo9bnVsbCxFcnJvcih1KDE4NSkpO2E9S2ooYSxiKTtpZihudWxsIT09YSl7dmFyIGM9ZGcoKTsxMDczNzQxODIzPT09Yj8oVCZuaikhPT1TJiYoVCYob2p8cGopKT09PVM/TGooYSk6KFooYSksVD09PVMmJmpnKCkpOlooYSk7KFQmNCk9PT1TfHw5OCE9PWMmJjk5IT09Y3x8KG51bGw9PT1Haj9Haj1uZXcgTWFwKFtbYSxiXV0pOihjPUdqLmdldChhKSwodm9pZCAwPT09Y3x8Yz5iKSYmR2ouc2V0KGEsYikpKX19XG5mdW5jdGlvbiBLaihhLGIpe2EuZXhwaXJhdGlvblRpbWU8YiYmKGEuZXhwaXJhdGlvblRpbWU9Yik7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJmMuZXhwaXJhdGlvblRpbWU8YiYmKGMuZXhwaXJhdGlvblRpbWU9Yik7dmFyIGQ9YS5yZXR1cm4sZT1udWxsO2lmKG51bGw9PT1kJiYzPT09YS50YWcpZT1hLnN0YXRlTm9kZTtlbHNlIGZvcig7bnVsbCE9PWQ7KXtjPWQuYWx0ZXJuYXRlO2QuY2hpbGRFeHBpcmF0aW9uVGltZTxiJiYoZC5jaGlsZEV4cGlyYXRpb25UaW1lPWIpO251bGwhPT1jJiZjLmNoaWxkRXhwaXJhdGlvblRpbWU8YiYmKGMuY2hpbGRFeHBpcmF0aW9uVGltZT1iKTtpZihudWxsPT09ZC5yZXR1cm4mJjM9PT1kLnRhZyl7ZT1kLnN0YXRlTm9kZTticmVha31kPWQucmV0dXJufW51bGwhPT1lJiYoVT09PWUmJihKZyhiKSxYPT09dWomJk1qKGUsVykpLE5qKGUsYikpO3JldHVybiBlfVxuZnVuY3Rpb24gT2ooYSl7dmFyIGI9YS5sYXN0RXhwaXJlZFRpbWU7aWYoMCE9PWIpcmV0dXJuIGI7Yj1hLmZpcnN0UGVuZGluZ1RpbWU7aWYoIVBqKGEsYikpcmV0dXJuIGI7Yj1hLmxhc3RQaW5nZWRUaW1lO2E9YS5uZXh0S25vd25QZW5kaW5nTGV2ZWw7cmV0dXJuIGI+YT9iOmF9XG5mdW5jdGlvbiBaKGEpe2lmKDAhPT1hLmxhc3RFeHBpcmVkVGltZSlhLmNhbGxiYWNrRXhwaXJhdGlvblRpbWU9MTA3Mzc0MTgyMyxhLmNhbGxiYWNrUHJpb3JpdHk9OTksYS5jYWxsYmFja05vZGU9aGcoTGouYmluZChudWxsLGEpKTtlbHNle3ZhciBiPU9qKGEpLGM9YS5jYWxsYmFja05vZGU7aWYoMD09PWIpbnVsbCE9PWMmJihhLmNhbGxiYWNrTm9kZT1udWxsLGEuY2FsbGJhY2tFeHBpcmF0aW9uVGltZT0wLGEuY2FsbGJhY2tQcmlvcml0eT05MCk7ZWxzZXt2YXIgZD1QZygpOzEwNzM3NDE4MjM9PT1iP2Q9OTk6MT09PWJ8fDI9PT1iP2Q9OTU6KGQ9MTAqKDEwNzM3NDE4MjEtYiktMTAqKDEwNzM3NDE4MjEtZCksZD0wPj1kPzk5OjI1MD49ZD85ODo1MjUwPj1kPzk3Ojk1KTtpZihudWxsIT09Yyl7dmFyIGU9YS5jYWxsYmFja1ByaW9yaXR5O2lmKGEuY2FsbGJhY2tFeHBpcmF0aW9uVGltZT09PWImJmU+PWQpcmV0dXJuO2MhPT1YZiYmTmYoYyl9YS5jYWxsYmFja0V4cGlyYXRpb25UaW1lPVxuYjthLmNhbGxiYWNrUHJpb3JpdHk9ZDtiPTEwNzM3NDE4MjM9PT1iP2hnKExqLmJpbmQobnVsbCxhKSk6Z2coZCxRai5iaW5kKG51bGwsYSkse3RpbWVvdXQ6MTAqKDEwNzM3NDE4MjEtYiktY2coKX0pO2EuY2FsbGJhY2tOb2RlPWJ9fX1cbmZ1bmN0aW9uIFFqKGEsYil7Smo9MDtpZihiKXJldHVybiBiPVBnKCksUmooYSxiKSxaKGEpLG51bGw7dmFyIGM9T2ooYSk7aWYoMCE9PWMpe2I9YS5jYWxsYmFja05vZGU7aWYoKFQmKG9qfHBqKSkhPT1TKXRocm93IEVycm9yKHUoMzI3KSk7U2ooKTthPT09VSYmYz09PVd8fFRqKGEsYyk7aWYobnVsbCE9PVYpe3ZhciBkPVQ7VHw9b2o7dmFyIGU9VWooYSk7ZG8gdHJ5e1ZqKCk7YnJlYWt9Y2F0Y2goaCl7V2ooYSxoKX13aGlsZSgxKTtyZygpO1Q9ZDtsai5jdXJyZW50PWU7aWYoWD09PXJqKXRocm93IGI9d2osVGooYSxjKSxNaihhLGMpLFooYSksYjtpZihudWxsPT09Vilzd2l0Y2goZT1hLmZpbmlzaGVkV29yaz1hLmN1cnJlbnQuYWx0ZXJuYXRlLGEuZmluaXNoZWRFeHBpcmF0aW9uVGltZT1jLGQ9WCxVPW51bGwsZCl7Y2FzZSBxajpjYXNlIHJqOnRocm93IEVycm9yKHUoMzQ1KSk7Y2FzZSBzajpSaihhLDI8Yz8yOmMpO2JyZWFrO2Nhc2UgdGo6TWooYSxjKTtkPWEubGFzdFN1c3BlbmRlZFRpbWU7XG5jPT09ZCYmKGEubmV4dEtub3duUGVuZGluZ0xldmVsPVhqKGUpKTtpZigxMDczNzQxODIzPT09eGomJihlPWJqK0NqLWNnKCksMTA8ZSkpe2lmKEJqKXt2YXIgZj1hLmxhc3RQaW5nZWRUaW1lO2lmKDA9PT1mfHxmPj1jKXthLmxhc3RQaW5nZWRUaW1lPWM7VGooYSxjKTticmVha319Zj1PaihhKTtpZigwIT09ZiYmZiE9PWMpYnJlYWs7aWYoMCE9PWQmJmQhPT1jKXthLmxhc3RQaW5nZWRUaW1lPWQ7YnJlYWt9YS50aW1lb3V0SGFuZGxlPXBlKFlqLmJpbmQobnVsbCxhKSxlKTticmVha31ZaihhKTticmVhaztjYXNlIHVqOk1qKGEsYyk7ZD1hLmxhc3RTdXNwZW5kZWRUaW1lO2M9PT1kJiYoYS5uZXh0S25vd25QZW5kaW5nTGV2ZWw9WGooZSkpO2lmKEJqJiYoZT1hLmxhc3RQaW5nZWRUaW1lLDA9PT1lfHxlPj1jKSl7YS5sYXN0UGluZ2VkVGltZT1jO1RqKGEsYyk7YnJlYWt9ZT1PaihhKTtpZigwIT09ZSYmZSE9PWMpYnJlYWs7aWYoMCE9PWQmJmQhPT1jKXthLmxhc3RQaW5nZWRUaW1lPVxuZDticmVha30xMDczNzQxODIzIT09eWo/ZD0xMCooMTA3Mzc0MTgyMS15aiktY2coKToxMDczNzQxODIzPT09eGo/ZD0wOihkPTEwKigxMDczNzQxODIxLXhqKS01RTMsZT1jZygpLGM9MTAqKDEwNzM3NDE4MjEtYyktZSxkPWUtZCwwPmQmJihkPTApLGQ9KDEyMD5kPzEyMDo0ODA+ZD80ODA6MTA4MD5kPzEwODA6MTkyMD5kPzE5MjA6M0UzPmQ/M0UzOjQzMjA+ZD80MzIwOjE5NjAqa2ooZC8xOTYwKSktZCxjPGQmJihkPWMpKTtpZigxMDxkKXthLnRpbWVvdXRIYW5kbGU9cGUoWWouYmluZChudWxsLGEpLGQpO2JyZWFrfVlqKGEpO2JyZWFrO2Nhc2Ugdmo6aWYoMTA3Mzc0MTgyMyE9PXhqJiZudWxsIT09emope2Y9eGo7dmFyIGc9emo7ZD1nLmJ1c3lNaW5EdXJhdGlvbk1zfDA7MD49ZD9kPTA6KGU9Zy5idXN5RGVsYXlNc3wwLGY9Y2coKS0oMTAqKDEwNzM3NDE4MjEtZiktKGcudGltZW91dE1zfDB8fDVFMykpLGQ9Zjw9ZT8wOmUrZC1mKTtpZigxMDxkKXtNaihhLGMpO2EudGltZW91dEhhbmRsZT1cbnBlKFlqLmJpbmQobnVsbCxhKSxkKTticmVha319WWooYSk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcih1KDMyOSkpO31aKGEpO2lmKGEuY2FsbGJhY2tOb2RlPT09YilyZXR1cm4gUWouYmluZChudWxsLGEpfX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIExqKGEpe3ZhciBiPWEubGFzdEV4cGlyZWRUaW1lO2I9MCE9PWI/YjoxMDczNzQxODIzO2lmKGEuZmluaXNoZWRFeHBpcmF0aW9uVGltZT09PWIpWWooYSk7ZWxzZXtpZigoVCYob2p8cGopKSE9PVMpdGhyb3cgRXJyb3IodSgzMjcpKTtTaigpO2E9PT1VJiZiPT09V3x8VGooYSxiKTtpZihudWxsIT09Vil7dmFyIGM9VDtUfD1vajt2YXIgZD1VaihhKTtkbyB0cnl7WmooKTticmVha31jYXRjaChlKXtXaihhLGUpfXdoaWxlKDEpO3JnKCk7VD1jO2xqLmN1cnJlbnQ9ZDtpZihYPT09cmopdGhyb3cgYz13aixUaihhLGIpLE1qKGEsYiksWihhKSxjO2lmKG51bGwhPT1WKXRocm93IEVycm9yKHUoMjYxKSk7YS5maW5pc2hlZFdvcms9YS5jdXJyZW50LmFsdGVybmF0ZTthLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9YjtVPW51bGw7WWooYSk7WihhKX19cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBhaygpe2lmKG51bGwhPT1Hail7dmFyIGE9R2o7R2o9bnVsbDthLmZvckVhY2goZnVuY3Rpb24oYSxjKXtSaihjLGEpO1ooYyl9KTtqZygpfX1mdW5jdGlvbiBiayhhLGIpe3ZhciBjPVQ7VHw9MTt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtUPWMsVD09PVMmJmpnKCl9fWZ1bmN0aW9uIGNrKGEsYil7dmFyIGM9VDtUJj0tMjtUfD1uajt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtUPWMsVD09PVMmJmpnKCl9fVxuZnVuY3Rpb24gVGooYSxiKXthLmZpbmlzaGVkV29yaz1udWxsO2EuZmluaXNoZWRFeHBpcmF0aW9uVGltZT0wO3ZhciBjPWEudGltZW91dEhhbmRsZTstMSE9PWMmJihhLnRpbWVvdXRIYW5kbGU9LTEscWUoYykpO2lmKG51bGwhPT1WKWZvcihjPVYucmV0dXJuO251bGwhPT1jOyl7dmFyIGQ9Yztzd2l0Y2goZC50YWcpe2Nhc2UgMTp2YXIgZT1kLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7bnVsbCE9PWUmJnZvaWQgMCE9PWUmJkZmKGQpO2JyZWFrO2Nhc2UgMzpuaChkKTtHZihkKTticmVhaztjYXNlIDU6cGgoZCk7YnJlYWs7Y2FzZSA0Om5oKGQpO2JyZWFrO2Nhc2UgMTM6RyhNLGQpO2JyZWFrO2Nhc2UgMTk6RyhNLGQpO2JyZWFrO2Nhc2UgMTA6dGcoZCl9Yz1jLnJldHVybn1VPWE7Vj1haChhLmN1cnJlbnQsbnVsbCxiKTtXPWI7WD1xajt3aj1udWxsO3lqPXhqPTEwNzM3NDE4MjM7emo9bnVsbDtBaj0wO0JqPSExfVxuZnVuY3Rpb24gV2ooYSxiKXtkb3t0cnl7cmcoKTtNaCgpO2lmKG51bGw9PT1WfHxudWxsPT09Vi5yZXR1cm4pcmV0dXJuIFg9cmosd2o9YixudWxsO2E6e3ZhciBjPWEsZD1WLnJldHVybixlPVYsZj1iO2I9VztlLmVmZmVjdFRhZ3w9MjA0ODtlLmZpcnN0RWZmZWN0PWUubGFzdEVmZmVjdD1udWxsO2lmKG51bGwhPT1mJiZcIm9iamVjdFwiPT09dHlwZW9mIGYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLnRoZW4pe3ZhciBnPWYsaD0wIT09KE0uY3VycmVudCYxKSxrPWQ7ZG97dmFyIGw7aWYobD0xMz09PWsudGFnKXt2YXIgbT1rLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PW0pbD1udWxsIT09bS5kZWh5ZHJhdGVkPyEwOiExO2Vsc2V7dmFyIEM9ay5tZW1vaXplZFByb3BzO2w9dm9pZCAwPT09Qy5mYWxsYmFjaz8hMTohMCE9PUMudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2s/ITA6aD8hMTohMH19aWYobCl7dmFyIHk9ay51cGRhdGVRdWV1ZTtpZihudWxsPT09eSl7dmFyIEg9bmV3IFNldDtcbkguYWRkKGcpO2sudXBkYXRlUXVldWU9SH1lbHNlIHkuYWRkKGcpO2lmKDA9PT0oay5tb2RlJjIpKXtrLmVmZmVjdFRhZ3w9NjQ7ZS5lZmZlY3RUYWcmPS0yOTgxO2lmKDE9PT1lLnRhZylpZihudWxsPT09ZS5hbHRlcm5hdGUpZS50YWc9MTc7ZWxzZXt2YXIgej1CZygxMDczNzQxODIzLG51bGwpO3oudGFnPTI7RGcoZSx6KX1lLmV4cGlyYXRpb25UaW1lPTEwNzM3NDE4MjM7YnJlYWsgYX1mPXZvaWQgMDtlPWI7dmFyIHRhPWMucGluZ0NhY2hlO251bGw9PT10YT8odGE9Yy5waW5nQ2FjaGU9bmV3IGVqLGY9bmV3IFNldCx0YS5zZXQoZyxmKSk6KGY9dGEuZ2V0KGcpLHZvaWQgMD09PWYmJihmPW5ldyBTZXQsdGEuc2V0KGcsZikpKTtpZighZi5oYXMoZSkpe2YuYWRkKGUpO3ZhciByPWRrLmJpbmQobnVsbCxjLGcsZSk7Zy50aGVuKHIscil9ay5lZmZlY3RUYWd8PTQwOTY7ay5leHBpcmF0aW9uVGltZT1iO2JyZWFrIGF9az1rLnJldHVybn13aGlsZShudWxsIT09ayk7Zj1FcnJvcigoV2EoZS50eXBlKXx8XG5cIkEgUmVhY3QgY29tcG9uZW50XCIpK1wiIHN1c3BlbmRlZCB3aGlsZSByZW5kZXJpbmcsIGJ1dCBubyBmYWxsYmFjayBVSSB3YXMgc3BlY2lmaWVkLlxcblxcbkFkZCBhIDxTdXNwZW5zZSBmYWxsYmFjaz0uLi4+IGNvbXBvbmVudCBoaWdoZXIgaW4gdGhlIHRyZWUgdG8gcHJvdmlkZSBhIGxvYWRpbmcgaW5kaWNhdG9yIG9yIHBsYWNlaG9sZGVyIHRvIGRpc3BsYXkuXCIrWGEoZSkpfVghPT12aiYmKFg9c2opO2Y9TmkoZixlKTtrPWQ7ZG97c3dpdGNoKGsudGFnKXtjYXNlIDM6Zz1mO2suZWZmZWN0VGFnfD00MDk2O2suZXhwaXJhdGlvblRpbWU9Yjt2YXIgeD1maihrLGcsYik7RWcoayx4KTticmVhayBhO2Nhc2UgMTpnPWY7dmFyIEE9ay50eXBlLHA9ay5zdGF0ZU5vZGU7aWYoMD09PShrLmVmZmVjdFRhZyY2NCkmJihcImZ1bmN0aW9uXCI9PT10eXBlb2YgQS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fG51bGwhPT1wJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgcC5jb21wb25lbnREaWRDYXRjaCYmXG4obnVsbD09PWpqfHwhamouaGFzKHApKSkpe2suZWZmZWN0VGFnfD00MDk2O2suZXhwaXJhdGlvblRpbWU9Yjt2YXIgdD1paihrLGcsYik7RWcoayx0KTticmVhayBhfX1rPWsucmV0dXJufXdoaWxlKG51bGwhPT1rKX1WPWVrKFYpfWNhdGNoKHYpe2I9djtjb250aW51ZX1icmVha313aGlsZSgxKX1mdW5jdGlvbiBVaigpe3ZhciBhPWxqLmN1cnJlbnQ7bGouY3VycmVudD1MaDtyZXR1cm4gbnVsbD09PWE/TGg6YX1mdW5jdGlvbiBJZyhhLGIpe2E8eGomJjI8YSYmKHhqPWEpO251bGwhPT1iJiZhPHlqJiYyPGEmJih5aj1hLHpqPWIpfWZ1bmN0aW9uIEpnKGEpe2E+QWomJihBaj1hKX1mdW5jdGlvbiBaaigpe2Zvcig7bnVsbCE9PVY7KVY9ZmsoVil9ZnVuY3Rpb24gVmooKXtmb3IoO251bGwhPT1WJiYhT2YoKTspVj1mayhWKX1cbmZ1bmN0aW9uIGZrKGEpe3ZhciBiPWdrKGEuYWx0ZXJuYXRlLGEsVyk7YS5tZW1vaXplZFByb3BzPWEucGVuZGluZ1Byb3BzO251bGw9PT1iJiYoYj1layhhKSk7bWouY3VycmVudD1udWxsO3JldHVybiBifVxuZnVuY3Rpb24gZWsoYSl7Vj1hO2Rve3ZhciBiPVYuYWx0ZXJuYXRlO2E9Vi5yZXR1cm47aWYoMD09PShWLmVmZmVjdFRhZyYyMDQ4KSl7YTp7dmFyIGM9YjtiPVY7dmFyIGQ9Vzt2YXIgZT1iLnBlbmRpbmdQcm9wcztzd2l0Y2goYi50YWcpe2Nhc2UgMjpicmVhaztjYXNlIDE2OmJyZWFrO2Nhc2UgMTU6Y2FzZSAwOmJyZWFrO2Nhc2UgMTpMKGIudHlwZSkmJkZmKGIpO2JyZWFrO2Nhc2UgMzpuaChiKTtHZihiKTtlPWIuc3RhdGVOb2RlO2UucGVuZGluZ0NvbnRleHQmJihlLmNvbnRleHQ9ZS5wZW5kaW5nQ29udGV4dCxlLnBlbmRpbmdDb250ZXh0PW51bGwpOyhudWxsPT09Y3x8bnVsbD09PWMuY2hpbGQpJiZraShiKSYmQ2koYik7SWkoYik7YnJlYWs7Y2FzZSA1OnBoKGIpO2Q9bGgoa2guY3VycmVudCk7dmFyIGY9Yi50eXBlO2lmKG51bGwhPT1jJiZudWxsIT1iLnN0YXRlTm9kZSlKaShjLGIsZixlLGQpLGMucmVmIT09Yi5yZWYmJihiLmVmZmVjdFRhZ3w9MTI4KTtlbHNlIGlmKGUpe3ZhciBnPVxubGgoaWguY3VycmVudCk7aWYoa2koYikpe2U9Yjt2YXIgaD1lLnN0YXRlTm9kZTtjPWUudHlwZTt2YXIgaz1lLm1lbW9pemVkUHJvcHMsbD1kO2hbdWVdPWU7aFt2ZV09aztmPXZvaWQgMDtkPWg7c3dpdGNoKGMpe2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RihcImxvYWRcIixkKTticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoaD0wO2g8Y2MubGVuZ3RoO2grKylGKGNjW2hdLGQpO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpGKFwiZXJyb3JcIixkKTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpGKFwiZXJyb3JcIixkKTtGKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJmb3JtXCI6RihcInJlc2V0XCIsZCk7RihcInN1Ym1pdFwiLGQpO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RihcInRvZ2dsZVwiLGQpO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOkJiKGQsayk7RihcImludmFsaWRcIixkKTskZChsLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmQuX3dyYXBwZXJTdGF0ZT1cbnt3YXNNdWx0aXBsZTohIWsubXVsdGlwbGV9O0YoXCJpbnZhbGlkXCIsZCk7JGQobCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOkxiKGQsayksRihcImludmFsaWRcIixkKSwkZChsLFwib25DaGFuZ2VcIil9WWQoYyxrKTtoPW51bGw7Zm9yKGYgaW4gaylrLmhhc093blByb3BlcnR5KGYpJiYoZz1rW2ZdLFwiY2hpbGRyZW5cIj09PWY/XCJzdHJpbmdcIj09PXR5cGVvZiBnP2QudGV4dENvbnRlbnQhPT1nJiYoaD1bXCJjaGlsZHJlblwiLGddKTpcIm51bWJlclwiPT09dHlwZW9mIGcmJmQudGV4dENvbnRlbnQhPT1cIlwiK2cmJihoPVtcImNoaWxkcmVuXCIsXCJcIitnXSk6aWEuaGFzT3duUHJvcGVydHkoZikmJm51bGwhPWcmJiRkKGwsZikpO3N3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjp5YihkKTtHYihkLGssITApO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOnliKGQpO05iKGQsayk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJvcHRpb25cIjpicmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBrLm9uQ2xpY2smJlxuKGQub25jbGljaz1hZSl9Zj1oO2UudXBkYXRlUXVldWU9ZjtlPW51bGwhPT1mPyEwOiExO2UmJkNpKGIpfWVsc2V7Yz1iO2w9ZjtrPWU7aD05PT09ZC5ub2RlVHlwZT9kOmQub3duZXJEb2N1bWVudDtnPT09T2IuaHRtbCYmKGc9UGIobCkpO2c9PT1PYi5odG1sP1wic2NyaXB0XCI9PT1sPyhrPWguY3JlYXRlRWxlbWVudChcImRpdlwiKSxrLmlubmVySFRNTD1cIjxzY3JpcHQ+XFx4M2Mvc2NyaXB0PlwiLGg9ay5yZW1vdmVDaGlsZChrLmZpcnN0Q2hpbGQpKTpcInN0cmluZ1wiPT09dHlwZW9mIGsuaXM/aD1oLmNyZWF0ZUVsZW1lbnQobCx7aXM6ay5pc30pOihoPWguY3JlYXRlRWxlbWVudChsKSxcInNlbGVjdFwiPT09bCYmKGw9aCxrLm11bHRpcGxlP2wubXVsdGlwbGU9ITA6ay5zaXplJiYobC5zaXplPWsuc2l6ZSkpKTpoPWguY3JlYXRlRWxlbWVudE5TKGcsbCk7az1oO2tbdWVdPWM7a1t2ZV09ZTtIaShrLGIsITEsITEpO2Iuc3RhdGVOb2RlPWs7bD1mO2M9ZTt2YXIgbT1kLEM9WmQobCxjKTtzd2l0Y2gobCl7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpGKFwibG9hZFwiLFxuayk7ZD1jO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihkPTA7ZDxjYy5sZW5ndGg7ZCsrKUYoY2NbZF0sayk7ZD1jO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpGKFwiZXJyb3JcIixrKTtkPWM7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RihcImVycm9yXCIsayk7RihcImxvYWRcIixrKTtkPWM7YnJlYWs7Y2FzZSBcImZvcm1cIjpGKFwicmVzZXRcIixrKTtGKFwic3VibWl0XCIsayk7ZD1jO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RihcInRvZ2dsZVwiLGspO2Q9YzticmVhaztjYXNlIFwiaW5wdXRcIjpCYihrLGMpO2Q9QWIoayxjKTtGKFwiaW52YWxpZFwiLGspOyRkKG0sXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwib3B0aW9uXCI6ZD1JYihrLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjprLl93cmFwcGVyU3RhdGU9e3dhc011bHRpcGxlOiEhYy5tdWx0aXBsZX07ZD1uKHt9LGMse3ZhbHVlOnZvaWQgMH0pO0YoXCJpbnZhbGlkXCIsayk7JGQobSxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOkxiKGssXG5jKTtkPUtiKGssYyk7RihcImludmFsaWRcIixrKTskZChtLFwib25DaGFuZ2VcIik7YnJlYWs7ZGVmYXVsdDpkPWN9WWQobCxkKTtoPXZvaWQgMDtnPWw7dmFyIHk9ayxIPWQ7Zm9yKGggaW4gSClpZihILmhhc093blByb3BlcnR5KGgpKXt2YXIgej1IW2hdO1wic3R5bGVcIj09PWg/V2QoeSx6KTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1oPyh6PXo/ei5fX2h0bWw6dm9pZCAwLG51bGwhPXomJlNiKHkseikpOlwiY2hpbGRyZW5cIj09PWg/XCJzdHJpbmdcIj09PXR5cGVvZiB6PyhcInRleHRhcmVhXCIhPT1nfHxcIlwiIT09eikmJlRiKHkseik6XCJudW1iZXJcIj09PXR5cGVvZiB6JiZUYih5LFwiXCIreik6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWgmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1oJiZcImF1dG9Gb2N1c1wiIT09aCYmKGlhLmhhc093blByb3BlcnR5KGgpP251bGwhPXomJiRkKG0saCk6bnVsbCE9eiYmdmIoeSxoLHosQykpfXN3aXRjaChsKXtjYXNlIFwiaW5wdXRcIjp5YihrKTtcbkdiKGssYywhMSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6eWIoayk7TmIoayxjKTticmVhaztjYXNlIFwib3B0aW9uXCI6bnVsbCE9Yy52YWx1ZSYmay5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLFwiXCIrdWIoYy52YWx1ZSkpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpkPWs7ZC5tdWx0aXBsZT0hIWMubXVsdGlwbGU7az1jLnZhbHVlO251bGwhPWs/SmIoZCwhIWMubXVsdGlwbGUsaywhMSk6bnVsbCE9Yy5kZWZhdWx0VmFsdWUmJkpiKGQsISFjLm11bHRpcGxlLGMuZGVmYXVsdFZhbHVlLCEwKTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLm9uQ2xpY2smJihrLm9uY2xpY2s9YWUpfShlPW5lKGYsZSkpJiZDaShiKX1udWxsIT09Yi5yZWYmJihiLmVmZmVjdFRhZ3w9MTI4KX1lbHNlIGlmKG51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcih1KDE2NikpO2JyZWFrO2Nhc2UgNjppZihjJiZudWxsIT1iLnN0YXRlTm9kZSlLaShjLGIsYy5tZW1vaXplZFByb3BzLGUpO2Vsc2V7aWYoXCJzdHJpbmdcIiE9PVxudHlwZW9mIGUmJm51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcih1KDE2NikpO2Q9bGgoa2guY3VycmVudCk7bGgoaWguY3VycmVudCk7a2koYik/KGU9YixmPWUuc3RhdGVOb2RlLGQ9ZS5tZW1vaXplZFByb3BzLGZbdWVdPWUsKGU9Zi5ub2RlVmFsdWUhPT1kKSYmQ2koYikpOihmPWIsZT0oOT09PWQubm9kZVR5cGU/ZDpkLm93bmVyRG9jdW1lbnQpLmNyZWF0ZVRleHROb2RlKGUpLGVbdWVdPWYsYi5zdGF0ZU5vZGU9ZSl9YnJlYWs7Y2FzZSAxMTpicmVhaztjYXNlIDEzOkcoTSxiKTtlPWIubWVtb2l6ZWRTdGF0ZTtpZigwIT09KGIuZWZmZWN0VGFnJjY0KSl7Yi5leHBpcmF0aW9uVGltZT1kO2JyZWFrIGF9ZT1udWxsIT09ZTtmPSExO251bGw9PT1jP3ZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5mYWxsYmFjayYma2koYik6KGQ9Yy5tZW1vaXplZFN0YXRlLGY9bnVsbCE9PWQsZXx8bnVsbD09PWR8fChkPWMuY2hpbGQuc2libGluZyxudWxsIT09ZCYmKGs9Yi5maXJzdEVmZmVjdCxcbm51bGwhPT1rPyhiLmZpcnN0RWZmZWN0PWQsZC5uZXh0RWZmZWN0PWspOihiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1kLGQubmV4dEVmZmVjdD1udWxsKSxkLmVmZmVjdFRhZz04KSkpO2lmKGUmJiFmJiYwIT09KGIubW9kZSYyKSlpZihudWxsPT09YyYmITAhPT1iLm1lbW9pemVkUHJvcHMudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2t8fDAhPT0oTS5jdXJyZW50JjEpKVg9PT1xaiYmKFg9dGopO2Vsc2V7aWYoWD09PXFqfHxYPT09dGopWD11ajswIT09QWomJm51bGwhPT1VJiYoTWooVSxXKSxOaihVLEFqKSl9aWYoZXx8ZiliLmVmZmVjdFRhZ3w9NDticmVhaztjYXNlIDc6YnJlYWs7Y2FzZSA4OmJyZWFrO2Nhc2UgMTI6YnJlYWs7Y2FzZSA0Om5oKGIpO0lpKGIpO2JyZWFrO2Nhc2UgMTA6dGcoYik7YnJlYWs7Y2FzZSA5OmJyZWFrO2Nhc2UgMTQ6YnJlYWs7Y2FzZSAxNzpMKGIudHlwZSkmJkZmKGIpO2JyZWFrO2Nhc2UgMTk6RyhNLGIpO2U9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGw9PT1cbmUpYnJlYWs7Zj0wIT09KGIuZWZmZWN0VGFnJjY0KTtrPWUucmVuZGVyaW5nO2lmKG51bGw9PT1rKWlmKGYpTGkoZSwhMSk7ZWxzZXtpZihYIT09cWp8fG51bGwhPT1jJiYwIT09KGMuZWZmZWN0VGFnJjY0KSlmb3IoYz1iLmNoaWxkO251bGwhPT1jOyl7az1xaChjKTtpZihudWxsIT09ayl7Yi5lZmZlY3RUYWd8PTY0O0xpKGUsITEpO2Y9ay51cGRhdGVRdWV1ZTtudWxsIT09ZiYmKGIudXBkYXRlUXVldWU9ZixiLmVmZmVjdFRhZ3w9NCk7bnVsbD09PWUubGFzdEVmZmVjdCYmKGIuZmlyc3RFZmZlY3Q9bnVsbCk7Yi5sYXN0RWZmZWN0PWUubGFzdEVmZmVjdDtlPWQ7Zm9yKGY9Yi5jaGlsZDtudWxsIT09ZjspZD1mLGM9ZSxkLmVmZmVjdFRhZyY9MixkLm5leHRFZmZlY3Q9bnVsbCxkLmZpcnN0RWZmZWN0PW51bGwsZC5sYXN0RWZmZWN0PW51bGwsaz1kLmFsdGVybmF0ZSxudWxsPT09az8oZC5jaGlsZEV4cGlyYXRpb25UaW1lPTAsZC5leHBpcmF0aW9uVGltZT1jLGQuY2hpbGQ9bnVsbCxcbmQubWVtb2l6ZWRQcm9wcz1udWxsLGQubWVtb2l6ZWRTdGF0ZT1udWxsLGQudXBkYXRlUXVldWU9bnVsbCxkLmRlcGVuZGVuY2llcz1udWxsKTooZC5jaGlsZEV4cGlyYXRpb25UaW1lPWsuY2hpbGRFeHBpcmF0aW9uVGltZSxkLmV4cGlyYXRpb25UaW1lPWsuZXhwaXJhdGlvblRpbWUsZC5jaGlsZD1rLmNoaWxkLGQubWVtb2l6ZWRQcm9wcz1rLm1lbW9pemVkUHJvcHMsZC5tZW1vaXplZFN0YXRlPWsubWVtb2l6ZWRTdGF0ZSxkLnVwZGF0ZVF1ZXVlPWsudXBkYXRlUXVldWUsYz1rLmRlcGVuZGVuY2llcyxkLmRlcGVuZGVuY2llcz1udWxsPT09Yz9udWxsOntleHBpcmF0aW9uVGltZTpjLmV4cGlyYXRpb25UaW1lLGZpcnN0Q29udGV4dDpjLmZpcnN0Q29udGV4dCxyZXNwb25kZXJzOmMucmVzcG9uZGVyc30pLGY9Zi5zaWJsaW5nO0koTSxNLmN1cnJlbnQmMXwyLGIpO2I9Yi5jaGlsZDticmVhayBhfWM9Yy5zaWJsaW5nfX1lbHNle2lmKCFmKWlmKGM9cWgoayksbnVsbCE9PWMpe2lmKGIuZWZmZWN0VGFnfD1cbjY0LGY9ITAsZD1jLnVwZGF0ZVF1ZXVlLG51bGwhPT1kJiYoYi51cGRhdGVRdWV1ZT1kLGIuZWZmZWN0VGFnfD00KSxMaShlLCEwKSxudWxsPT09ZS50YWlsJiZcImhpZGRlblwiPT09ZS50YWlsTW9kZSYmIWsuYWx0ZXJuYXRlKXtiPWIubGFzdEVmZmVjdD1lLmxhc3RFZmZlY3Q7bnVsbCE9PWImJihiLm5leHRFZmZlY3Q9bnVsbCk7YnJlYWt9fWVsc2UgY2coKT5lLnRhaWxFeHBpcmF0aW9uJiYxPGQmJihiLmVmZmVjdFRhZ3w9NjQsZj0hMCxMaShlLCExKSxiLmV4cGlyYXRpb25UaW1lPWIuY2hpbGRFeHBpcmF0aW9uVGltZT1kLTEpO2UuaXNCYWNrd2FyZHM/KGsuc2libGluZz1iLmNoaWxkLGIuY2hpbGQ9ayk6KGQ9ZS5sYXN0LG51bGwhPT1kP2Quc2libGluZz1rOmIuY2hpbGQ9ayxlLmxhc3Q9ayl9aWYobnVsbCE9PWUudGFpbCl7MD09PWUudGFpbEV4cGlyYXRpb24mJihlLnRhaWxFeHBpcmF0aW9uPWNnKCkrNTAwKTtkPWUudGFpbDtlLnJlbmRlcmluZz1kO2UudGFpbD1kLnNpYmxpbmc7XG5lLmxhc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0O2Quc2libGluZz1udWxsO2U9TS5jdXJyZW50O2U9Zj9lJjF8MjplJjE7SShNLGUsYik7Yj1kO2JyZWFrIGF9YnJlYWs7Y2FzZSAyMDpicmVhaztjYXNlIDIxOmJyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IodSgxNTYsYi50YWcpKTt9Yj1udWxsfWU9VjtpZigxPT09V3x8MSE9PWUuY2hpbGRFeHBpcmF0aW9uVGltZSl7Zj0wO2ZvcihkPWUuY2hpbGQ7bnVsbCE9PWQ7KWM9ZC5leHBpcmF0aW9uVGltZSxrPWQuY2hpbGRFeHBpcmF0aW9uVGltZSxjPmYmJihmPWMpLGs+ZiYmKGY9ayksZD1kLnNpYmxpbmc7ZS5jaGlsZEV4cGlyYXRpb25UaW1lPWZ9aWYobnVsbCE9PWIpcmV0dXJuIGI7bnVsbCE9PWEmJjA9PT0oYS5lZmZlY3RUYWcmMjA0OCkmJihudWxsPT09YS5maXJzdEVmZmVjdCYmKGEuZmlyc3RFZmZlY3Q9Vi5maXJzdEVmZmVjdCksbnVsbCE9PVYubGFzdEVmZmVjdCYmKG51bGwhPT1hLmxhc3RFZmZlY3QmJihhLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1cblYuZmlyc3RFZmZlY3QpLGEubGFzdEVmZmVjdD1WLmxhc3RFZmZlY3QpLDE8Vi5lZmZlY3RUYWcmJihudWxsIT09YS5sYXN0RWZmZWN0P2EubGFzdEVmZmVjdC5uZXh0RWZmZWN0PVY6YS5maXJzdEVmZmVjdD1WLGEubGFzdEVmZmVjdD1WKSl9ZWxzZXtiPU1pKFYsVyk7aWYobnVsbCE9PWIpcmV0dXJuIGIuZWZmZWN0VGFnJj0yMDQ3LGI7bnVsbCE9PWEmJihhLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1udWxsLGEuZWZmZWN0VGFnfD0yMDQ4KX1iPVYuc2libGluZztpZihudWxsIT09YilyZXR1cm4gYjtWPWF9d2hpbGUobnVsbCE9PVYpO1g9PT1xaiYmKFg9dmopO3JldHVybiBudWxsfWZ1bmN0aW9uIFhqKGEpe3ZhciBiPWEuZXhwaXJhdGlvblRpbWU7YT1hLmNoaWxkRXhwaXJhdGlvblRpbWU7cmV0dXJuIGI+YT9iOmF9ZnVuY3Rpb24gWWooYSl7dmFyIGI9ZGcoKTtmZyg5OSxpay5iaW5kKG51bGwsYSxiKSk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBpayhhLGIpe2RvIFNqKCk7d2hpbGUobnVsbCE9PUVqKTtpZigoVCYob2p8cGopKSE9PVMpdGhyb3cgRXJyb3IodSgzMjcpKTt2YXIgYz1hLmZpbmlzaGVkV29yayxkPWEuZmluaXNoZWRFeHBpcmF0aW9uVGltZTtpZihudWxsPT09YylyZXR1cm4gbnVsbDthLmZpbmlzaGVkV29yaz1udWxsO2EuZmluaXNoZWRFeHBpcmF0aW9uVGltZT0wO2lmKGM9PT1hLmN1cnJlbnQpdGhyb3cgRXJyb3IodSgxNzcpKTthLmNhbGxiYWNrTm9kZT1udWxsO2EuY2FsbGJhY2tFeHBpcmF0aW9uVGltZT0wO2EuY2FsbGJhY2tQcmlvcml0eT05MDthLm5leHRLbm93blBlbmRpbmdMZXZlbD0wO3ZhciBlPVhqKGMpO2EuZmlyc3RQZW5kaW5nVGltZT1lO2Q8PWEubGFzdFN1c3BlbmRlZFRpbWU/YS5maXJzdFN1c3BlbmRlZFRpbWU9YS5sYXN0U3VzcGVuZGVkVGltZT1hLm5leHRLbm93blBlbmRpbmdMZXZlbD0wOmQ8PWEuZmlyc3RTdXNwZW5kZWRUaW1lJiYoYS5maXJzdFN1c3BlbmRlZFRpbWU9XG5kLTEpO2Q8PWEubGFzdFBpbmdlZFRpbWUmJihhLmxhc3RQaW5nZWRUaW1lPTApO2Q8PWEubGFzdEV4cGlyZWRUaW1lJiYoYS5sYXN0RXhwaXJlZFRpbWU9MCk7YT09PVUmJihWPVU9bnVsbCxXPTApOzE8Yy5lZmZlY3RUYWc/bnVsbCE9PWMubGFzdEVmZmVjdD8oYy5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YyxlPWMuZmlyc3RFZmZlY3QpOmU9YzplPWMuZmlyc3RFZmZlY3Q7aWYobnVsbCE9PWUpe3ZhciBmPVQ7VHw9cGo7bWouY3VycmVudD1udWxsO2xlPUxkO3ZhciBnPWZlKCk7aWYoZ2UoZykpe2lmKFwic2VsZWN0aW9uU3RhcnRcImluIGcpdmFyIGg9e3N0YXJ0Omcuc2VsZWN0aW9uU3RhcnQsZW5kOmcuc2VsZWN0aW9uRW5kfTtlbHNlIGE6e2g9KGg9Zy5vd25lckRvY3VtZW50KSYmaC5kZWZhdWx0Vmlld3x8d2luZG93O3ZhciBrPWguZ2V0U2VsZWN0aW9uJiZoLmdldFNlbGVjdGlvbigpO2lmKGsmJjAhPT1rLnJhbmdlQ291bnQpe2g9ay5hbmNob3JOb2RlO3ZhciBsPWsuYW5jaG9yT2Zmc2V0LFxubT1rLmZvY3VzTm9kZTtrPWsuZm9jdXNPZmZzZXQ7dHJ5e2gubm9kZVR5cGUsbS5ub2RlVHlwZX1jYXRjaChEYil7aD1udWxsO2JyZWFrIGF9dmFyIEM9MCx5PS0xLEg9LTEsej0wLHRhPTAscj1nLHg9bnVsbDtiOmZvcig7Oyl7Zm9yKHZhciBBOzspe3IhPT1ofHwwIT09bCYmMyE9PXIubm9kZVR5cGV8fCh5PUMrbCk7ciE9PW18fDAhPT1rJiYzIT09ci5ub2RlVHlwZXx8KEg9QytrKTszPT09ci5ub2RlVHlwZSYmKEMrPXIubm9kZVZhbHVlLmxlbmd0aCk7aWYobnVsbD09PShBPXIuZmlyc3RDaGlsZCkpYnJlYWs7eD1yO3I9QX1mb3IoOzspe2lmKHI9PT1nKWJyZWFrIGI7eD09PWgmJisrej09PWwmJih5PUMpO3g9PT1tJiYrK3RhPT09ayYmKEg9Qyk7aWYobnVsbCE9PShBPXIubmV4dFNpYmxpbmcpKWJyZWFrO3I9eDt4PXIucGFyZW50Tm9kZX1yPUF9aD0tMT09PXl8fC0xPT09SD9udWxsOntzdGFydDp5LGVuZDpIfX1lbHNlIGg9bnVsbH1oPWh8fHtzdGFydDowLGVuZDowfX1lbHNlIGg9XG5udWxsO21lPXtmb2N1c2VkRWxlbTpnLHNlbGVjdGlvblJhbmdlOmh9O0xkPSExO1k9ZTtkbyB0cnl7amsoKX1jYXRjaChEYil7aWYobnVsbD09PVkpdGhyb3cgRXJyb3IodSgzMzApKTtSaShZLERiKTtZPVkubmV4dEVmZmVjdH13aGlsZShudWxsIT09WSk7WT1lO2RvIHRyeXtmb3IoZz1hLGg9YjtudWxsIT09WTspe3ZhciBwPVkuZWZmZWN0VGFnO3AmMTYmJlRiKFkuc3RhdGVOb2RlLFwiXCIpO2lmKHAmMTI4KXt2YXIgdD1ZLmFsdGVybmF0ZTtpZihudWxsIT09dCl7dmFyIHY9dC5yZWY7bnVsbCE9PXYmJihcImZ1bmN0aW9uXCI9PT10eXBlb2Ygdj92KG51bGwpOnYuY3VycmVudD1udWxsKX19c3dpdGNoKHAmMTAzOCl7Y2FzZSAyOiRpKFkpO1kuZWZmZWN0VGFnJj0tMzticmVhaztjYXNlIDY6JGkoWSk7WS5lZmZlY3RUYWcmPS0zO2FqKFkuYWx0ZXJuYXRlLFkpO2JyZWFrO2Nhc2UgMTAyNDpZLmVmZmVjdFRhZyY9LTEwMjU7YnJlYWs7Y2FzZSAxMDI4OlkuZWZmZWN0VGFnJj0tMTAyNTthaihZLmFsdGVybmF0ZSxcblkpO2JyZWFrO2Nhc2UgNDphaihZLmFsdGVybmF0ZSxZKTticmVhaztjYXNlIDg6bD1ZLFhpKGcsbCxoKSxZaShsKX1ZPVkubmV4dEVmZmVjdH19Y2F0Y2goRGIpe2lmKG51bGw9PT1ZKXRocm93IEVycm9yKHUoMzMwKSk7UmkoWSxEYik7WT1ZLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVkpO3Y9bWU7dD1mZSgpO3A9di5mb2N1c2VkRWxlbTtoPXYuc2VsZWN0aW9uUmFuZ2U7aWYodCE9PXAmJnAmJnAub3duZXJEb2N1bWVudCYmZWUocC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxwKSl7bnVsbCE9PWgmJmdlKHApJiYodD1oLnN0YXJ0LHY9aC5lbmQsdm9pZCAwPT09diYmKHY9dCksXCJzZWxlY3Rpb25TdGFydFwiaW4gcD8ocC5zZWxlY3Rpb25TdGFydD10LHAuc2VsZWN0aW9uRW5kPU1hdGgubWluKHYscC52YWx1ZS5sZW5ndGgpKToodj0odD1wLm93bmVyRG9jdW1lbnR8fGRvY3VtZW50KSYmdC5kZWZhdWx0Vmlld3x8d2luZG93LHYuZ2V0U2VsZWN0aW9uJiYodj12LmdldFNlbGVjdGlvbigpLFxubD1wLnRleHRDb250ZW50Lmxlbmd0aCxnPU1hdGgubWluKGguc3RhcnQsbCksaD12b2lkIDA9PT1oLmVuZD9nOk1hdGgubWluKGguZW5kLGwpLCF2LmV4dGVuZCYmZz5oJiYobD1oLGg9ZyxnPWwpLGw9ZGUocCxnKSxtPWRlKHAsaCksbCYmbSYmKDEhPT12LnJhbmdlQ291bnR8fHYuYW5jaG9yTm9kZSE9PWwubm9kZXx8di5hbmNob3JPZmZzZXQhPT1sLm9mZnNldHx8di5mb2N1c05vZGUhPT1tLm5vZGV8fHYuZm9jdXNPZmZzZXQhPT1tLm9mZnNldCkmJih0PXQuY3JlYXRlUmFuZ2UoKSx0LnNldFN0YXJ0KGwubm9kZSxsLm9mZnNldCksdi5yZW1vdmVBbGxSYW5nZXMoKSxnPmg/KHYuYWRkUmFuZ2UodCksdi5leHRlbmQobS5ub2RlLG0ub2Zmc2V0KSk6KHQuc2V0RW5kKG0ubm9kZSxtLm9mZnNldCksdi5hZGRSYW5nZSh0KSkpKSkpO3Q9W107Zm9yKHY9cDt2PXYucGFyZW50Tm9kZTspMT09PXYubm9kZVR5cGUmJnQucHVzaCh7ZWxlbWVudDp2LGxlZnQ6di5zY3JvbGxMZWZ0LHRvcDp2LnNjcm9sbFRvcH0pO1xuXCJmdW5jdGlvblwiPT09dHlwZW9mIHAuZm9jdXMmJnAuZm9jdXMoKTtmb3IocD0wO3A8dC5sZW5ndGg7cCsrKXY9dFtwXSx2LmVsZW1lbnQuc2Nyb2xsTGVmdD12LmxlZnQsdi5lbGVtZW50LnNjcm9sbFRvcD12LnRvcH1tZT1udWxsO0xkPSEhbGU7bGU9bnVsbDthLmN1cnJlbnQ9YztZPWU7ZG8gdHJ5e2ZvcihwPWQ7bnVsbCE9PVk7KXt2YXIgRGg9WS5lZmZlY3RUYWc7aWYoRGgmMzYpe3ZhciBkYz1ZLmFsdGVybmF0ZTt0PVk7dj1wO3N3aXRjaCh0LnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpVaSgxNiwzMix0KTticmVhaztjYXNlIDE6dmFyIGZkPXQuc3RhdGVOb2RlO2lmKHQuZWZmZWN0VGFnJjQpaWYobnVsbD09PWRjKWZkLmNvbXBvbmVudERpZE1vdW50KCk7ZWxzZXt2YXIgaGs9dC5lbGVtZW50VHlwZT09PXQudHlwZT9kYy5tZW1vaXplZFByb3BzOm1nKHQudHlwZSxkYy5tZW1vaXplZFByb3BzKTtmZC5jb21wb25lbnREaWRVcGRhdGUoaGssZGMubWVtb2l6ZWRTdGF0ZSxcbmZkLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlKX12YXIgRWg9dC51cGRhdGVRdWV1ZTtudWxsIT09RWgmJktnKHQsRWgsZmQsdik7YnJlYWs7Y2FzZSAzOnZhciBGaD10LnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1GaCl7Zz1udWxsO2lmKG51bGwhPT10LmNoaWxkKXN3aXRjaCh0LmNoaWxkLnRhZyl7Y2FzZSA1Omc9dC5jaGlsZC5zdGF0ZU5vZGU7YnJlYWs7Y2FzZSAxOmc9dC5jaGlsZC5zdGF0ZU5vZGV9S2codCxGaCxnLHYpfWJyZWFrO2Nhc2UgNTp2YXIgeGs9dC5zdGF0ZU5vZGU7bnVsbD09PWRjJiZ0LmVmZmVjdFRhZyY0JiZuZSh0LnR5cGUsdC5tZW1vaXplZFByb3BzKSYmeGsuZm9jdXMoKTticmVhaztjYXNlIDY6YnJlYWs7Y2FzZSA0OmJyZWFrO2Nhc2UgMTI6YnJlYWs7Y2FzZSAxMzppZihudWxsPT09dC5tZW1vaXplZFN0YXRlKXt2YXIgRGk9dC5hbHRlcm5hdGU7aWYobnVsbCE9PURpKXt2YXIgRWk9RGkubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09RWkpe3ZhciBGaT1cbkVpLmRlaHlkcmF0ZWQ7bnVsbCE9PUZpJiZMYyhGaSl9fX1icmVhaztjYXNlIDE5OmNhc2UgMTc6Y2FzZSAyMDpjYXNlIDIxOmJyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IodSgxNjMpKTt9fWlmKERoJjEyOCl7dD12b2lkIDA7dmFyIHhkPVkucmVmO2lmKG51bGwhPT14ZCl7dmFyIEdpPVkuc3RhdGVOb2RlO3N3aXRjaChZLnRhZyl7Y2FzZSA1OnQ9R2k7YnJlYWs7ZGVmYXVsdDp0PUdpfVwiZnVuY3Rpb25cIj09PXR5cGVvZiB4ZD94ZCh0KTp4ZC5jdXJyZW50PXR9fVk9WS5uZXh0RWZmZWN0fX1jYXRjaChEYil7aWYobnVsbD09PVkpdGhyb3cgRXJyb3IodSgzMzApKTtSaShZLERiKTtZPVkubmV4dEVmZmVjdH13aGlsZShudWxsIT09WSk7WT1udWxsO1lmKCk7VD1mfWVsc2UgYS5jdXJyZW50PWM7aWYoRGopRGo9ITEsRWo9YSxGaj1iO2Vsc2UgZm9yKFk9ZTtudWxsIT09WTspYj1ZLm5leHRFZmZlY3QsWS5uZXh0RWZmZWN0PW51bGwsWT1iO2I9YS5maXJzdFBlbmRpbmdUaW1lOzA9PT1iJiZcbihqaj1udWxsKTsxMDczNzQxODIzPT09Yj9hPT09SWo/SGorKzooSGo9MCxJaj1hKTpIaj0wO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBrayYma2soYy5zdGF0ZU5vZGUsZCk7WihhKTtpZihnail0aHJvdyBnaj0hMSxhPWhqLGhqPW51bGwsYTtpZigoVCZuaikhPT1TKXJldHVybiBudWxsO2pnKCk7cmV0dXJuIG51bGx9ZnVuY3Rpb24gamsoKXtmb3IoO251bGwhPT1ZOyl7dmFyIGE9WS5lZmZlY3RUYWc7MCE9PShhJjI1NikmJlRpKFkuYWx0ZXJuYXRlLFkpOzA9PT0oYSY1MTIpfHxEanx8KERqPSEwLGdnKDk3LGZ1bmN0aW9uKCl7U2ooKTtyZXR1cm4gbnVsbH0pKTtZPVkubmV4dEVmZmVjdH19ZnVuY3Rpb24gU2ooKXtpZig5MCE9PUZqKXt2YXIgYT05NzxGaj85NzpGajtGaj05MDtyZXR1cm4gZmcoYSxsayl9fVxuZnVuY3Rpb24gbGsoKXtpZihudWxsPT09RWopcmV0dXJuITE7dmFyIGE9RWo7RWo9bnVsbDtpZigoVCYob2p8cGopKSE9PVMpdGhyb3cgRXJyb3IodSgzMzEpKTt2YXIgYj1UO1R8PXBqO2ZvcihhPWEuY3VycmVudC5maXJzdEVmZmVjdDtudWxsIT09YTspe3RyeXt2YXIgYz1hO2lmKDAhPT0oYy5lZmZlY3RUYWcmNTEyKSlzd2l0Y2goYy50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6VWkoMTI4LDAsYyksVWkoMCw2NCxjKX19Y2F0Y2goZCl7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IodSgzMzApKTtSaShhLGQpfWM9YS5uZXh0RWZmZWN0O2EubmV4dEVmZmVjdD1udWxsO2E9Y31UPWI7amcoKTtyZXR1cm4hMH1mdW5jdGlvbiBtayhhLGIsYyl7Yj1OaShjLGIpO2I9ZmooYSxiLDEwNzM3NDE4MjMpO0RnKGEsYik7YT1LaihhLDEwNzM3NDE4MjMpO251bGwhPT1hJiZaKGEpfVxuZnVuY3Rpb24gUmkoYSxiKXtpZigzPT09YS50YWcpbWsoYSxhLGIpO2Vsc2UgZm9yKHZhciBjPWEucmV0dXJuO251bGwhPT1jOyl7aWYoMz09PWMudGFnKXttayhjLGEsYik7YnJlYWt9ZWxzZSBpZigxPT09Yy50YWcpe3ZhciBkPWMuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1qanx8IWpqLmhhcyhkKSkpe2E9TmkoYixhKTthPWlqKGMsYSwxMDczNzQxODIzKTtEZyhjLGEpO2M9S2ooYywxMDczNzQxODIzKTtudWxsIT09YyYmWihjKTticmVha319Yz1jLnJldHVybn19XG5mdW5jdGlvbiBkayhhLGIsYyl7dmFyIGQ9YS5waW5nQ2FjaGU7bnVsbCE9PWQmJmQuZGVsZXRlKGIpO1U9PT1hJiZXPT09Yz9YPT09dWp8fFg9PT10aiYmMTA3Mzc0MTgyMz09PXhqJiZjZygpLWJqPENqP1RqKGEsVyk6Qmo9ITA6UGooYSxjKSYmKGI9YS5sYXN0UGluZ2VkVGltZSwwIT09YiYmYjxjfHwoYS5sYXN0UGluZ2VkVGltZT1jLGEuZmluaXNoZWRFeHBpcmF0aW9uVGltZT09PWMmJihhLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9MCxhLmZpbmlzaGVkV29yaz1udWxsKSxaKGEpKSl9ZnVuY3Rpb24gZGooYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtudWxsIT09YyYmYy5kZWxldGUoYik7Yj0wOzA9PT1iJiYoYj1QZygpLGI9UWcoYixhLG51bGwpKTthPUtqKGEsYik7bnVsbCE9PWEmJlooYSl9dmFyIGdrO1xuZ2s9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWIuZXhwaXJhdGlvblRpbWU7aWYobnVsbCE9PWEpe3ZhciBlPWIucGVuZGluZ1Byb3BzO2lmKGEubWVtb2l6ZWRQcm9wcyE9PWV8fEsuY3VycmVudCl3Zz0hMDtlbHNle2lmKGQ8Yyl7d2c9ITE7c3dpdGNoKGIudGFnKXtjYXNlIDM6d2koYik7bGkoKTticmVhaztjYXNlIDU6b2goYik7aWYoYi5tb2RlJjQmJjEhPT1jJiZlLmhpZGRlbilyZXR1cm4gYi5leHBpcmF0aW9uVGltZT1iLmNoaWxkRXhwaXJhdGlvblRpbWU9MSxudWxsO2JyZWFrO2Nhc2UgMTpMKGIudHlwZSkmJkpmKGIpO2JyZWFrO2Nhc2UgNDptaChiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO2JyZWFrO2Nhc2UgMTA6c2coYixiLm1lbW9pemVkUHJvcHMudmFsdWUpO2JyZWFrO2Nhc2UgMTM6aWYobnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSl7ZD1iLmNoaWxkLmNoaWxkRXhwaXJhdGlvblRpbWU7aWYoMCE9PWQmJmQ+PWMpcmV0dXJuIHlpKGEsYixjKTtJKE0sTS5jdXJyZW50JlxuMSxiKTtiPW9pKGEsYixjKTtyZXR1cm4gbnVsbCE9PWI/Yi5zaWJsaW5nOm51bGx9SShNLE0uY3VycmVudCYxLGIpO2JyZWFrO2Nhc2UgMTk6ZD1iLmNoaWxkRXhwaXJhdGlvblRpbWU+PWM7aWYoMCE9PShhLmVmZmVjdFRhZyY2NCkpe2lmKGQpcmV0dXJuIEJpKGEsYixjKTtiLmVmZmVjdFRhZ3w9NjR9ZT1iLm1lbW9pemVkU3RhdGU7bnVsbCE9PWUmJihlLnJlbmRlcmluZz1udWxsLGUudGFpbD1udWxsKTtJKE0sTS5jdXJyZW50LGIpO2lmKCFkKXJldHVybiBudWxsfXJldHVybiBvaShhLGIsYyl9d2c9ITF9fWVsc2Ugd2c9ITE7Yi5leHBpcmF0aW9uVGltZT0wO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmQ9Yi50eXBlO251bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZWZmZWN0VGFnfD0yKTthPWIucGVuZGluZ1Byb3BzO2U9RWYoYixKLmN1cnJlbnQpO3ZnKGIsYyk7ZT1JaChudWxsLGIsZCxhLGUsYyk7Yi5lZmZlY3RUYWd8PTE7aWYoXCJvYmplY3RcIj09PVxudHlwZW9mIGUmJm51bGwhPT1lJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5yZW5kZXImJnZvaWQgMD09PWUuJCR0eXBlb2Ype2IudGFnPTE7TWgoKTtpZihMKGQpKXt2YXIgZj0hMDtKZihiKX1lbHNlIGY9ITE7Yi5tZW1vaXplZFN0YXRlPW51bGwhPT1lLnN0YXRlJiZ2b2lkIDAhPT1lLnN0YXRlP2Uuc3RhdGU6bnVsbDt2YXIgZz1kLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZyYmT2coYixkLGcsYSk7ZS51cGRhdGVyPVNnO2Iuc3RhdGVOb2RlPWU7ZS5fcmVhY3RJbnRlcm5hbEZpYmVyPWI7V2coYixkLGEsYyk7Yj12aShudWxsLGIsZCwhMCxmLGMpfWVsc2UgYi50YWc9MCxSKG51bGwsYixlLGMpLGI9Yi5jaGlsZDtyZXR1cm4gYjtjYXNlIDE2OmU9Yi5lbGVtZW50VHlwZTtudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9Mik7YT1iLnBlbmRpbmdQcm9wcztWYShlKTtpZigxIT09ZS5fc3RhdHVzKXRocm93IGUuX3Jlc3VsdDtcbmU9ZS5fcmVzdWx0O2IudHlwZT1lO2Y9Yi50YWc9bmsoZSk7YT1tZyhlLGEpO3N3aXRjaChmKXtjYXNlIDA6Yj1zaShudWxsLGIsZSxhLGMpO2JyZWFrO2Nhc2UgMTpiPXVpKG51bGwsYixlLGEsYyk7YnJlYWs7Y2FzZSAxMTpiPW5pKG51bGwsYixlLGEsYyk7YnJlYWs7Y2FzZSAxNDpiPXBpKG51bGwsYixlLG1nKGUudHlwZSxhKSxkLGMpO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IodSgzMDYsZSxcIlwiKSk7fXJldHVybiBiO2Nhc2UgMDpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6bWcoZCxlKSxzaShhLGIsZCxlLGMpO2Nhc2UgMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6bWcoZCxlKSx1aShhLGIsZCxlLGMpO2Nhc2UgMzp3aShiKTtkPWIudXBkYXRlUXVldWU7aWYobnVsbD09PWQpdGhyb3cgRXJyb3IodSgyODIpKTtlPWIubWVtb2l6ZWRTdGF0ZTtlPW51bGwhPT1lP2UuZWxlbWVudDpcbm51bGw7SGcoYixkLGIucGVuZGluZ1Byb3BzLG51bGwsYyk7ZD1iLm1lbW9pemVkU3RhdGUuZWxlbWVudDtpZihkPT09ZSlsaSgpLGI9b2koYSxiLGMpO2Vsc2V7aWYoZT1iLnN0YXRlTm9kZS5oeWRyYXRlKWRpPXJlKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8uZmlyc3RDaGlsZCksY2k9YixlPWVpPSEwO2lmKGUpZm9yKGM9Z2goYixudWxsLGQsYyksYi5jaGlsZD1jO2M7KWMuZWZmZWN0VGFnPWMuZWZmZWN0VGFnJi0zfDEwMjQsYz1jLnNpYmxpbmc7ZWxzZSBSKGEsYixkLGMpLGxpKCk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgNTpyZXR1cm4gb2goYiksbnVsbD09PWEmJmlpKGIpLGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZj1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6bnVsbCxnPWUuY2hpbGRyZW4sb2UoZCxlKT9nPW51bGw6bnVsbCE9PWYmJm9lKGQsZikmJihiLmVmZmVjdFRhZ3w9MTYpLHRpKGEsYiksYi5tb2RlJjQmJjEhPT1jJiZlLmhpZGRlbj8oYi5leHBpcmF0aW9uVGltZT1cbmIuY2hpbGRFeHBpcmF0aW9uVGltZT0xLGI9bnVsbCk6KFIoYSxiLGcsYyksYj1iLmNoaWxkKSxiO2Nhc2UgNjpyZXR1cm4gbnVsbD09PWEmJmlpKGIpLG51bGw7Y2FzZSAxMzpyZXR1cm4geWkoYSxiLGMpO2Nhc2UgNDpyZXR1cm4gbWgoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxkPWIucGVuZGluZ1Byb3BzLG51bGw9PT1hP2IuY2hpbGQ9ZmgoYixudWxsLGQsYyk6UihhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOm1nKGQsZSksbmkoYSxiLGQsZSxjKTtjYXNlIDc6cmV0dXJuIFIoYSxiLGIucGVuZGluZ1Byb3BzLGMpLGIuY2hpbGQ7Y2FzZSA4OnJldHVybiBSKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTI6cmV0dXJuIFIoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMDphOntkPWIudHlwZS5fY29udGV4dDtcbmU9Yi5wZW5kaW5nUHJvcHM7Zz1iLm1lbW9pemVkUHJvcHM7Zj1lLnZhbHVlO3NnKGIsZik7aWYobnVsbCE9PWcpe3ZhciBoPWcudmFsdWU7Zj1vZihoLGYpPzA6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLl9jYWxjdWxhdGVDaGFuZ2VkQml0cz9kLl9jYWxjdWxhdGVDaGFuZ2VkQml0cyhoLGYpOjEwNzM3NDE4MjMpfDA7aWYoMD09PWYpe2lmKGcuY2hpbGRyZW49PT1lLmNoaWxkcmVuJiYhSy5jdXJyZW50KXtiPW9pKGEsYixjKTticmVhayBhfX1lbHNlIGZvcihoPWIuY2hpbGQsbnVsbCE9PWgmJihoLnJldHVybj1iKTtudWxsIT09aDspe3ZhciBrPWguZGVwZW5kZW5jaWVzO2lmKG51bGwhPT1rKXtnPWguY2hpbGQ7Zm9yKHZhciBsPWsuZmlyc3RDb250ZXh0O251bGwhPT1sOyl7aWYobC5jb250ZXh0PT09ZCYmMCE9PShsLm9ic2VydmVkQml0cyZmKSl7MT09PWgudGFnJiYobD1CZyhjLG51bGwpLGwudGFnPTIsRGcoaCxsKSk7aC5leHBpcmF0aW9uVGltZTxjJiYoaC5leHBpcmF0aW9uVGltZT1cbmMpO2w9aC5hbHRlcm5hdGU7bnVsbCE9PWwmJmwuZXhwaXJhdGlvblRpbWU8YyYmKGwuZXhwaXJhdGlvblRpbWU9Yyk7dWcoaC5yZXR1cm4sYyk7ay5leHBpcmF0aW9uVGltZTxjJiYoay5leHBpcmF0aW9uVGltZT1jKTticmVha31sPWwubmV4dH19ZWxzZSBnPTEwPT09aC50YWc/aC50eXBlPT09Yi50eXBlP251bGw6aC5jaGlsZDpoLmNoaWxkO2lmKG51bGwhPT1nKWcucmV0dXJuPWg7ZWxzZSBmb3IoZz1oO251bGwhPT1nOyl7aWYoZz09PWIpe2c9bnVsbDticmVha31oPWcuc2libGluZztpZihudWxsIT09aCl7aC5yZXR1cm49Zy5yZXR1cm47Zz1oO2JyZWFrfWc9Zy5yZXR1cm59aD1nfX1SKGEsYixlLmNoaWxkcmVuLGMpO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDk6cmV0dXJuIGU9Yi50eXBlLGY9Yi5wZW5kaW5nUHJvcHMsZD1mLmNoaWxkcmVuLHZnKGIsYyksZT14ZyhlLGYudW5zdGFibGVfb2JzZXJ2ZWRCaXRzKSxkPWQoZSksYi5lZmZlY3RUYWd8PTEsUihhLGIsZCxjKSxiLmNoaWxkO1xuY2FzZSAxNDpyZXR1cm4gZT1iLnR5cGUsZj1tZyhlLGIucGVuZGluZ1Byb3BzKSxmPW1nKGUudHlwZSxmKSxwaShhLGIsZSxmLGQsYyk7Y2FzZSAxNTpyZXR1cm4gcmkoYSxiLGIudHlwZSxiLnBlbmRpbmdQcm9wcyxkLGMpO2Nhc2UgMTc6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOm1nKGQsZSksbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpLGIudGFnPTEsTChkKT8oYT0hMCxKZihiKSk6YT0hMSx2ZyhiLGMpLFVnKGIsZCxlLGMpLFdnKGIsZCxlLGMpLHZpKG51bGwsYixkLCEwLGEsYyk7Y2FzZSAxOTpyZXR1cm4gQmkoYSxiLGMpfXRocm93IEVycm9yKHUoMTU2LGIudGFnKSk7fTt2YXIga2s9bnVsbCxXaT1udWxsO1xuZnVuY3Rpb24gb2soYSl7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18pcmV0dXJuITE7dmFyIGI9X19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO2lmKGIuaXNEaXNhYmxlZHx8IWIuc3VwcG9ydHNGaWJlcilyZXR1cm4hMDt0cnl7dmFyIGM9Yi5pbmplY3QoYSk7a2s9ZnVuY3Rpb24oYSl7dHJ5e2Iub25Db21taXRGaWJlclJvb3QoYyxhLHZvaWQgMCw2ND09PShhLmN1cnJlbnQuZWZmZWN0VGFnJjY0KSl9Y2F0Y2goZSl7fX07V2k9ZnVuY3Rpb24oYSl7dHJ5e2Iub25Db21taXRGaWJlclVubW91bnQoYyxhKX1jYXRjaChlKXt9fX1jYXRjaChkKXt9cmV0dXJuITB9XG5mdW5jdGlvbiBwayhhLGIsYyxkKXt0aGlzLnRhZz1hO3RoaXMua2V5PWM7dGhpcy5zaWJsaW5nPXRoaXMuY2hpbGQ9dGhpcy5yZXR1cm49dGhpcy5zdGF0ZU5vZGU9dGhpcy50eXBlPXRoaXMuZWxlbWVudFR5cGU9bnVsbDt0aGlzLmluZGV4PTA7dGhpcy5yZWY9bnVsbDt0aGlzLnBlbmRpbmdQcm9wcz1iO3RoaXMuZGVwZW5kZW5jaWVzPXRoaXMubWVtb2l6ZWRTdGF0ZT10aGlzLnVwZGF0ZVF1ZXVlPXRoaXMubWVtb2l6ZWRQcm9wcz1udWxsO3RoaXMubW9kZT1kO3RoaXMuZWZmZWN0VGFnPTA7dGhpcy5sYXN0RWZmZWN0PXRoaXMuZmlyc3RFZmZlY3Q9dGhpcy5uZXh0RWZmZWN0PW51bGw7dGhpcy5jaGlsZEV4cGlyYXRpb25UaW1lPXRoaXMuZXhwaXJhdGlvblRpbWU9MDt0aGlzLmFsdGVybmF0ZT1udWxsfWZ1bmN0aW9uIGdpKGEsYixjLGQpe3JldHVybiBuZXcgcGsoYSxiLGMsZCl9XG5mdW5jdGlvbiBxaShhKXthPWEucHJvdG90eXBlO3JldHVybiEoIWF8fCFhLmlzUmVhY3RDb21wb25lbnQpfWZ1bmN0aW9uIG5rKGEpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBxaShhKT8xOjA7aWYodm9pZCAwIT09YSYmbnVsbCE9PWEpe2E9YS4kJHR5cGVvZjtpZihhPT09T2EpcmV0dXJuIDExO2lmKGE9PT1SYSlyZXR1cm4gMTR9cmV0dXJuIDJ9XG5mdW5jdGlvbiBhaChhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGw9PT1jPyhjPWdpKGEudGFnLGIsYS5rZXksYS5tb2RlKSxjLmVsZW1lbnRUeXBlPWEuZWxlbWVudFR5cGUsYy50eXBlPWEudHlwZSxjLnN0YXRlTm9kZT1hLnN0YXRlTm9kZSxjLmFsdGVybmF0ZT1hLGEuYWx0ZXJuYXRlPWMpOihjLnBlbmRpbmdQcm9wcz1iLGMuZWZmZWN0VGFnPTAsYy5uZXh0RWZmZWN0PW51bGwsYy5maXJzdEVmZmVjdD1udWxsLGMubGFzdEVmZmVjdD1udWxsKTtjLmNoaWxkRXhwaXJhdGlvblRpbWU9YS5jaGlsZEV4cGlyYXRpb25UaW1lO2MuZXhwaXJhdGlvblRpbWU9YS5leHBpcmF0aW9uVGltZTtjLmNoaWxkPWEuY2hpbGQ7Yy5tZW1vaXplZFByb3BzPWEubWVtb2l6ZWRQcm9wcztjLm1lbW9pemVkU3RhdGU9YS5tZW1vaXplZFN0YXRlO2MudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZTtiPWEuZGVwZW5kZW5jaWVzO2MuZGVwZW5kZW5jaWVzPW51bGw9PT1iP251bGw6e2V4cGlyYXRpb25UaW1lOmIuZXhwaXJhdGlvblRpbWUsXG5maXJzdENvbnRleHQ6Yi5maXJzdENvbnRleHQscmVzcG9uZGVyczpiLnJlc3BvbmRlcnN9O2Muc2libGluZz1hLnNpYmxpbmc7Yy5pbmRleD1hLmluZGV4O2MucmVmPWEucmVmO3JldHVybiBjfVxuZnVuY3Rpb24gY2goYSxiLGMsZCxlLGYpe3ZhciBnPTI7ZD1hO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXFpKGEpJiYoZz0xKTtlbHNlIGlmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlnPTU7ZWxzZSBhOnN3aXRjaChhKXtjYXNlIElhOnJldHVybiBlaChjLmNoaWxkcmVuLGUsZixiKTtjYXNlIE5hOmc9ODtlfD03O2JyZWFrO2Nhc2UgSmE6Zz04O2V8PTE7YnJlYWs7Y2FzZSBLYTpyZXR1cm4gYT1naSgxMixjLGIsZXw4KSxhLmVsZW1lbnRUeXBlPUthLGEudHlwZT1LYSxhLmV4cGlyYXRpb25UaW1lPWYsYTtjYXNlIFBhOnJldHVybiBhPWdpKDEzLGMsYixlKSxhLnR5cGU9UGEsYS5lbGVtZW50VHlwZT1QYSxhLmV4cGlyYXRpb25UaW1lPWYsYTtjYXNlIFFhOnJldHVybiBhPWdpKDE5LGMsYixlKSxhLmVsZW1lbnRUeXBlPVFhLGEuZXhwaXJhdGlvblRpbWU9ZixhO2RlZmF1bHQ6aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBMYTpnPVxuMTA7YnJlYWsgYTtjYXNlIE1hOmc9OTticmVhayBhO2Nhc2UgT2E6Zz0xMTticmVhayBhO2Nhc2UgUmE6Zz0xNDticmVhayBhO2Nhc2UgU2E6Zz0xNjtkPW51bGw7YnJlYWsgYX10aHJvdyBFcnJvcih1KDEzMCxudWxsPT1hP2E6dHlwZW9mIGEsXCJcIikpO31iPWdpKGcsYyxiLGUpO2IuZWxlbWVudFR5cGU9YTtiLnR5cGU9ZDtiLmV4cGlyYXRpb25UaW1lPWY7cmV0dXJuIGJ9ZnVuY3Rpb24gZWgoYSxiLGMsZCl7YT1naSg3LGEsZCxiKTthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9ZnVuY3Rpb24gYmgoYSxiLGMpe2E9Z2koNixhLG51bGwsYik7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfVxuZnVuY3Rpb24gZGgoYSxiLGMpe2I9Z2koNCxudWxsIT09YS5jaGlsZHJlbj9hLmNoaWxkcmVuOltdLGEua2V5LGIpO2IuZXhwaXJhdGlvblRpbWU9YztiLnN0YXRlTm9kZT17Y29udGFpbmVySW5mbzphLmNvbnRhaW5lckluZm8scGVuZGluZ0NoaWxkcmVuOm51bGwsaW1wbGVtZW50YXRpb246YS5pbXBsZW1lbnRhdGlvbn07cmV0dXJuIGJ9XG5mdW5jdGlvbiBxayhhLGIsYyl7dGhpcy50YWc9Yjt0aGlzLmN1cnJlbnQ9bnVsbDt0aGlzLmNvbnRhaW5lckluZm89YTt0aGlzLnBpbmdDYWNoZT10aGlzLnBlbmRpbmdDaGlsZHJlbj1udWxsO3RoaXMuZmluaXNoZWRFeHBpcmF0aW9uVGltZT0wO3RoaXMuZmluaXNoZWRXb3JrPW51bGw7dGhpcy50aW1lb3V0SGFuZGxlPS0xO3RoaXMucGVuZGluZ0NvbnRleHQ9dGhpcy5jb250ZXh0PW51bGw7dGhpcy5oeWRyYXRlPWM7dGhpcy5jYWxsYmFja05vZGU9bnVsbDt0aGlzLmNhbGxiYWNrUHJpb3JpdHk9OTA7dGhpcy5sYXN0RXhwaXJlZFRpbWU9dGhpcy5sYXN0UGluZ2VkVGltZT10aGlzLm5leHRLbm93blBlbmRpbmdMZXZlbD10aGlzLmxhc3RTdXNwZW5kZWRUaW1lPXRoaXMuZmlyc3RTdXNwZW5kZWRUaW1lPXRoaXMuZmlyc3RQZW5kaW5nVGltZT0wfVxuZnVuY3Rpb24gUGooYSxiKXt2YXIgYz1hLmZpcnN0U3VzcGVuZGVkVGltZTthPWEubGFzdFN1c3BlbmRlZFRpbWU7cmV0dXJuIDAhPT1jJiZjPj1iJiZhPD1ifWZ1bmN0aW9uIE1qKGEsYil7dmFyIGM9YS5maXJzdFN1c3BlbmRlZFRpbWUsZD1hLmxhc3RTdXNwZW5kZWRUaW1lO2M8YiYmKGEuZmlyc3RTdXNwZW5kZWRUaW1lPWIpO2lmKGQ+Ynx8MD09PWMpYS5sYXN0U3VzcGVuZGVkVGltZT1iO2I8PWEubGFzdFBpbmdlZFRpbWUmJihhLmxhc3RQaW5nZWRUaW1lPTApO2I8PWEubGFzdEV4cGlyZWRUaW1lJiYoYS5sYXN0RXhwaXJlZFRpbWU9MCl9XG5mdW5jdGlvbiBOaihhLGIpe2I+YS5maXJzdFBlbmRpbmdUaW1lJiYoYS5maXJzdFBlbmRpbmdUaW1lPWIpO3ZhciBjPWEuZmlyc3RTdXNwZW5kZWRUaW1lOzAhPT1jJiYoYj49Yz9hLmZpcnN0U3VzcGVuZGVkVGltZT1hLmxhc3RTdXNwZW5kZWRUaW1lPWEubmV4dEtub3duUGVuZGluZ0xldmVsPTA6Yj49YS5sYXN0U3VzcGVuZGVkVGltZSYmKGEubGFzdFN1c3BlbmRlZFRpbWU9YisxKSxiPmEubmV4dEtub3duUGVuZGluZ0xldmVsJiYoYS5uZXh0S25vd25QZW5kaW5nTGV2ZWw9YikpfWZ1bmN0aW9uIFJqKGEsYil7dmFyIGM9YS5sYXN0RXhwaXJlZFRpbWU7aWYoMD09PWN8fGM+YilhLmxhc3RFeHBpcmVkVGltZT1ifVxuZnVuY3Rpb24gcmsoYSxiLGMsZCl7dmFyIGU9Yi5jdXJyZW50LGY9UGcoKSxnPU1nLnN1c3BlbnNlO2Y9UWcoZixlLGcpO2E6aWYoYyl7Yz1jLl9yZWFjdEludGVybmFsRmliZXI7Yjp7aWYoZWMoYykhPT1jfHwxIT09Yy50YWcpdGhyb3cgRXJyb3IodSgxNzApKTt2YXIgaD1jO2Rve3N3aXRjaChoLnRhZyl7Y2FzZSAzOmg9aC5zdGF0ZU5vZGUuY29udGV4dDticmVhayBiO2Nhc2UgMTppZihMKGgudHlwZSkpe2g9aC5zdGF0ZU5vZGUuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ7YnJlYWsgYn19aD1oLnJldHVybn13aGlsZShudWxsIT09aCk7dGhyb3cgRXJyb3IodSgxNzEpKTt9aWYoMT09PWMudGFnKXt2YXIgaz1jLnR5cGU7aWYoTChrKSl7Yz1JZihjLGssaCk7YnJlYWsgYX19Yz1ofWVsc2UgYz1DZjtudWxsPT09Yi5jb250ZXh0P2IuY29udGV4dD1jOmIucGVuZGluZ0NvbnRleHQ9YztiPUJnKGYsZyk7Yi5wYXlsb2FkPXtlbGVtZW50OmF9O2Q9dm9pZCAwPT09XG5kP251bGw6ZDtudWxsIT09ZCYmKGIuY2FsbGJhY2s9ZCk7RGcoZSxiKTtSZyhlLGYpO3JldHVybiBmfWZ1bmN0aW9uIHNrKGEpe2E9YS5jdXJyZW50O2lmKCFhLmNoaWxkKXJldHVybiBudWxsO3N3aXRjaChhLmNoaWxkLnRhZyl7Y2FzZSA1OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZTtkZWZhdWx0OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZX19ZnVuY3Rpb24gdGsoYSxiKXthPWEubWVtb2l6ZWRTdGF0ZTtudWxsIT09YSYmbnVsbCE9PWEuZGVoeWRyYXRlZCYmYS5yZXRyeVRpbWU8YiYmKGEucmV0cnlUaW1lPWIpfWZ1bmN0aW9uIHVrKGEsYil7dGsoYSxiKTsoYT1hLmFsdGVybmF0ZSkmJnRrKGEsYil9XG5mdW5jdGlvbiB2ayhhLGIsYyl7Yz1udWxsIT1jJiYhMD09PWMuaHlkcmF0ZTt2YXIgZD1uZXcgcWsoYSxiLGMpLGU9Z2koMyxudWxsLG51bGwsMj09PWI/NzoxPT09Yj8zOjApO2QuY3VycmVudD1lO2Uuc3RhdGVOb2RlPWQ7YVt3ZV09ZC5jdXJyZW50O2MmJjAhPT1iJiZ3Yyg5PT09YS5ub2RlVHlwZT9hOmEub3duZXJEb2N1bWVudCk7dGhpcy5faW50ZXJuYWxSb290PWR9dmsucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhLGIpe3JrKGEsdGhpcy5faW50ZXJuYWxSb290LG51bGwsdm9pZCAwPT09Yj9udWxsOmIpfTt2ay5wcm90b3R5cGUudW5tb3VudD1mdW5jdGlvbihhKXt2YXIgYj10aGlzLl9pbnRlcm5hbFJvb3QsYz12b2lkIDA9PT1hP251bGw6YSxkPWIuY29udGFpbmVySW5mbztyayhudWxsLGIsbnVsbCxmdW5jdGlvbigpe2Rbd2VdPW51bGw7bnVsbCE9PWMmJmMoKX0pfTtcbmZ1bmN0aW9uIHdrKGEpe3JldHVybiEoIWF8fDEhPT1hLm5vZGVUeXBlJiY5IT09YS5ub2RlVHlwZSYmMTEhPT1hLm5vZGVUeXBlJiYoOCE9PWEubm9kZVR5cGV8fFwiIHJlYWN0LW1vdW50LXBvaW50LXVuc3RhYmxlIFwiIT09YS5ub2RlVmFsdWUpKX1mdW5jdGlvbiB5ayhhLGIpe2J8fChiPWE/OT09PWEubm9kZVR5cGU/YS5kb2N1bWVudEVsZW1lbnQ6YS5maXJzdENoaWxkOm51bGwsYj0hKCFifHwxIT09Yi5ub2RlVHlwZXx8IWIuaGFzQXR0cmlidXRlKFwiZGF0YS1yZWFjdHJvb3RcIikpKTtpZighYilmb3IodmFyIGM7Yz1hLmxhc3RDaGlsZDspYS5yZW1vdmVDaGlsZChjKTtyZXR1cm4gbmV3IHZrKGEsMCxiP3toeWRyYXRlOiEwfTp2b2lkIDApfVxuZnVuY3Rpb24gemsoYSxiLGMsZCxlKXt2YXIgZj1jLl9yZWFjdFJvb3RDb250YWluZXI7aWYoZil7dmFyIGc9Zi5faW50ZXJuYWxSb290O2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaD1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1zayhnKTtoLmNhbGwoYSl9fXJrKGIsZyxhLGUpfWVsc2V7Zj1jLl9yZWFjdFJvb3RDb250YWluZXI9eWsoYyxkKTtnPWYuX2ludGVybmFsUm9vdDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGs9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9c2soZyk7ay5jYWxsKGEpfX1jayhmdW5jdGlvbigpe3JrKGIsZyxhLGUpfSl9cmV0dXJuIHNrKGcpfWZ1bmN0aW9uIEFrKGEsYixjKXt2YXIgZD0zPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106bnVsbDtyZXR1cm57JCR0eXBlb2Y6SGEsa2V5Om51bGw9PWQ/bnVsbDpcIlwiK2QsY2hpbGRyZW46YSxjb250YWluZXJJbmZvOmIsaW1wbGVtZW50YXRpb246Y319XG5qYz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1sZyhQZygpLDE1MCwxMDApO1JnKGEsYik7dWsoYSxiKX19O2tjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe1BnKCk7dmFyIGI9a2crKztSZyhhLGIpO3VrKGEsYil9fTtsYz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1QZygpO2I9UWcoYixhLG51bGwpO1JnKGEsYik7dWsoYSxiKX19O1xuWmE9ZnVuY3Rpb24oYSxiLGMpe3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpFYihhLGMpO2I9Yy5uYW1lO2lmKFwicmFkaW9cIj09PWMudHlwZSYmbnVsbCE9Yil7Zm9yKGM9YTtjLnBhcmVudE5vZGU7KWM9Yy5wYXJlbnROb2RlO2M9Yy5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbbmFtZT1cIitKU09OLnN0cmluZ2lmeShcIlwiK2IpKyddW3R5cGU9XCJyYWRpb1wiXScpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspe3ZhciBkPWNbYl07aWYoZCE9PWEmJmQuZm9ybT09PWEuZm9ybSl7dmFyIGU9eWUoZCk7aWYoIWUpdGhyb3cgRXJyb3IodSg5MCkpO3piKGQpO0ViKGQsZSl9fX1icmVhaztjYXNlIFwidGV4dGFyZWFcIjpNYihhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWMudmFsdWUsbnVsbCE9YiYmSmIoYSwhIWMubXVsdGlwbGUsYiwhMSl9fTtlYj1iaztcbmZiPWZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPVQ7VHw9NDt0cnl7cmV0dXJuIGZnKDk4LGEuYmluZChudWxsLGIsYyxkKSl9ZmluYWxseXtUPWUsVD09PVMmJmpnKCl9fTtnYj1mdW5jdGlvbigpeyhUJigxfG9qfHBqKSk9PT1TJiYoYWsoKSxTaigpKX07aGI9ZnVuY3Rpb24oYSxiKXt2YXIgYz1UO1R8PTI7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7VD1jLFQ9PT1TJiZqZygpfX07ZnVuY3Rpb24gQmsoYSxiKXt2YXIgYz0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbDtpZighd2soYikpdGhyb3cgRXJyb3IodSgyMDApKTtyZXR1cm4gQWsoYSxiLG51bGwsYyl9XG52YXIgQ2s9e2NyZWF0ZVBvcnRhbDpCayxmaW5kRE9NTm9kZTpmdW5jdGlvbihhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKDE9PT1hLm5vZGVUeXBlKXJldHVybiBhO3ZhciBiPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjtpZih2b2lkIDA9PT1iKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXIpdGhyb3cgRXJyb3IodSgxODgpKTt0aHJvdyBFcnJvcih1KDI2OCxPYmplY3Qua2V5cyhhKSkpO31hPWljKGIpO2E9bnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZTtyZXR1cm4gYX0saHlkcmF0ZTpmdW5jdGlvbihhLGIsYyl7aWYoIXdrKGIpKXRocm93IEVycm9yKHUoMjAwKSk7cmV0dXJuIHprKG51bGwsYSxiLCEwLGMpfSxyZW5kZXI6ZnVuY3Rpb24oYSxiLGMpe2lmKCF3ayhiKSl0aHJvdyBFcnJvcih1KDIwMCkpO3JldHVybiB6ayhudWxsLGEsYiwhMSxjKX0sdW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI6ZnVuY3Rpb24oYSxiLGMsZCl7aWYoIXdrKGMpKXRocm93IEVycm9yKHUoMjAwKSk7XG5pZihudWxsPT1hfHx2b2lkIDA9PT1hLl9yZWFjdEludGVybmFsRmliZXIpdGhyb3cgRXJyb3IodSgzOCkpO3JldHVybiB6ayhhLGIsYywhMSxkKX0sdW5tb3VudENvbXBvbmVudEF0Tm9kZTpmdW5jdGlvbihhKXtpZighd2soYSkpdGhyb3cgRXJyb3IodSg0MCkpO3JldHVybiBhLl9yZWFjdFJvb3RDb250YWluZXI/KGNrKGZ1bmN0aW9uKCl7emsobnVsbCxudWxsLGEsITEsZnVuY3Rpb24oKXthLl9yZWFjdFJvb3RDb250YWluZXI9bnVsbDthW3dlXT1udWxsfSl9KSwhMCk6ITF9LHVuc3RhYmxlX2NyZWF0ZVBvcnRhbDpmdW5jdGlvbigpe3JldHVybiBCay5hcHBseSh2b2lkIDAsYXJndW1lbnRzKX0sdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXM6YmssZmx1c2hTeW5jOmZ1bmN0aW9uKGEsYil7aWYoKFQmKG9qfHBqKSkhPT1TKXRocm93IEVycm9yKHUoMTg3KSk7dmFyIGM9VDtUfD0xO3RyeXtyZXR1cm4gZmcoOTksYS5iaW5kKG51bGwsYikpfWZpbmFsbHl7VD1jLGpnKCl9fSxfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDp7RXZlbnRzOltDYyxcbnhlLHllLENhLmluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSxmYSxTYyxmdW5jdGlvbihhKXt5YShhLFJjKX0sY2IsZGIsUGQsQmEsU2ose2N1cnJlbnQ6ITF9XX19O1xuKGZ1bmN0aW9uKGEpe3ZhciBiPWEuZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U7cmV0dXJuIG9rKG4oe30sYSx7b3ZlcnJpZGVIb29rU3RhdGU6bnVsbCxvdmVycmlkZVByb3BzOm51bGwsc2V0U3VzcGVuc2VIYW5kbGVyOm51bGwsc2NoZWR1bGVVcGRhdGU6bnVsbCxjdXJyZW50RGlzcGF0Y2hlclJlZjpFYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe2E9aWMoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOmZ1bmN0aW9uKGEpe3JldHVybiBiP2IoYSk6bnVsbH0sZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoOm51bGwsc2NoZWR1bGVSZWZyZXNoOm51bGwsc2NoZWR1bGVSb290Om51bGwsc2V0UmVmcmVzaEhhbmRsZXI6bnVsbCxnZXRDdXJyZW50RmliZXI6bnVsbH0pKX0pKHtmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTpGYyxidW5kbGVUeXBlOjAsdmVyc2lvbjpcIjE2LjEyLjBcIixcbnJlbmRlcmVyUGFja2FnZU5hbWU6XCJyZWFjdC1kb21cIn0pO3ZhciBEaz17ZGVmYXVsdDpDa30sRWs9RGsmJkNrfHxEazttb2R1bGUuZXhwb3J0cz1Fay5kZWZhdWx0fHxFaztcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjAuMTguMFxuICogc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBmLGcsaCxrLGw7XG5pZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJmdW5jdGlvblwiIT09dHlwZW9mIE1lc3NhZ2VDaGFubmVsKXt2YXIgcD1udWxsLHE9bnVsbCx0PWZ1bmN0aW9uKCl7aWYobnVsbCE9PXApdHJ5e3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7cCghMCxhKTtwPW51bGx9Y2F0Y2goYil7dGhyb3cgc2V0VGltZW91dCh0LDApLGI7fX0sdT1EYXRlLm5vdygpO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIERhdGUubm93KCktdX07Zj1mdW5jdGlvbihhKXtudWxsIT09cD9zZXRUaW1lb3V0KGYsMCxhKToocD1hLHNldFRpbWVvdXQodCwwKSl9O2c9ZnVuY3Rpb24oYSxiKXtxPXNldFRpbWVvdXQoYSxiKX07aD1mdW5jdGlvbigpe2NsZWFyVGltZW91dChxKX07az1mdW5jdGlvbigpe3JldHVybiExfTtsPWV4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oKXt9fWVsc2V7dmFyIHc9d2luZG93LnBlcmZvcm1hbmNlLHg9d2luZG93LkRhdGUsXG55PXdpbmRvdy5zZXRUaW1lb3V0LHo9d2luZG93LmNsZWFyVGltZW91dDtpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIGNvbnNvbGUpe3ZhciBBPXdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZTtcImZ1bmN0aW9uXCIhPT10eXBlb2Ygd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgcmVxdWVzdEFuaW1hdGlvbkZyYW1lLiBNYWtlIHN1cmUgdGhhdCB5b3UgbG9hZCBhIHBvbHlmaWxsIGluIG9sZGVyIGJyb3dzZXJzLiBodHRwczovL2ZiLm1lL3JlYWN0LXBvbHlmaWxsc1wiKTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgQSYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgY2FuY2VsQW5pbWF0aW9uRnJhbWUuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgcG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vZmIubWUvcmVhY3QtcG9seWZpbGxzXCIpfWlmKFwib2JqZWN0XCI9PT1cbnR5cGVvZiB3JiZcImZ1bmN0aW9uXCI9PT10eXBlb2Ygdy5ub3cpZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gdy5ub3coKX07ZWxzZXt2YXIgQj14Lm5vdygpO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIHgubm93KCktQn19dmFyIEM9ITEsRD1udWxsLEU9LTEsRj01LEc9MDtrPWZ1bmN0aW9uKCl7cmV0dXJuIGV4cG9ydHMudW5zdGFibGVfbm93KCk+PUd9O2w9ZnVuY3Rpb24oKXt9O2V4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oYSl7MD5hfHwxMjU8YT9jb25zb2xlLmVycm9yKFwiZm9yY2VGcmFtZVJhdGUgdGFrZXMgYSBwb3NpdGl2ZSBpbnQgYmV0d2VlbiAwIGFuZCAxMjUsIGZvcmNpbmcgZnJhbWVyYXRlcyBoaWdoZXIgdGhhbiAxMjUgZnBzIGlzIG5vdCB1bnN1cHBvcnRlZFwiKTpGPTA8YT9NYXRoLmZsb29yKDFFMy9hKTo1fTt2YXIgSD1uZXcgTWVzc2FnZUNoYW5uZWwsST1ILnBvcnQyO0gucG9ydDEub25tZXNzYWdlPVxuZnVuY3Rpb24oKXtpZihudWxsIT09RCl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtHPWErRjt0cnl7RCghMCxhKT9JLnBvc3RNZXNzYWdlKG51bGwpOihDPSExLEQ9bnVsbCl9Y2F0Y2goYil7dGhyb3cgSS5wb3N0TWVzc2FnZShudWxsKSxiO319ZWxzZSBDPSExfTtmPWZ1bmN0aW9uKGEpe0Q9YTtDfHwoQz0hMCxJLnBvc3RNZXNzYWdlKG51bGwpKX07Zz1mdW5jdGlvbihhLGIpe0U9eShmdW5jdGlvbigpe2EoZXhwb3J0cy51bnN0YWJsZV9ub3coKSl9LGIpfTtoPWZ1bmN0aW9uKCl7eihFKTtFPS0xfX1mdW5jdGlvbiBKKGEsYil7dmFyIGM9YS5sZW5ndGg7YS5wdXNoKGIpO2E6Zm9yKDs7KXt2YXIgZD1NYXRoLmZsb29yKChjLTEpLzIpLGU9YVtkXTtpZih2b2lkIDAhPT1lJiYwPEsoZSxiKSlhW2RdPWIsYVtjXT1lLGM9ZDtlbHNlIGJyZWFrIGF9fWZ1bmN0aW9uIEwoYSl7YT1hWzBdO3JldHVybiB2b2lkIDA9PT1hP251bGw6YX1cbmZ1bmN0aW9uIE0oYSl7dmFyIGI9YVswXTtpZih2b2lkIDAhPT1iKXt2YXIgYz1hLnBvcCgpO2lmKGMhPT1iKXthWzBdPWM7YTpmb3IodmFyIGQ9MCxlPWEubGVuZ3RoO2Q8ZTspe3ZhciBtPTIqKGQrMSktMSxuPWFbbV0sdj1tKzEscj1hW3ZdO2lmKHZvaWQgMCE9PW4mJjA+SyhuLGMpKXZvaWQgMCE9PXImJjA+SyhyLG4pPyhhW2RdPXIsYVt2XT1jLGQ9dik6KGFbZF09bixhW21dPWMsZD1tKTtlbHNlIGlmKHZvaWQgMCE9PXImJjA+SyhyLGMpKWFbZF09cixhW3ZdPWMsZD12O2Vsc2UgYnJlYWsgYX19cmV0dXJuIGJ9cmV0dXJuIG51bGx9ZnVuY3Rpb24gSyhhLGIpe3ZhciBjPWEuc29ydEluZGV4LWIuc29ydEluZGV4O3JldHVybiAwIT09Yz9jOmEuaWQtYi5pZH12YXIgTj1bXSxPPVtdLFA9MSxRPW51bGwsUj0zLFM9ITEsVD0hMSxVPSExO1xuZnVuY3Rpb24gVihhKXtmb3IodmFyIGI9TChPKTtudWxsIT09Yjspe2lmKG51bGw9PT1iLmNhbGxiYWNrKU0oTyk7ZWxzZSBpZihiLnN0YXJ0VGltZTw9YSlNKE8pLGIuc29ydEluZGV4PWIuZXhwaXJhdGlvblRpbWUsSihOLGIpO2Vsc2UgYnJlYWs7Yj1MKE8pfX1mdW5jdGlvbiBXKGEpe1U9ITE7VihhKTtpZighVClpZihudWxsIT09TChOKSlUPSEwLGYoWCk7ZWxzZXt2YXIgYj1MKE8pO251bGwhPT1iJiZnKFcsYi5zdGFydFRpbWUtYSl9fVxuZnVuY3Rpb24gWChhLGIpe1Q9ITE7VSYmKFU9ITEsaCgpKTtTPSEwO3ZhciBjPVI7dHJ5e1YoYik7Zm9yKFE9TChOKTtudWxsIT09USYmKCEoUS5leHBpcmF0aW9uVGltZT5iKXx8YSYmIWsoKSk7KXt2YXIgZD1RLmNhbGxiYWNrO2lmKG51bGwhPT1kKXtRLmNhbGxiYWNrPW51bGw7Uj1RLnByaW9yaXR5TGV2ZWw7dmFyIGU9ZChRLmV4cGlyYXRpb25UaW1lPD1iKTtiPWV4cG9ydHMudW5zdGFibGVfbm93KCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGU/US5jYWxsYmFjaz1lOlE9PT1MKE4pJiZNKE4pO1YoYil9ZWxzZSBNKE4pO1E9TChOKX1pZihudWxsIT09USl2YXIgbT0hMDtlbHNle3ZhciBuPUwoTyk7bnVsbCE9PW4mJmcoVyxuLnN0YXJ0VGltZS1iKTttPSExfXJldHVybiBtfWZpbmFsbHl7UT1udWxsLFI9YyxTPSExfX1cbmZ1bmN0aW9uIFkoYSl7c3dpdGNoKGEpe2Nhc2UgMTpyZXR1cm4tMTtjYXNlIDI6cmV0dXJuIDI1MDtjYXNlIDU6cmV0dXJuIDEwNzM3NDE4MjM7Y2FzZSA0OnJldHVybiAxRTQ7ZGVmYXVsdDpyZXR1cm4gNUUzfX12YXIgWj1sO2V4cG9ydHMudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHk9MTtleHBvcnRzLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5PTI7ZXhwb3J0cy51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eT0zO2V4cG9ydHMudW5zdGFibGVfSWRsZVByaW9yaXR5PTU7ZXhwb3J0cy51bnN0YWJsZV9Mb3dQcmlvcml0eT00O2V4cG9ydHMudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5PWZ1bmN0aW9uKGEsYil7c3dpdGNoKGEpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOmNhc2UgNDpjYXNlIDU6YnJlYWs7ZGVmYXVsdDphPTN9dmFyIGM9UjtSPWE7dHJ5e3JldHVybiBiKCl9ZmluYWxseXtSPWN9fTtcbmV4cG9ydHMudW5zdGFibGVfbmV4dD1mdW5jdGlvbihhKXtzd2l0Y2goUil7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6dmFyIGI9MzticmVhaztkZWZhdWx0OmI9Un12YXIgYz1SO1I9Yjt0cnl7cmV0dXJuIGEoKX1maW5hbGx5e1I9Y319O1xuZXhwb3J0cy51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1leHBvcnRzLnVuc3RhYmxlX25vdygpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3ZhciBlPWMuZGVsYXk7ZT1cIm51bWJlclwiPT09dHlwZW9mIGUmJjA8ZT9kK2U6ZDtjPVwibnVtYmVyXCI9PT10eXBlb2YgYy50aW1lb3V0P2MudGltZW91dDpZKGEpfWVsc2UgYz1ZKGEpLGU9ZDtjPWUrYzthPXtpZDpQKyssY2FsbGJhY2s6Yixwcmlvcml0eUxldmVsOmEsc3RhcnRUaW1lOmUsZXhwaXJhdGlvblRpbWU6Yyxzb3J0SW5kZXg6LTF9O2U+ZD8oYS5zb3J0SW5kZXg9ZSxKKE8sYSksbnVsbD09PUwoTikmJmE9PT1MKE8pJiYoVT9oKCk6VT0hMCxnKFcsZS1kKSkpOihhLnNvcnRJbmRleD1jLEooTixhKSxUfHxTfHwoVD0hMCxmKFgpKSk7cmV0dXJuIGF9O2V4cG9ydHMudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7YS5jYWxsYmFjaz1udWxsfTtcbmV4cG9ydHMudW5zdGFibGVfd3JhcENhbGxiYWNrPWZ1bmN0aW9uKGEpe3ZhciBiPVI7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGM9UjtSPWI7dHJ5e3JldHVybiBhLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1maW5hbGx5e1I9Y319fTtleHBvcnRzLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsPWZ1bmN0aW9uKCl7cmV0dXJuIFJ9O2V4cG9ydHMudW5zdGFibGVfc2hvdWxkWWllbGQ9ZnVuY3Rpb24oKXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO1YoYSk7dmFyIGI9TChOKTtyZXR1cm4gYiE9PVEmJm51bGwhPT1RJiZudWxsIT09YiYmbnVsbCE9PWIuY2FsbGJhY2smJmIuc3RhcnRUaW1lPD1hJiZiLmV4cGlyYXRpb25UaW1lPFEuZXhwaXJhdGlvblRpbWV8fGsoKX07ZXhwb3J0cy51bnN0YWJsZV9yZXF1ZXN0UGFpbnQ9WjtleHBvcnRzLnVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7VHx8U3x8KFQ9ITAsZihYKSl9O1xuZXhwb3J0cy51bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbj1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZT1mdW5jdGlvbigpe3JldHVybiBMKE4pfTtleHBvcnRzLnVuc3RhYmxlX1Byb2ZpbGluZz1udWxsO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG5cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fVxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbldpdGhSZXNldCgpIHt9XG5lbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LnJlc2V0V2FybmluZ0NhY2hlID0gZW1wdHlGdW5jdGlvbjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gc2hpbShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgIGlmIChzZWNyZXQgPT09IFJlYWN0UHJvcFR5cGVzU2VjcmV0KSB7XG4gICAgICAvLyBJdCBpcyBzdGlsbCBzYWZlIHdoZW4gY2FsbGVkIGZyb20gUmVhY3QuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoXG4gICAgICAnQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAnVXNlIFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygpIHRvIGNhbGwgdGhlbS4gJyArXG4gICAgICAnUmVhZCBtb3JlIGF0IGh0dHA6Ly9mYi5tZS91c2UtY2hlY2stcHJvcC10eXBlcydcbiAgICApO1xuICAgIGVyci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIHRocm93IGVycjtcbiAgfTtcbiAgc2hpbS5pc1JlcXVpcmVkID0gc2hpbTtcbiAgZnVuY3Rpb24gZ2V0U2hpbSgpIHtcbiAgICByZXR1cm4gc2hpbTtcbiAgfTtcbiAgLy8gSW1wb3J0YW50IVxuICAvLyBLZWVwIHRoaXMgbGlzdCBpbiBzeW5jIHdpdGggcHJvZHVjdGlvbiB2ZXJzaW9uIGluIGAuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzYC5cbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICAgIGFycmF5OiBzaGltLFxuICAgIGJvb2w6IHNoaW0sXG4gICAgZnVuYzogc2hpbSxcbiAgICBudW1iZXI6IHNoaW0sXG4gICAgb2JqZWN0OiBzaGltLFxuICAgIHN0cmluZzogc2hpbSxcbiAgICBzeW1ib2w6IHNoaW0sXG5cbiAgICBhbnk6IHNoaW0sXG4gICAgYXJyYXlPZjogZ2V0U2hpbSxcbiAgICBlbGVtZW50OiBzaGltLFxuICAgIGVsZW1lbnRUeXBlOiBzaGltLFxuICAgIGluc3RhbmNlT2Y6IGdldFNoaW0sXG4gICAgbm9kZTogc2hpbSxcbiAgICBvYmplY3RPZjogZ2V0U2hpbSxcbiAgICBvbmVPZjogZ2V0U2hpbSxcbiAgICBvbmVPZlR5cGU6IGdldFNoaW0sXG4gICAgc2hhcGU6IGdldFNoaW0sXG4gICAgZXhhY3Q6IGdldFNoaW0sXG5cbiAgICBjaGVja1Byb3BUeXBlczogZW1wdHlGdW5jdGlvbldpdGhSZXNldCxcbiAgICByZXNldFdhcm5pbmdDYWNoZTogZW1wdHlGdW5jdGlvblxuICB9O1xuXG4gIFJlYWN0UHJvcFR5cGVzLlByb3BUeXBlcyA9IFJlYWN0UHJvcFR5cGVzO1xuXG4gIHJldHVybiBSZWFjdFByb3BUeXBlcztcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gJ1NFQ1JFVF9ET19OT1RfUEFTU19USElTX09SX1lPVV9XSUxMX0JFX0ZJUkVEJztcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUeXBlc1NlY3JldDtcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuOC42XG4gKiByZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTtcbnZhciBiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsYz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLGQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LGU9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsZj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxnPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LGg9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksaz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLGw9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYXN5bmNfbW9kZVwiKTo2MDExMSxtPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSxuPWI/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHA9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMscT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOlxuNjAxMTUscj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2O2Z1bmN0aW9uIHQoYSl7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSl7dmFyIHU9YS4kJHR5cGVvZjtzd2l0Y2godSl7Y2FzZSBjOnN3aXRjaChhPWEudHlwZSxhKXtjYXNlIGw6Y2FzZSBtOmNhc2UgZTpjYXNlIGc6Y2FzZSBmOmNhc2UgcDpyZXR1cm4gYTtkZWZhdWx0OnN3aXRjaChhPWEmJmEuJCR0eXBlb2YsYSl7Y2FzZSBrOmNhc2UgbjpjYXNlIGg6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm4gdX19Y2FzZSByOmNhc2UgcTpjYXNlIGQ6cmV0dXJuIHV9fX1mdW5jdGlvbiB2KGEpe3JldHVybiB0KGEpPT09bX1leHBvcnRzLnR5cGVPZj10O2V4cG9ydHMuQXN5bmNNb2RlPWw7ZXhwb3J0cy5Db25jdXJyZW50TW9kZT1tO2V4cG9ydHMuQ29udGV4dENvbnN1bWVyPWs7ZXhwb3J0cy5Db250ZXh0UHJvdmlkZXI9aDtleHBvcnRzLkVsZW1lbnQ9YztleHBvcnRzLkZvcndhcmRSZWY9bjtcbmV4cG9ydHMuRnJhZ21lbnQ9ZTtleHBvcnRzLkxhenk9cjtleHBvcnRzLk1lbW89cTtleHBvcnRzLlBvcnRhbD1kO2V4cG9ydHMuUHJvZmlsZXI9ZztleHBvcnRzLlN0cmljdE1vZGU9ZjtleHBvcnRzLlN1c3BlbnNlPXA7ZXhwb3J0cy5pc1ZhbGlkRWxlbWVudFR5cGU9ZnVuY3Rpb24oYSl7cmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBhfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgYXx8YT09PWV8fGE9PT1tfHxhPT09Z3x8YT09PWZ8fGE9PT1wfHxcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiYoYS4kJHR5cGVvZj09PXJ8fGEuJCR0eXBlb2Y9PT1xfHxhLiQkdHlwZW9mPT09aHx8YS4kJHR5cGVvZj09PWt8fGEuJCR0eXBlb2Y9PT1uKX07ZXhwb3J0cy5pc0FzeW5jTW9kZT1mdW5jdGlvbihhKXtyZXR1cm4gdihhKXx8dChhKT09PWx9O2V4cG9ydHMuaXNDb25jdXJyZW50TW9kZT12O2V4cG9ydHMuaXNDb250ZXh0Q29uc3VtZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHQoYSk9PT1rfTtcbmV4cG9ydHMuaXNDb250ZXh0UHJvdmlkZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHQoYSk9PT1ofTtleHBvcnRzLmlzRWxlbWVudD1mdW5jdGlvbihhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09Y307ZXhwb3J0cy5pc0ZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIHQoYSk9PT1ufTtleHBvcnRzLmlzRnJhZ21lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuIHQoYSk9PT1lfTtleHBvcnRzLmlzTGF6eT1mdW5jdGlvbihhKXtyZXR1cm4gdChhKT09PXJ9O2V4cG9ydHMuaXNNZW1vPWZ1bmN0aW9uKGEpe3JldHVybiB0KGEpPT09cX07ZXhwb3J0cy5pc1BvcnRhbD1mdW5jdGlvbihhKXtyZXR1cm4gdChhKT09PWR9O2V4cG9ydHMuaXNQcm9maWxlcj1mdW5jdGlvbihhKXtyZXR1cm4gdChhKT09PWd9O2V4cG9ydHMuaXNTdHJpY3RNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB0KGEpPT09Zn07XG5leHBvcnRzLmlzU3VzcGVuc2U9ZnVuY3Rpb24oYSl7cmV0dXJuIHQoYSk9PT1wfTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob3JpZ2luYWxNb2R1bGUpIHtcblx0aWYgKCFvcmlnaW5hbE1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHR2YXIgbW9kdWxlID0gT2JqZWN0LmNyZWF0ZShvcmlnaW5hbE1vZHVsZSk7XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiZXhwb3J0c1wiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlXG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iLCJ2YXIgYmFzZU1lcmdlID0gcmVxdWlyZSgnLi9fYmFzZU1lcmdlJyksXG4gICAgY3JlYXRlQXNzaWduZXIgPSByZXF1aXJlKCcuL19jcmVhdGVBc3NpZ25lcicpO1xuXG4vKipcbiAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uYXNzaWduYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBtZXJnZXMgb3duIGFuZFxuICogaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2Ygc291cmNlIG9iamVjdHMgaW50byB0aGVcbiAqIGRlc3RpbmF0aW9uIG9iamVjdC4gU291cmNlIHByb3BlcnRpZXMgdGhhdCByZXNvbHZlIHRvIGB1bmRlZmluZWRgIGFyZVxuICogc2tpcHBlZCBpZiBhIGRlc3RpbmF0aW9uIHZhbHVlIGV4aXN0cy4gQXJyYXkgYW5kIHBsYWluIG9iamVjdCBwcm9wZXJ0aWVzXG4gKiBhcmUgbWVyZ2VkIHJlY3Vyc2l2ZWx5LiBPdGhlciBvYmplY3RzIGFuZCB2YWx1ZSB0eXBlcyBhcmUgb3ZlcnJpZGRlbiBieVxuICogYXNzaWdubWVudC4gU291cmNlIG9iamVjdHMgYXJlIGFwcGxpZWQgZnJvbSBsZWZ0IHRvIHJpZ2h0LiBTdWJzZXF1ZW50XG4gKiBzb3VyY2VzIG92ZXJ3cml0ZSBwcm9wZXJ0eSBhc3NpZ25tZW50cyBvZiBwcmV2aW91cyBzb3VyY2VzLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC41LjBcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHtcbiAqICAgJ2EnOiBbeyAnYic6IDIgfSwgeyAnZCc6IDQgfV1cbiAqIH07XG4gKlxuICogdmFyIG90aGVyID0ge1xuICogICAnYSc6IFt7ICdjJzogMyB9LCB7ICdlJzogNSB9XVxuICogfTtcbiAqXG4gKiBfLm1lcmdlKG9iamVjdCwgb3RoZXIpO1xuICogLy8gPT4geyAnYSc6IFt7ICdiJzogMiwgJ2MnOiAzIH0sIHsgJ2QnOiA0LCAnZSc6IDUgfV0gfVxuICovXG52YXIgbWVyZ2UgPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgpIHtcbiAgYmFzZU1lcmdlKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBtZXJnZTtcbiIsInZhciBTdGFjayA9IHJlcXVpcmUoJy4vX1N0YWNrJyksXG4gICAgYXNzaWduTWVyZ2VWYWx1ZSA9IHJlcXVpcmUoJy4vX2Fzc2lnbk1lcmdlVmFsdWUnKSxcbiAgICBiYXNlRm9yID0gcmVxdWlyZSgnLi9fYmFzZUZvcicpLFxuICAgIGJhc2VNZXJnZURlZXAgPSByZXF1aXJlKCcuL19iYXNlTWVyZ2VEZWVwJyksXG4gICAgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0JyksXG4gICAga2V5c0luID0gcmVxdWlyZSgnLi9rZXlzSW4nKSxcbiAgICBzYWZlR2V0ID0gcmVxdWlyZSgnLi9fc2FmZUdldCcpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1lcmdlYCB3aXRob3V0IHN1cHBvcnQgZm9yIG11bHRpcGxlIHNvdXJjZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gKiBAcGFyYW0ge251bWJlcn0gc3JjSW5kZXggVGhlIGluZGV4IG9mIGBzb3VyY2VgLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgbWVyZ2VkIHZhbHVlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgc291cmNlIHZhbHVlcyBhbmQgdGhlaXIgbWVyZ2VkXG4gKiAgY291bnRlcnBhcnRzLlxuICovXG5mdW5jdGlvbiBiYXNlTWVyZ2Uob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4LCBjdXN0b21pemVyLCBzdGFjaykge1xuICBpZiAob2JqZWN0ID09PSBzb3VyY2UpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgYmFzZUZvcihzb3VyY2UsIGZ1bmN0aW9uKHNyY1ZhbHVlLCBrZXkpIHtcbiAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgIGlmIChpc09iamVjdChzcmNWYWx1ZSkpIHtcbiAgICAgIGJhc2VNZXJnZURlZXAob2JqZWN0LCBzb3VyY2UsIGtleSwgc3JjSW5kZXgsIGJhc2VNZXJnZSwgY3VzdG9taXplciwgc3RhY2spO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHZhciBuZXdWYWx1ZSA9IGN1c3RvbWl6ZXJcbiAgICAgICAgPyBjdXN0b21pemVyKHNhZmVHZXQob2JqZWN0LCBrZXkpLCBzcmNWYWx1ZSwgKGtleSArICcnKSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKVxuICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbmV3VmFsdWUgPSBzcmNWYWx1ZTtcbiAgICAgIH1cbiAgICAgIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICB9XG4gIH0sIGtleXNJbik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZU1lcmdlO1xuIiwidmFyIExpc3RDYWNoZSA9IHJlcXVpcmUoJy4vX0xpc3RDYWNoZScpLFxuICAgIHN0YWNrQ2xlYXIgPSByZXF1aXJlKCcuL19zdGFja0NsZWFyJyksXG4gICAgc3RhY2tEZWxldGUgPSByZXF1aXJlKCcuL19zdGFja0RlbGV0ZScpLFxuICAgIHN0YWNrR2V0ID0gcmVxdWlyZSgnLi9fc3RhY2tHZXQnKSxcbiAgICBzdGFja0hhcyA9IHJlcXVpcmUoJy4vX3N0YWNrSGFzJyksXG4gICAgc3RhY2tTZXQgPSByZXF1aXJlKCcuL19zdGFja1NldCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBzdGFjayBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBTdGFjayhlbnRyaWVzKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGUoZW50cmllcyk7XG4gIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYFN0YWNrYC5cblN0YWNrLnByb3RvdHlwZS5jbGVhciA9IHN0YWNrQ2xlYXI7XG5TdGFjay5wcm90b3R5cGVbJ2RlbGV0ZSddID0gc3RhY2tEZWxldGU7XG5TdGFjay5wcm90b3R5cGUuZ2V0ID0gc3RhY2tHZXQ7XG5TdGFjay5wcm90b3R5cGUuaGFzID0gc3RhY2tIYXM7XG5TdGFjay5wcm90b3R5cGUuc2V0ID0gc3RhY2tTZXQ7XG5cbm1vZHVsZS5leHBvcnRzID0gU3RhY2s7XG4iLCIvKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUNsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gW107XG4gIHRoaXMuc2l6ZSA9IDA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlQ2xlYXI7XG4iLCJ2YXIgYXNzb2NJbmRleE9mID0gcmVxdWlyZSgnLi9fYXNzb2NJbmRleE9mJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBhcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzcGxpY2UgPSBhcnJheVByb3RvLnNwbGljZTtcblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlRGVsZXRlKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIGlmIChpbmRleCA8IDApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIGxhc3RJbmRleCA9IGRhdGEubGVuZ3RoIC0gMTtcbiAgaWYgKGluZGV4ID09IGxhc3RJbmRleCkge1xuICAgIGRhdGEucG9wKCk7XG4gIH0gZWxzZSB7XG4gICAgc3BsaWNlLmNhbGwoZGF0YSwgaW5kZXgsIDEpO1xuICB9XG4gIC0tdGhpcy5zaXplO1xuICByZXR1cm4gdHJ1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0Q2FjaGVEZWxldGU7XG4iLCJ2YXIgYXNzb2NJbmRleE9mID0gcmVxdWlyZSgnLi9fYXNzb2NJbmRleE9mJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUdldChrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICByZXR1cm4gaW5kZXggPCAwID8gdW5kZWZpbmVkIDogZGF0YVtpbmRleF1bMV07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlR2V0O1xuIiwidmFyIGFzc29jSW5kZXhPZiA9IHJlcXVpcmUoJy4vX2Fzc29jSW5kZXhPZicpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlSGFzKGtleSkge1xuICByZXR1cm4gYXNzb2NJbmRleE9mKHRoaXMuX19kYXRhX18sIGtleSkgPiAtMTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0Q2FjaGVIYXM7XG4iLCJ2YXIgYXNzb2NJbmRleE9mID0gcmVxdWlyZSgnLi9fYXNzb2NJbmRleE9mJyk7XG5cbi8qKlxuICogU2V0cyB0aGUgbGlzdCBjYWNoZSBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbGlzdCBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgKyt0aGlzLnNpemU7XG4gICAgZGF0YS5wdXNoKFtrZXksIHZhbHVlXSk7XG4gIH0gZWxzZSB7XG4gICAgZGF0YVtpbmRleF1bMV0gPSB2YWx1ZTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0Q2FjaGVTZXQ7XG4iLCJ2YXIgTGlzdENhY2hlID0gcmVxdWlyZSgnLi9fTGlzdENhY2hlJyk7XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgc3RhY2suXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqL1xuZnVuY3Rpb24gc3RhY2tDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGU7XG4gIHRoaXMuc2l6ZSA9IDA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RhY2tDbGVhcjtcbiIsIi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIHN0YWNrLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrRGVsZXRlKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICByZXN1bHQgPSBkYXRhWydkZWxldGUnXShrZXkpO1xuXG4gIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdGFja0RlbGV0ZTtcbiIsIi8qKlxuICogR2V0cyB0aGUgc3RhY2sgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrR2V0KGtleSkge1xuICByZXR1cm4gdGhpcy5fX2RhdGFfXy5nZXQoa2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdGFja0dldDtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGEgc3RhY2sgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBzdGFja0hhcyhrZXkpIHtcbiAgcmV0dXJuIHRoaXMuX19kYXRhX18uaGFzKGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RhY2tIYXM7XG4iLCJ2YXIgTGlzdENhY2hlID0gcmVxdWlyZSgnLi9fTGlzdENhY2hlJyksXG4gICAgTWFwID0gcmVxdWlyZSgnLi9fTWFwJyksXG4gICAgTWFwQ2FjaGUgPSByZXF1aXJlKCcuL19NYXBDYWNoZScpO1xuXG4vKiogVXNlZCBhcyB0aGUgc2l6ZSB0byBlbmFibGUgbGFyZ2UgYXJyYXkgb3B0aW1pemF0aW9ucy4gKi9cbnZhciBMQVJHRV9BUlJBWV9TSVpFID0gMjAwO1xuXG4vKipcbiAqIFNldHMgdGhlIHN0YWNrIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIHN0YWNrIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBzdGFja1NldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgaWYgKGRhdGEgaW5zdGFuY2VvZiBMaXN0Q2FjaGUpIHtcbiAgICB2YXIgcGFpcnMgPSBkYXRhLl9fZGF0YV9fO1xuICAgIGlmICghTWFwIHx8IChwYWlycy5sZW5ndGggPCBMQVJHRV9BUlJBWV9TSVpFIC0gMSkpIHtcbiAgICAgIHBhaXJzLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgICAgIHRoaXMuc2l6ZSA9ICsrZGF0YS5zaXplO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGRhdGEgPSB0aGlzLl9fZGF0YV9fID0gbmV3IE1hcENhY2hlKHBhaXJzKTtcbiAgfVxuICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICByZXR1cm4gdGhpcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdGFja1NldDtcbiIsInZhciBpc0Z1bmN0aW9uID0gcmVxdWlyZSgnLi9pc0Z1bmN0aW9uJyksXG4gICAgaXNNYXNrZWQgPSByZXF1aXJlKCcuL19pc01hc2tlZCcpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpLFxuICAgIHRvU291cmNlID0gcmVxdWlyZSgnLi9fdG9Tb3VyY2UnKTtcblxuLyoqXG4gKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgXG4gKiBbc3ludGF4IGNoYXJhY3RlcnNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXBhdHRlcm5zKS5cbiAqL1xudmFyIHJlUmVnRXhwQ2hhciA9IC9bXFxcXF4kLiorPygpW1xcXXt9fF0vZztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGhvc3QgY29uc3RydWN0b3JzIChTYWZhcmkpLiAqL1xudmFyIHJlSXNIb3N0Q3RvciA9IC9eXFxbb2JqZWN0IC4rP0NvbnN0cnVjdG9yXFxdJC87XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGUsXG4gICAgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKiogVXNlZCB0byBkZXRlY3QgaWYgYSBtZXRob2QgaXMgbmF0aXZlLiAqL1xudmFyIHJlSXNOYXRpdmUgPSBSZWdFeHAoJ14nICtcbiAgZnVuY1RvU3RyaW5nLmNhbGwoaGFzT3duUHJvcGVydHkpLnJlcGxhY2UocmVSZWdFeHBDaGFyLCAnXFxcXCQmJylcbiAgLnJlcGxhY2UoL2hhc093blByb3BlcnR5fChmdW5jdGlvbikuKj8oPz1cXFxcXFwoKXwgZm9yIC4rPyg/PVxcXFxcXF0pL2csICckMS4qPycpICsgJyQnXG4pO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTmF0aXZlYCB3aXRob3V0IGJhZCBzaGltIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG5hdGl2ZSBmdW5jdGlvbixcbiAqICBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc05hdGl2ZSh2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSB8fCBpc01hc2tlZCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHBhdHRlcm4gPSBpc0Z1bmN0aW9uKHZhbHVlKSA/IHJlSXNOYXRpdmUgOiByZUlzSG9zdEN0b3I7XG4gIHJldHVybiBwYXR0ZXJuLnRlc3QodG9Tb3VyY2UodmFsdWUpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNOYXRpdmU7XG4iLCJ2YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fU3ltYm9sJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VHZXRUYWdgIHdoaWNoIGlnbm9yZXMgYFN5bWJvbC50b1N0cmluZ1RhZ2AgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJhdyBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBnZXRSYXdUYWcodmFsdWUpIHtcbiAgdmFyIGlzT3duID0gaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgc3ltVG9TdHJpbmdUYWcpLFxuICAgICAgdGFnID0gdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuXG4gIHRyeSB7XG4gICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdW5kZWZpbmVkO1xuICAgIHZhciB1bm1hc2tlZCA9IHRydWU7XG4gIH0gY2F0Y2ggKGUpIHt9XG5cbiAgdmFyIHJlc3VsdCA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICBpZiAodW5tYXNrZWQpIHtcbiAgICBpZiAoaXNPd24pIHtcbiAgICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHRhZztcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlIHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRSYXdUYWc7XG4iLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIHVzaW5nIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBvYmplY3RUb1N0cmluZztcbiIsInZhciBjb3JlSnNEYXRhID0gcmVxdWlyZSgnLi9fY29yZUpzRGF0YScpO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgbWV0aG9kcyBtYXNxdWVyYWRpbmcgYXMgbmF0aXZlLiAqL1xudmFyIG1hc2tTcmNLZXkgPSAoZnVuY3Rpb24oKSB7XG4gIHZhciB1aWQgPSAvW14uXSskLy5leGVjKGNvcmVKc0RhdGEgJiYgY29yZUpzRGF0YS5rZXlzICYmIGNvcmVKc0RhdGEua2V5cy5JRV9QUk9UTyB8fCAnJyk7XG4gIHJldHVybiB1aWQgPyAoJ1N5bWJvbChzcmMpXzEuJyArIHVpZCkgOiAnJztcbn0oKSk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBmdW5jYCBoYXMgaXRzIHNvdXJjZSBtYXNrZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBmdW5jYCBpcyBtYXNrZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNNYXNrZWQoZnVuYykge1xuICByZXR1cm4gISFtYXNrU3JjS2V5ICYmIChtYXNrU3JjS2V5IGluIGZ1bmMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzTWFza2VkO1xuIiwidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBvdmVycmVhY2hpbmcgY29yZS1qcyBzaGltcy4gKi9cbnZhciBjb3JlSnNEYXRhID0gcm9vdFsnX19jb3JlLWpzX3NoYXJlZF9fJ107XG5cbm1vZHVsZS5leHBvcnRzID0gY29yZUpzRGF0YTtcbiIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbnZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbi8qKlxuICogQ29udmVydHMgYGZ1bmNgIHRvIGl0cyBzb3VyY2UgY29kZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHNvdXJjZSBjb2RlLlxuICovXG5mdW5jdGlvbiB0b1NvdXJjZShmdW5jKSB7XG4gIGlmIChmdW5jICE9IG51bGwpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGZ1bmNUb1N0cmluZy5jYWxsKGZ1bmMpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiAoZnVuYyArICcnKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9XG4gIHJldHVybiAnJztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b1NvdXJjZTtcbiIsIi8qKlxuICogR2V0cyB0aGUgdmFsdWUgYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGdldFZhbHVlKG9iamVjdCwga2V5KSB7XG4gIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFZhbHVlO1xuIiwidmFyIG1hcENhY2hlQ2xlYXIgPSByZXF1aXJlKCcuL19tYXBDYWNoZUNsZWFyJyksXG4gICAgbWFwQ2FjaGVEZWxldGUgPSByZXF1aXJlKCcuL19tYXBDYWNoZURlbGV0ZScpLFxuICAgIG1hcENhY2hlR2V0ID0gcmVxdWlyZSgnLi9fbWFwQ2FjaGVHZXQnKSxcbiAgICBtYXBDYWNoZUhhcyA9IHJlcXVpcmUoJy4vX21hcENhY2hlSGFzJyksXG4gICAgbWFwQ2FjaGVTZXQgPSByZXF1aXJlKCcuL19tYXBDYWNoZVNldCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBtYXAgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gTWFwQ2FjaGUoZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgTWFwQ2FjaGVgLlxuTWFwQ2FjaGUucHJvdG90eXBlLmNsZWFyID0gbWFwQ2FjaGVDbGVhcjtcbk1hcENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBtYXBDYWNoZURlbGV0ZTtcbk1hcENhY2hlLnByb3RvdHlwZS5nZXQgPSBtYXBDYWNoZUdldDtcbk1hcENhY2hlLnByb3RvdHlwZS5oYXMgPSBtYXBDYWNoZUhhcztcbk1hcENhY2hlLnByb3RvdHlwZS5zZXQgPSBtYXBDYWNoZVNldDtcblxubW9kdWxlLmV4cG9ydHMgPSBNYXBDYWNoZTtcbiIsInZhciBIYXNoID0gcmVxdWlyZSgnLi9fSGFzaCcpLFxuICAgIExpc3RDYWNoZSA9IHJlcXVpcmUoJy4vX0xpc3RDYWNoZScpLFxuICAgIE1hcCA9IHJlcXVpcmUoJy4vX01hcCcpO1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIG1hcC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUNsZWFyKCkge1xuICB0aGlzLnNpemUgPSAwO1xuICB0aGlzLl9fZGF0YV9fID0ge1xuICAgICdoYXNoJzogbmV3IEhhc2gsXG4gICAgJ21hcCc6IG5ldyAoTWFwIHx8IExpc3RDYWNoZSksXG4gICAgJ3N0cmluZyc6IG5ldyBIYXNoXG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwQ2FjaGVDbGVhcjtcbiIsInZhciBoYXNoQ2xlYXIgPSByZXF1aXJlKCcuL19oYXNoQ2xlYXInKSxcbiAgICBoYXNoRGVsZXRlID0gcmVxdWlyZSgnLi9faGFzaERlbGV0ZScpLFxuICAgIGhhc2hHZXQgPSByZXF1aXJlKCcuL19oYXNoR2V0JyksXG4gICAgaGFzaEhhcyA9IHJlcXVpcmUoJy4vX2hhc2hIYXMnKSxcbiAgICBoYXNoU2V0ID0gcmVxdWlyZSgnLi9faGFzaFNldCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBoYXNoIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gSGFzaChlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBIYXNoYC5cbkhhc2gucHJvdG90eXBlLmNsZWFyID0gaGFzaENsZWFyO1xuSGFzaC5wcm90b3R5cGVbJ2RlbGV0ZSddID0gaGFzaERlbGV0ZTtcbkhhc2gucHJvdG90eXBlLmdldCA9IGhhc2hHZXQ7XG5IYXNoLnByb3RvdHlwZS5oYXMgPSBoYXNoSGFzO1xuSGFzaC5wcm90b3R5cGUuc2V0ID0gaGFzaFNldDtcblxubW9kdWxlLmV4cG9ydHMgPSBIYXNoO1xuIiwidmFyIG5hdGl2ZUNyZWF0ZSA9IHJlcXVpcmUoJy4vX25hdGl2ZUNyZWF0ZScpO1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGhhc2guXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgSGFzaFxuICovXG5mdW5jdGlvbiBoYXNoQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBuYXRpdmVDcmVhdGUgPyBuYXRpdmVDcmVhdGUobnVsbCkgOiB7fTtcbiAgdGhpcy5zaXplID0gMDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNoQ2xlYXI7XG4iLCIvKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBoYXNoLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge09iamVjdH0gaGFzaCBUaGUgaGFzaCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzaERlbGV0ZShrZXkpIHtcbiAgdmFyIHJlc3VsdCA9IHRoaXMuaGFzKGtleSkgJiYgZGVsZXRlIHRoaXMuX19kYXRhX19ba2V5XTtcbiAgdGhpcy5zaXplIC09IHJlc3VsdCA/IDEgOiAwO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2hEZWxldGU7XG4iLCJ2YXIgbmF0aXZlQ3JlYXRlID0gcmVxdWlyZSgnLi9fbmF0aXZlQ3JlYXRlJyk7XG5cbi8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi9cbnZhciBIQVNIX1VOREVGSU5FRCA9ICdfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBHZXRzIHRoZSBoYXNoIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGhhc2hHZXQoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgaWYgKG5hdGl2ZUNyZWF0ZSkge1xuICAgIHZhciByZXN1bHQgPSBkYXRhW2tleV07XG4gICAgcmV0dXJuIHJlc3VsdCA9PT0gSEFTSF9VTkRFRklORUQgPyB1bmRlZmluZWQgOiByZXN1bHQ7XG4gIH1cbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KSA/IGRhdGFba2V5XSA6IHVuZGVmaW5lZDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNoR2V0O1xuIiwidmFyIG5hdGl2ZUNyZWF0ZSA9IHJlcXVpcmUoJy4vX25hdGl2ZUNyZWF0ZScpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIGhhc2ggdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc2hIYXMoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgcmV0dXJuIG5hdGl2ZUNyZWF0ZSA/IChkYXRhW2tleV0gIT09IHVuZGVmaW5lZCkgOiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEsIGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaEhhcztcbiIsInZhciBuYXRpdmVDcmVhdGUgPSByZXF1aXJlKCcuL19uYXRpdmVDcmVhdGUnKTtcblxuLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKipcbiAqIFNldHMgdGhlIGhhc2ggYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBoYXNoIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBoYXNoU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICB0aGlzLnNpemUgKz0gdGhpcy5oYXMoa2V5KSA/IDAgOiAxO1xuICBkYXRhW2tleV0gPSAobmF0aXZlQ3JlYXRlICYmIHZhbHVlID09PSB1bmRlZmluZWQpID8gSEFTSF9VTkRFRklORUQgOiB2YWx1ZTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaFNldDtcbiIsInZhciBnZXRNYXBEYXRhID0gcmVxdWlyZSgnLi9fZ2V0TWFwRGF0YScpO1xuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBtYXAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVEZWxldGUoa2V5KSB7XG4gIHZhciByZXN1bHQgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSlbJ2RlbGV0ZSddKGtleSk7XG4gIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBDYWNoZURlbGV0ZTtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUgZm9yIHVzZSBhcyB1bmlxdWUgb2JqZWN0IGtleS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0tleWFibGUodmFsdWUpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiAodHlwZSA9PSAnc3RyaW5nJyB8fCB0eXBlID09ICdudW1iZXInIHx8IHR5cGUgPT0gJ3N5bWJvbCcgfHwgdHlwZSA9PSAnYm9vbGVhbicpXG4gICAgPyAodmFsdWUgIT09ICdfX3Byb3RvX18nKVxuICAgIDogKHZhbHVlID09PSBudWxsKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0tleWFibGU7XG4iLCJ2YXIgZ2V0TWFwRGF0YSA9IHJlcXVpcmUoJy4vX2dldE1hcERhdGEnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBtYXAgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlR2V0KGtleSkge1xuICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLmdldChrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcENhY2hlR2V0O1xuIiwidmFyIGdldE1hcERhdGEgPSByZXF1aXJlKCcuL19nZXRNYXBEYXRhJyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgbWFwIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVIYXMoa2V5KSB7XG4gIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuaGFzKGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwQ2FjaGVIYXM7XG4iLCJ2YXIgZ2V0TWFwRGF0YSA9IHJlcXVpcmUoJy4vX2dldE1hcERhdGEnKTtcblxuLyoqXG4gKiBTZXRzIHRoZSBtYXAgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbWFwIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLFxuICAgICAgc2l6ZSA9IGRhdGEuc2l6ZTtcblxuICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgdGhpcy5zaXplICs9IGRhdGEuc2l6ZSA9PSBzaXplID8gMCA6IDE7XG4gIHJldHVybiB0aGlzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcENhY2hlU2V0O1xuIiwidmFyIGNyZWF0ZUJhc2VGb3IgPSByZXF1aXJlKCcuL19jcmVhdGVCYXNlRm9yJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGJhc2VGb3JPd25gIHdoaWNoIGl0ZXJhdGVzIG92ZXIgYG9iamVjdGBcbiAqIHByb3BlcnRpZXMgcmV0dXJuZWQgYnkgYGtleXNGdW5jYCBhbmQgaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBlYWNoIHByb3BlcnR5LlxuICogSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG52YXIgYmFzZUZvciA9IGNyZWF0ZUJhc2VGb3IoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlRm9yO1xuIiwiLyoqXG4gKiBDcmVhdGVzIGEgYmFzZSBmdW5jdGlvbiBmb3IgbWV0aG9kcyBsaWtlIGBfLmZvckluYCBhbmQgYF8uZm9yT3duYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBiYXNlIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjcmVhdGVCYXNlRm9yKGZyb21SaWdodCkge1xuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0LCBpdGVyYXRlZSwga2V5c0Z1bmMpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgaXRlcmFibGUgPSBPYmplY3Qob2JqZWN0KSxcbiAgICAgICAgcHJvcHMgPSBrZXlzRnVuYyhvYmplY3QpLFxuICAgICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgIHZhciBrZXkgPSBwcm9wc1tmcm9tUmlnaHQgPyBsZW5ndGggOiArK2luZGV4XTtcbiAgICAgIGlmIChpdGVyYXRlZShpdGVyYWJsZVtrZXldLCBrZXksIGl0ZXJhYmxlKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvYmplY3Q7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlQmFzZUZvcjtcbiIsInZhciBhc3NpZ25NZXJnZVZhbHVlID0gcmVxdWlyZSgnLi9fYXNzaWduTWVyZ2VWYWx1ZScpLFxuICAgIGNsb25lQnVmZmVyID0gcmVxdWlyZSgnLi9fY2xvbmVCdWZmZXInKSxcbiAgICBjbG9uZVR5cGVkQXJyYXkgPSByZXF1aXJlKCcuL19jbG9uZVR5cGVkQXJyYXknKSxcbiAgICBjb3B5QXJyYXkgPSByZXF1aXJlKCcuL19jb3B5QXJyYXknKSxcbiAgICBpbml0Q2xvbmVPYmplY3QgPSByZXF1aXJlKCcuL19pbml0Q2xvbmVPYmplY3QnKSxcbiAgICBpc0FyZ3VtZW50cyA9IHJlcXVpcmUoJy4vaXNBcmd1bWVudHMnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNBcnJheUxpa2VPYmplY3QgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlT2JqZWN0JyksXG4gICAgaXNCdWZmZXIgPSByZXF1aXJlKCcuL2lzQnVmZmVyJyksXG4gICAgaXNGdW5jdGlvbiA9IHJlcXVpcmUoJy4vaXNGdW5jdGlvbicpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpLFxuICAgIGlzUGxhaW5PYmplY3QgPSByZXF1aXJlKCcuL2lzUGxhaW5PYmplY3QnKSxcbiAgICBpc1R5cGVkQXJyYXkgPSByZXF1aXJlKCcuL2lzVHlwZWRBcnJheScpLFxuICAgIHNhZmVHZXQgPSByZXF1aXJlKCcuL19zYWZlR2V0JyksXG4gICAgdG9QbGFpbk9iamVjdCA9IHJlcXVpcmUoJy4vdG9QbGFpbk9iamVjdCcpO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZU1lcmdlYCBmb3IgYXJyYXlzIGFuZCBvYmplY3RzIHdoaWNoIHBlcmZvcm1zXG4gKiBkZWVwIG1lcmdlcyBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGVuYWJsaW5nIG9iamVjdHMgd2l0aCBjaXJjdWxhclxuICogcmVmZXJlbmNlcyB0byBiZSBtZXJnZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIG1lcmdlLlxuICogQHBhcmFtIHtudW1iZXJ9IHNyY0luZGV4IFRoZSBpbmRleCBvZiBgc291cmNlYC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IG1lcmdlRnVuYyBUaGUgZnVuY3Rpb24gdG8gbWVyZ2UgdmFsdWVzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBzb3VyY2UgdmFsdWVzIGFuZCB0aGVpciBtZXJnZWRcbiAqICBjb3VudGVycGFydHMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VNZXJnZURlZXAob2JqZWN0LCBzb3VyY2UsIGtleSwgc3JjSW5kZXgsIG1lcmdlRnVuYywgY3VzdG9taXplciwgc3RhY2spIHtcbiAgdmFyIG9ialZhbHVlID0gc2FmZUdldChvYmplY3QsIGtleSksXG4gICAgICBzcmNWYWx1ZSA9IHNhZmVHZXQoc291cmNlLCBrZXkpLFxuICAgICAgc3RhY2tlZCA9IHN0YWNrLmdldChzcmNWYWx1ZSk7XG5cbiAgaWYgKHN0YWNrZWQpIHtcbiAgICBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCBzdGFja2VkKTtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG5ld1ZhbHVlID0gY3VzdG9taXplclxuICAgID8gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUsIChrZXkgKyAnJyksIG9iamVjdCwgc291cmNlLCBzdGFjaylcbiAgICA6IHVuZGVmaW5lZDtcblxuICB2YXIgaXNDb21tb24gPSBuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkO1xuXG4gIGlmIChpc0NvbW1vbikge1xuICAgIHZhciBpc0FyciA9IGlzQXJyYXkoc3JjVmFsdWUpLFxuICAgICAgICBpc0J1ZmYgPSAhaXNBcnIgJiYgaXNCdWZmZXIoc3JjVmFsdWUpLFxuICAgICAgICBpc1R5cGVkID0gIWlzQXJyICYmICFpc0J1ZmYgJiYgaXNUeXBlZEFycmF5KHNyY1ZhbHVlKTtcblxuICAgIG5ld1ZhbHVlID0gc3JjVmFsdWU7XG4gICAgaWYgKGlzQXJyIHx8IGlzQnVmZiB8fCBpc1R5cGVkKSB7XG4gICAgICBpZiAoaXNBcnJheShvYmpWYWx1ZSkpIHtcbiAgICAgICAgbmV3VmFsdWUgPSBvYmpWYWx1ZTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KG9ialZhbHVlKSkge1xuICAgICAgICBuZXdWYWx1ZSA9IGNvcHlBcnJheShvYmpWYWx1ZSk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChpc0J1ZmYpIHtcbiAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgbmV3VmFsdWUgPSBjbG9uZUJ1ZmZlcihzcmNWYWx1ZSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChpc1R5cGVkKSB7XG4gICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgIG5ld1ZhbHVlID0gY2xvbmVUeXBlZEFycmF5KHNyY1ZhbHVlLCB0cnVlKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBuZXdWYWx1ZSA9IFtdO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHNyY1ZhbHVlKSB8fCBpc0FyZ3VtZW50cyhzcmNWYWx1ZSkpIHtcbiAgICAgIG5ld1ZhbHVlID0gb2JqVmFsdWU7XG4gICAgICBpZiAoaXNBcmd1bWVudHMob2JqVmFsdWUpKSB7XG4gICAgICAgIG5ld1ZhbHVlID0gdG9QbGFpbk9iamVjdChvYmpWYWx1ZSk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmICghaXNPYmplY3Qob2JqVmFsdWUpIHx8IGlzRnVuY3Rpb24ob2JqVmFsdWUpKSB7XG4gICAgICAgIG5ld1ZhbHVlID0gaW5pdENsb25lT2JqZWN0KHNyY1ZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgIH1cbiAgfVxuICBpZiAoaXNDb21tb24pIHtcbiAgICAvLyBSZWN1cnNpdmVseSBtZXJnZSBvYmplY3RzIGFuZCBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICBzdGFjay5zZXQoc3JjVmFsdWUsIG5ld1ZhbHVlKTtcbiAgICBtZXJnZUZ1bmMobmV3VmFsdWUsIHNyY1ZhbHVlLCBzcmNJbmRleCwgY3VzdG9taXplciwgc3RhY2spO1xuICAgIHN0YWNrWydkZWxldGUnXShzcmNWYWx1ZSk7XG4gIH1cbiAgYXNzaWduTWVyZ2VWYWx1ZShvYmplY3QsIGtleSwgbmV3VmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VNZXJnZURlZXA7XG4iLCJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbnZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xudmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuLyoqIERldGVjdCB0aGUgcG9wdWxhciBDb21tb25KUyBleHRlbnNpb24gYG1vZHVsZS5leHBvcnRzYC4gKi9cbnZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBCdWZmZXIgPSBtb2R1bGVFeHBvcnRzID8gcm9vdC5CdWZmZXIgOiB1bmRlZmluZWQsXG4gICAgYWxsb2NVbnNhZmUgPSBCdWZmZXIgPyBCdWZmZXIuYWxsb2NVbnNhZmUgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mICBgYnVmZmVyYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtCdWZmZXJ9IGJ1ZmZlciBUaGUgYnVmZmVyIHRvIGNsb25lLlxuICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAqIEByZXR1cm5zIHtCdWZmZXJ9IFJldHVybnMgdGhlIGNsb25lZCBidWZmZXIuXG4gKi9cbmZ1bmN0aW9uIGNsb25lQnVmZmVyKGJ1ZmZlciwgaXNEZWVwKSB7XG4gIGlmIChpc0RlZXApIHtcbiAgICByZXR1cm4gYnVmZmVyLnNsaWNlKCk7XG4gIH1cbiAgdmFyIGxlbmd0aCA9IGJ1ZmZlci5sZW5ndGgsXG4gICAgICByZXN1bHQgPSBhbGxvY1Vuc2FmZSA/IGFsbG9jVW5zYWZlKGxlbmd0aCkgOiBuZXcgYnVmZmVyLmNvbnN0cnVjdG9yKGxlbmd0aCk7XG5cbiAgYnVmZmVyLmNvcHkocmVzdWx0KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjbG9uZUJ1ZmZlcjtcbiIsInZhciBjbG9uZUFycmF5QnVmZmVyID0gcmVxdWlyZSgnLi9fY2xvbmVBcnJheUJ1ZmZlcicpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgdHlwZWRBcnJheWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSB0eXBlZEFycmF5IFRoZSB0eXBlZCBhcnJheSB0byBjbG9uZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgdHlwZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGNsb25lVHlwZWRBcnJheSh0eXBlZEFycmF5LCBpc0RlZXApIHtcbiAgdmFyIGJ1ZmZlciA9IGlzRGVlcCA/IGNsb25lQXJyYXlCdWZmZXIodHlwZWRBcnJheS5idWZmZXIpIDogdHlwZWRBcnJheS5idWZmZXI7XG4gIHJldHVybiBuZXcgdHlwZWRBcnJheS5jb25zdHJ1Y3RvcihidWZmZXIsIHR5cGVkQXJyYXkuYnl0ZU9mZnNldCwgdHlwZWRBcnJheS5sZW5ndGgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNsb25lVHlwZWRBcnJheTtcbiIsInZhciBVaW50OEFycmF5ID0gcmVxdWlyZSgnLi9fVWludDhBcnJheScpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgYXJyYXlCdWZmZXJgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5QnVmZmVyfSBhcnJheUJ1ZmZlciBUaGUgYXJyYXkgYnVmZmVyIHRvIGNsb25lLlxuICogQHJldHVybnMge0FycmF5QnVmZmVyfSBSZXR1cm5zIHRoZSBjbG9uZWQgYXJyYXkgYnVmZmVyLlxuICovXG5mdW5jdGlvbiBjbG9uZUFycmF5QnVmZmVyKGFycmF5QnVmZmVyKSB7XG4gIHZhciByZXN1bHQgPSBuZXcgYXJyYXlCdWZmZXIuY29uc3RydWN0b3IoYXJyYXlCdWZmZXIuYnl0ZUxlbmd0aCk7XG4gIG5ldyBVaW50OEFycmF5KHJlc3VsdCkuc2V0KG5ldyBVaW50OEFycmF5KGFycmF5QnVmZmVyKSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2xvbmVBcnJheUJ1ZmZlcjtcbiIsInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBVaW50OEFycmF5ID0gcm9vdC5VaW50OEFycmF5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFVpbnQ4QXJyYXk7XG4iLCIvKipcbiAqIENvcGllcyB0aGUgdmFsdWVzIG9mIGBzb3VyY2VgIHRvIGBhcnJheWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IHNvdXJjZSBUaGUgYXJyYXkgdG8gY29weSB2YWx1ZXMgZnJvbS5cbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheT1bXV0gVGhlIGFycmF5IHRvIGNvcHkgdmFsdWVzIHRvLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gKi9cbmZ1bmN0aW9uIGNvcHlBcnJheShzb3VyY2UsIGFycmF5KSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gc291cmNlLmxlbmd0aDtcblxuICBhcnJheSB8fCAoYXJyYXkgPSBBcnJheShsZW5ndGgpKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBhcnJheVtpbmRleF0gPSBzb3VyY2VbaW5kZXhdO1xuICB9XG4gIHJldHVybiBhcnJheTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjb3B5QXJyYXk7XG4iLCJ2YXIgYmFzZUNyZWF0ZSA9IHJlcXVpcmUoJy4vX2Jhc2VDcmVhdGUnKSxcbiAgICBnZXRQcm90b3R5cGUgPSByZXF1aXJlKCcuL19nZXRQcm90b3R5cGUnKSxcbiAgICBpc1Byb3RvdHlwZSA9IHJlcXVpcmUoJy4vX2lzUHJvdG90eXBlJyk7XG5cbi8qKlxuICogSW5pdGlhbGl6ZXMgYW4gb2JqZWN0IGNsb25lLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY2xvbmUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBpbml0aWFsaXplZCBjbG9uZS5cbiAqL1xuZnVuY3Rpb24gaW5pdENsb25lT2JqZWN0KG9iamVjdCkge1xuICByZXR1cm4gKHR5cGVvZiBvYmplY3QuY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNQcm90b3R5cGUob2JqZWN0KSlcbiAgICA/IGJhc2VDcmVhdGUoZ2V0UHJvdG90eXBlKG9iamVjdCkpXG4gICAgOiB7fTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbml0Q2xvbmVPYmplY3Q7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0Jyk7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdENyZWF0ZSA9IE9iamVjdC5jcmVhdGU7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY3JlYXRlYCB3aXRob3V0IHN1cHBvcnQgZm9yIGFzc2lnbmluZ1xuICogcHJvcGVydGllcyB0byB0aGUgY3JlYXRlZCBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm90byBUaGUgb2JqZWN0IHRvIGluaGVyaXQgZnJvbS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gKi9cbnZhciBiYXNlQ3JlYXRlID0gKGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBvYmplY3QoKSB7fVxuICByZXR1cm4gZnVuY3Rpb24ocHJvdG8pIHtcbiAgICBpZiAoIWlzT2JqZWN0KHByb3RvKSkge1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH1cbiAgICBpZiAob2JqZWN0Q3JlYXRlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0Q3JlYXRlKHByb3RvKTtcbiAgICB9XG4gICAgb2JqZWN0LnByb3RvdHlwZSA9IHByb3RvO1xuICAgIHZhciByZXN1bHQgPSBuZXcgb2JqZWN0O1xuICAgIG9iamVjdC5wcm90b3R5cGUgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn0oKSk7XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUNyZWF0ZTtcbiIsIi8qKlxuICogQ3JlYXRlcyBhIHVuYXJ5IGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBpdHMgYXJndW1lbnQgdHJhbnNmb3JtZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIGFyZ3VtZW50IHRyYW5zZm9ybS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBvdmVyQXJnKGZ1bmMsIHRyYW5zZm9ybSkge1xuICByZXR1cm4gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIGZ1bmModHJhbnNmb3JtKGFyZykpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG92ZXJBcmc7XG4iLCJ2YXIgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzQXJndW1lbnRzYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QsXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc0FyZ3VtZW50cyh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBhcmdzVGFnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc0FyZ3VtZW50cztcbiIsInZhciBpc0FycmF5TGlrZSA9IHJlcXVpcmUoJy4vaXNBcnJheUxpa2UnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKipcbiAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaXNBcnJheUxpa2VgIGV4Y2VwdCB0aGF0IGl0IGFsc28gY2hlY2tzIGlmIGB2YWx1ZWBcbiAqIGlzIGFuIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheS1saWtlIG9iamVjdCxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcnJheUxpa2VPYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlT2JqZWN0KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2VPYmplY3QoJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXlMaWtlT2JqZWN0KF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5TGlrZU9iamVjdCh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBpc0FycmF5TGlrZSh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNBcnJheUxpa2VPYmplY3Q7XG4iLCIvKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgYGZhbHNlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMTMuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udGltZXMoMiwgXy5zdHViRmFsc2UpO1xuICogLy8gPT4gW2ZhbHNlLCBmYWxzZV1cbiAqL1xuZnVuY3Rpb24gc3R1YkZhbHNlKCkge1xuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3R1YkZhbHNlO1xuIiwidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgZ2V0UHJvdG90eXBlID0gcmVxdWlyZSgnLi9fZ2V0UHJvdG90eXBlJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlLFxuICAgIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xudmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqIFVzZWQgdG8gaW5mZXIgdGhlIGBPYmplY3RgIGNvbnN0cnVjdG9yLiAqL1xudmFyIG9iamVjdEN0b3JTdHJpbmcgPSBmdW5jVG9TdHJpbmcuY2FsbChPYmplY3QpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCB0aGF0IGlzLCBhbiBvYmplY3QgY3JlYXRlZCBieSB0aGVcbiAqIGBPYmplY3RgIGNvbnN0cnVjdG9yIG9yIG9uZSB3aXRoIGEgYFtbUHJvdG90eXBlXV1gIG9mIGBudWxsYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuOC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHBsYWluIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYSA9IDE7XG4gKiB9XG4gKlxuICogXy5pc1BsYWluT2JqZWN0KG5ldyBGb28pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc1BsYWluT2JqZWN0KHsgJ3gnOiAwLCAneSc6IDAgfSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1BsYWluT2JqZWN0KE9iamVjdC5jcmVhdGUobnVsbCkpO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3RMaWtlKHZhbHVlKSB8fCBiYXNlR2V0VGFnKHZhbHVlKSAhPSBvYmplY3RUYWcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHByb3RvID0gZ2V0UHJvdG90eXBlKHZhbHVlKTtcbiAgaWYgKHByb3RvID09PSBudWxsKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgdmFyIEN0b3IgPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3RvLCAnY29uc3RydWN0b3InKSAmJiBwcm90by5jb25zdHJ1Y3RvcjtcbiAgcmV0dXJuIHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3RvciBpbnN0YW5jZW9mIEN0b3IgJiZcbiAgICBmdW5jVG9TdHJpbmcuY2FsbChDdG9yKSA9PSBvYmplY3RDdG9yU3RyaW5nO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzUGxhaW5PYmplY3Q7XG4iLCJ2YXIgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICBpc0xlbmd0aCA9IHJlcXVpcmUoJy4vaXNMZW5ndGgnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgIGFycmF5VGFnID0gJ1tvYmplY3QgQXJyYXldJyxcbiAgICBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgZXJyb3JUYWcgPSAnW29iamVjdCBFcnJvcl0nLFxuICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nLFxuICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nLFxuICAgIHJlZ2V4cFRhZyA9ICdbb2JqZWN0IFJlZ0V4cF0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgIHN0cmluZ1RhZyA9ICdbb2JqZWN0IFN0cmluZ10nLFxuICAgIHdlYWtNYXBUYWcgPSAnW29iamVjdCBXZWFrTWFwXSc7XG5cbnZhciBhcnJheUJ1ZmZlclRhZyA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXScsXG4gICAgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nLFxuICAgIGZsb2F0MzJUYWcgPSAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICBmbG9hdDY0VGFnID0gJ1tvYmplY3QgRmxvYXQ2NEFycmF5XScsXG4gICAgaW50OFRhZyA9ICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgIGludDE2VGFnID0gJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgIGludDMyVGFnID0gJ1tvYmplY3QgSW50MzJBcnJheV0nLFxuICAgIHVpbnQ4VGFnID0gJ1tvYmplY3QgVWludDhBcnJheV0nLFxuICAgIHVpbnQ4Q2xhbXBlZFRhZyA9ICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgdWludDE2VGFnID0gJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICB1aW50MzJUYWcgPSAnW29iamVjdCBVaW50MzJBcnJheV0nO1xuXG4vKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBvZiB0eXBlZCBhcnJheXMuICovXG52YXIgdHlwZWRBcnJheVRhZ3MgPSB7fTtcbnR5cGVkQXJyYXlUYWdzW2Zsb2F0MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbZmxvYXQ2NFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbaW50OFRhZ10gPSB0eXBlZEFycmF5VGFnc1tpbnQxNlRhZ10gPVxudHlwZWRBcnJheVRhZ3NbaW50MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDhUYWddID1cbnR5cGVkQXJyYXlUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50MTZUYWddID1cbnR5cGVkQXJyYXlUYWdzW3VpbnQzMlRhZ10gPSB0cnVlO1xudHlwZWRBcnJheVRhZ3NbYXJnc1RhZ10gPSB0eXBlZEFycmF5VGFnc1thcnJheVRhZ10gPVxudHlwZWRBcnJheVRhZ3NbYXJyYXlCdWZmZXJUYWddID0gdHlwZWRBcnJheVRhZ3NbYm9vbFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbZGF0YVZpZXdUYWddID0gdHlwZWRBcnJheVRhZ3NbZGF0ZVRhZ10gPVxudHlwZWRBcnJheVRhZ3NbZXJyb3JUYWddID0gdHlwZWRBcnJheVRhZ3NbZnVuY1RhZ10gPVxudHlwZWRBcnJheVRhZ3NbbWFwVGFnXSA9IHR5cGVkQXJyYXlUYWdzW251bWJlclRhZ10gPVxudHlwZWRBcnJheVRhZ3Nbb2JqZWN0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3JlZ2V4cFRhZ10gPVxudHlwZWRBcnJheVRhZ3Nbc2V0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3N0cmluZ1RhZ10gPVxudHlwZWRBcnJheVRhZ3Nbd2Vha01hcFRhZ10gPSBmYWxzZTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc1R5cGVkQXJyYXlgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzVHlwZWRBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJlxuICAgIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgISF0eXBlZEFycmF5VGFnc1tiYXNlR2V0VGFnKHZhbHVlKV07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzVHlwZWRBcnJheTtcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udW5hcnlgIHdpdGhvdXQgc3VwcG9ydCBmb3Igc3RvcmluZyBtZXRhZGF0YS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2FwIGFyZ3VtZW50cyBmb3IuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXBwZWQgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VVbmFyeShmdW5jKSB7XG4gIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiBmdW5jKHZhbHVlKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlVW5hcnk7XG4iLCJ2YXIgZnJlZUdsb2JhbCA9IHJlcXVpcmUoJy4vX2ZyZWVHbG9iYWwnKTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbnZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xudmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuLyoqIERldGVjdCB0aGUgcG9wdWxhciBDb21tb25KUyBleHRlbnNpb24gYG1vZHVsZS5leHBvcnRzYC4gKi9cbnZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHByb2Nlc3NgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlUHJvY2VzcyA9IG1vZHVsZUV4cG9ydHMgJiYgZnJlZUdsb2JhbC5wcm9jZXNzO1xuXG4vKiogVXNlZCB0byBhY2Nlc3MgZmFzdGVyIE5vZGUuanMgaGVscGVycy4gKi9cbnZhciBub2RlVXRpbCA9IChmdW5jdGlvbigpIHtcbiAgdHJ5IHtcbiAgICAvLyBVc2UgYHV0aWwudHlwZXNgIGZvciBOb2RlLmpzIDEwKy5cbiAgICB2YXIgdHlwZXMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUucmVxdWlyZSAmJiBmcmVlTW9kdWxlLnJlcXVpcmUoJ3V0aWwnKS50eXBlcztcblxuICAgIGlmICh0eXBlcykge1xuICAgICAgcmV0dXJuIHR5cGVzO1xuICAgIH1cblxuICAgIC8vIExlZ2FjeSBgcHJvY2Vzcy5iaW5kaW5nKCd1dGlsJylgIGZvciBOb2RlLmpzIDwgMTAuXG4gICAgcmV0dXJuIGZyZWVQcm9jZXNzICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcgJiYgZnJlZVByb2Nlc3MuYmluZGluZygndXRpbCcpO1xuICB9IGNhdGNoIChlKSB7fVxufSgpKTtcblxubW9kdWxlLmV4cG9ydHMgPSBub2RlVXRpbDtcbiIsInZhciBjb3B5T2JqZWN0ID0gcmVxdWlyZSgnLi9fY29weU9iamVjdCcpLFxuICAgIGtleXNJbiA9IHJlcXVpcmUoJy4va2V5c0luJyk7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHBsYWluIG9iamVjdCBmbGF0dGVuaW5nIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZ1xuICoga2V5ZWQgcHJvcGVydGllcyBvZiBgdmFsdWVgIHRvIG93biBwcm9wZXJ0aWVzIG9mIHRoZSBwbGFpbiBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgcGxhaW4gb2JqZWN0LlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYiA9IDI7XG4gKiB9XG4gKlxuICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAqXG4gKiBfLmFzc2lnbih7ICdhJzogMSB9LCBuZXcgRm9vKTtcbiAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICpcbiAqIF8uYXNzaWduKHsgJ2EnOiAxIH0sIF8udG9QbGFpbk9iamVjdChuZXcgRm9vKSk7XG4gKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDMgfVxuICovXG5mdW5jdGlvbiB0b1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gIHJldHVybiBjb3B5T2JqZWN0KHZhbHVlLCBrZXlzSW4odmFsdWUpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b1BsYWluT2JqZWN0O1xuIiwidmFyIGFzc2lnblZhbHVlID0gcmVxdWlyZSgnLi9fYXNzaWduVmFsdWUnKSxcbiAgICBiYXNlQXNzaWduVmFsdWUgPSByZXF1aXJlKCcuL19iYXNlQXNzaWduVmFsdWUnKTtcblxuLyoqXG4gKiBDb3BpZXMgcHJvcGVydGllcyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tLlxuICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzIHRvIGNvcHkuXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgdG8uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb3BpZWQgdmFsdWVzLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gY29weU9iamVjdChzb3VyY2UsIHByb3BzLCBvYmplY3QsIGN1c3RvbWl6ZXIpIHtcbiAgdmFyIGlzTmV3ID0gIW9iamVjdDtcbiAgb2JqZWN0IHx8IChvYmplY3QgPSB7fSk7XG5cbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIga2V5ID0gcHJvcHNbaW5kZXhdO1xuXG4gICAgdmFyIG5ld1ZhbHVlID0gY3VzdG9taXplclxuICAgICAgPyBjdXN0b21pemVyKG9iamVjdFtrZXldLCBzb3VyY2Vba2V5XSwga2V5LCBvYmplY3QsIHNvdXJjZSlcbiAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIG5ld1ZhbHVlID0gc291cmNlW2tleV07XG4gICAgfVxuICAgIGlmIChpc05ldykge1xuICAgICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBvYmplY3Q7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29weU9iamVjdDtcbiIsInZhciBiYXNlQXNzaWduVmFsdWUgPSByZXF1aXJlKCcuL19iYXNlQXNzaWduVmFsdWUnKSxcbiAgICBlcSA9IHJlcXVpcmUoJy4vZXEnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBBc3NpZ25zIGB2YWx1ZWAgdG8gYGtleWAgb2YgYG9iamVjdGAgaWYgdGhlIGV4aXN0aW5nIHZhbHVlIGlzIG5vdCBlcXVpdmFsZW50XG4gKiB1c2luZyBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gKi9cbmZ1bmN0aW9uIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICB2YXIgb2JqVmFsdWUgPSBvYmplY3Rba2V5XTtcbiAgaWYgKCEoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiYgZXEob2JqVmFsdWUsIHZhbHVlKSkgfHxcbiAgICAgICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpKSB7XG4gICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhc3NpZ25WYWx1ZTtcbiIsInZhciBiYXNlVGltZXMgPSByZXF1aXJlKCcuL19iYXNlVGltZXMnKSxcbiAgICBpc0FyZ3VtZW50cyA9IHJlcXVpcmUoJy4vaXNBcmd1bWVudHMnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNCdWZmZXIgPSByZXF1aXJlKCcuL2lzQnVmZmVyJyksXG4gICAgaXNJbmRleCA9IHJlcXVpcmUoJy4vX2lzSW5kZXgnKSxcbiAgICBpc1R5cGVkQXJyYXkgPSByZXF1aXJlKCcuL2lzVHlwZWRBcnJheScpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgdGhlIGFycmF5LWxpa2UgYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGluaGVyaXRlZCBTcGVjaWZ5IHJldHVybmluZyBpbmhlcml0ZWQgcHJvcGVydHkgbmFtZXMuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBhcnJheUxpa2VLZXlzKHZhbHVlLCBpbmhlcml0ZWQpIHtcbiAgdmFyIGlzQXJyID0gaXNBcnJheSh2YWx1ZSksXG4gICAgICBpc0FyZyA9ICFpc0FyciAmJiBpc0FyZ3VtZW50cyh2YWx1ZSksXG4gICAgICBpc0J1ZmYgPSAhaXNBcnIgJiYgIWlzQXJnICYmIGlzQnVmZmVyKHZhbHVlKSxcbiAgICAgIGlzVHlwZSA9ICFpc0FyciAmJiAhaXNBcmcgJiYgIWlzQnVmZiAmJiBpc1R5cGVkQXJyYXkodmFsdWUpLFxuICAgICAgc2tpcEluZGV4ZXMgPSBpc0FyciB8fCBpc0FyZyB8fCBpc0J1ZmYgfHwgaXNUeXBlLFxuICAgICAgcmVzdWx0ID0gc2tpcEluZGV4ZXMgPyBiYXNlVGltZXModmFsdWUubGVuZ3RoLCBTdHJpbmcpIDogW10sXG4gICAgICBsZW5ndGggPSByZXN1bHQubGVuZ3RoO1xuXG4gIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgIGlmICgoaW5oZXJpdGVkIHx8IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIGtleSkpICYmXG4gICAgICAgICEoc2tpcEluZGV4ZXMgJiYgKFxuICAgICAgICAgICAvLyBTYWZhcmkgOSBoYXMgZW51bWVyYWJsZSBgYXJndW1lbnRzLmxlbmd0aGAgaW4gc3RyaWN0IG1vZGUuXG4gICAgICAgICAgIGtleSA9PSAnbGVuZ3RoJyB8fFxuICAgICAgICAgICAvLyBOb2RlLmpzIDAuMTAgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gYnVmZmVycy5cbiAgICAgICAgICAgKGlzQnVmZiAmJiAoa2V5ID09ICdvZmZzZXQnIHx8IGtleSA9PSAncGFyZW50JykpIHx8XG4gICAgICAgICAgIC8vIFBoYW50b21KUyAyIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIHR5cGVkIGFycmF5cy5cbiAgICAgICAgICAgKGlzVHlwZSAmJiAoa2V5ID09ICdidWZmZXInIHx8IGtleSA9PSAnYnl0ZUxlbmd0aCcgfHwga2V5ID09ICdieXRlT2Zmc2V0JykpIHx8XG4gICAgICAgICAgIC8vIFNraXAgaW5kZXggcHJvcGVydGllcy5cbiAgICAgICAgICAgaXNJbmRleChrZXksIGxlbmd0aClcbiAgICAgICAgKSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlMaWtlS2V5cztcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udGltZXNgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kc1xuICogb3IgbWF4IGFycmF5IGxlbmd0aCBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gaW52b2tlIGBpdGVyYXRlZWAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICovXG5mdW5jdGlvbiBiYXNlVGltZXMobiwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBBcnJheShuKTtcblxuICB3aGlsZSAoKytpbmRleCA8IG4pIHtcbiAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoaW5kZXgpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVRpbWVzO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpLFxuICAgIGlzUHJvdG90eXBlID0gcmVxdWlyZSgnLi9faXNQcm90b3R5cGUnKSxcbiAgICBuYXRpdmVLZXlzSW4gPSByZXF1aXJlKCcuL19uYXRpdmVLZXlzSW4nKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzSW5gIHdoaWNoIGRvZXNuJ3QgdHJlYXQgc3BhcnNlIGFycmF5cyBhcyBkZW5zZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gYmFzZUtleXNJbihvYmplY3QpIHtcbiAgaWYgKCFpc09iamVjdChvYmplY3QpKSB7XG4gICAgcmV0dXJuIG5hdGl2ZUtleXNJbihvYmplY3QpO1xuICB9XG4gIHZhciBpc1Byb3RvID0gaXNQcm90b3R5cGUob2JqZWN0KSxcbiAgICAgIHJlc3VsdCA9IFtdO1xuXG4gIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICBpZiAoIShrZXkgPT0gJ2NvbnN0cnVjdG9yJyAmJiAoaXNQcm90byB8fCAhaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpKSkge1xuICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlS2V5c0luO1xuIiwiLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2VcbiAqIFtgT2JqZWN0LmtleXNgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3Qua2V5cylcbiAqIGV4Y2VwdCB0aGF0IGl0IGluY2x1ZGVzIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnRpZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIG5hdGl2ZUtleXNJbihvYmplY3QpIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBpZiAob2JqZWN0ICE9IG51bGwpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbmF0aXZlS2V5c0luO1xuIiwidmFyIGJhc2VSZXN0ID0gcmVxdWlyZSgnLi9fYmFzZVJlc3QnKSxcbiAgICBpc0l0ZXJhdGVlQ2FsbCA9IHJlcXVpcmUoJy4vX2lzSXRlcmF0ZWVDYWxsJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8uYXNzaWduYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gYXNzaWduZXIgVGhlIGZ1bmN0aW9uIHRvIGFzc2lnbiB2YWx1ZXMuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhc3NpZ25lciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQXNzaWduZXIoYXNzaWduZXIpIHtcbiAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKG9iamVjdCwgc291cmNlcykge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBzb3VyY2VzLmxlbmd0aCxcbiAgICAgICAgY3VzdG9taXplciA9IGxlbmd0aCA+IDEgPyBzb3VyY2VzW2xlbmd0aCAtIDFdIDogdW5kZWZpbmVkLFxuICAgICAgICBndWFyZCA9IGxlbmd0aCA+IDIgPyBzb3VyY2VzWzJdIDogdW5kZWZpbmVkO1xuXG4gICAgY3VzdG9taXplciA9IChhc3NpZ25lci5sZW5ndGggPiAzICYmIHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicpXG4gICAgICA/IChsZW5ndGgtLSwgY3VzdG9taXplcilcbiAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKHNvdXJjZXNbMF0sIHNvdXJjZXNbMV0sIGd1YXJkKSkge1xuICAgICAgY3VzdG9taXplciA9IGxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiBjdXN0b21pemVyO1xuICAgICAgbGVuZ3RoID0gMTtcbiAgICB9XG4gICAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHZhciBzb3VyY2UgPSBzb3VyY2VzW2luZGV4XTtcbiAgICAgIGlmIChzb3VyY2UpIHtcbiAgICAgICAgYXNzaWduZXIob2JqZWN0LCBzb3VyY2UsIGluZGV4LCBjdXN0b21pemVyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9iamVjdDtcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlQXNzaWduZXI7XG4iLCJ2YXIgaWRlbnRpdHkgPSByZXF1aXJlKCcuL2lkZW50aXR5JyksXG4gICAgb3ZlclJlc3QgPSByZXF1aXJlKCcuL19vdmVyUmVzdCcpLFxuICAgIHNldFRvU3RyaW5nID0gcmVxdWlyZSgnLi9fc2V0VG9TdHJpbmcnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yZXN0YCB3aGljaCBkb2Vzbid0IHZhbGlkYXRlIG9yIGNvZXJjZSBhcmd1bWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PWZ1bmMubGVuZ3RoLTFdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgcmVzdCBwYXJhbWV0ZXIuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZVJlc3QoZnVuYywgc3RhcnQpIHtcbiAgcmV0dXJuIHNldFRvU3RyaW5nKG92ZXJSZXN0KGZ1bmMsIHN0YXJ0LCBpZGVudGl0eSksIGZ1bmMgKyAnJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVJlc3Q7XG4iLCJ2YXIgYXBwbHkgPSByZXF1aXJlKCcuL19hcHBseScpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlTWF4ID0gTWF0aC5tYXg7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlUmVzdGAgd2hpY2ggdHJhbnNmb3JtcyB0aGUgcmVzdCBhcnJheS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9ZnVuYy5sZW5ndGgtMV0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSByZXN0IHBhcmFtZXRlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHRyYW5zZm9ybSBUaGUgcmVzdCBhcnJheSB0cmFuc2Zvcm0uXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gb3ZlclJlc3QoZnVuYywgc3RhcnQsIHRyYW5zZm9ybSkge1xuICBzdGFydCA9IG5hdGl2ZU1heChzdGFydCA9PT0gdW5kZWZpbmVkID8gKGZ1bmMubGVuZ3RoIC0gMSkgOiBzdGFydCwgMCk7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWF4KGFyZ3MubGVuZ3RoIC0gc3RhcnQsIDApLFxuICAgICAgICBhcnJheSA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgYXJyYXlbaW5kZXhdID0gYXJnc1tzdGFydCArIGluZGV4XTtcbiAgICB9XG4gICAgaW5kZXggPSAtMTtcbiAgICB2YXIgb3RoZXJBcmdzID0gQXJyYXkoc3RhcnQgKyAxKTtcbiAgICB3aGlsZSAoKytpbmRleCA8IHN0YXJ0KSB7XG4gICAgICBvdGhlckFyZ3NbaW5kZXhdID0gYXJnc1tpbmRleF07XG4gICAgfVxuICAgIG90aGVyQXJnc1tzdGFydF0gPSB0cmFuc2Zvcm0oYXJyYXkpO1xuICAgIHJldHVybiBhcHBseShmdW5jLCB0aGlzLCBvdGhlckFyZ3MpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG92ZXJSZXN0O1xuIiwiLyoqXG4gKiBBIGZhc3RlciBhbHRlcm5hdGl2ZSB0byBgRnVuY3Rpb24jYXBwbHlgLCB0aGlzIGZ1bmN0aW9uIGludm9rZXMgYGZ1bmNgXG4gKiB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiBgdGhpc0FyZ2AgYW5kIHRoZSBhcmd1bWVudHMgb2YgYGFyZ3NgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBpbnZva2UuXG4gKiBAcGFyYW0geyp9IHRoaXNBcmcgVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgYGZ1bmNgIHdpdGguXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzdWx0IG9mIGBmdW5jYC5cbiAqL1xuZnVuY3Rpb24gYXBwbHkoZnVuYywgdGhpc0FyZywgYXJncykge1xuICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgY2FzZSAwOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcpO1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdKTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgY2FzZSAzOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICB9XG4gIHJldHVybiBmdW5jLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFwcGx5O1xuIiwidmFyIGJhc2VTZXRUb1N0cmluZyA9IHJlcXVpcmUoJy4vX2Jhc2VTZXRUb1N0cmluZycpLFxuICAgIHNob3J0T3V0ID0gcmVxdWlyZSgnLi9fc2hvcnRPdXQnKTtcblxuLyoqXG4gKiBTZXRzIHRoZSBgdG9TdHJpbmdgIG1ldGhvZCBvZiBgZnVuY2AgdG8gcmV0dXJuIGBzdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBzdHJpbmcgVGhlIGB0b1N0cmluZ2AgcmVzdWx0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBmdW5jYC5cbiAqL1xudmFyIHNldFRvU3RyaW5nID0gc2hvcnRPdXQoYmFzZVNldFRvU3RyaW5nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBzZXRUb1N0cmluZztcbiIsInZhciBjb25zdGFudCA9IHJlcXVpcmUoJy4vY29uc3RhbnQnKSxcbiAgICBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2RlZmluZVByb3BlcnR5JyksXG4gICAgaWRlbnRpdHkgPSByZXF1aXJlKCcuL2lkZW50aXR5Jyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYHNldFRvU3RyaW5nYCB3aXRob3V0IHN1cHBvcnQgZm9yIGhvdCBsb29wIHNob3J0aW5nLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBzdHJpbmcgVGhlIGB0b1N0cmluZ2AgcmVzdWx0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBmdW5jYC5cbiAqL1xudmFyIGJhc2VTZXRUb1N0cmluZyA9ICFkZWZpbmVQcm9wZXJ0eSA/IGlkZW50aXR5IDogZnVuY3Rpb24oZnVuYywgc3RyaW5nKSB7XG4gIHJldHVybiBkZWZpbmVQcm9wZXJ0eShmdW5jLCAndG9TdHJpbmcnLCB7XG4gICAgJ2NvbmZpZ3VyYWJsZSc6IHRydWUsXG4gICAgJ2VudW1lcmFibGUnOiBmYWxzZSxcbiAgICAndmFsdWUnOiBjb25zdGFudChzdHJpbmcpLFxuICAgICd3cml0YWJsZSc6IHRydWVcbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VTZXRUb1N0cmluZztcbiIsIi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBgdmFsdWVgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMi40LjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byByZXR1cm4gZnJvbSB0aGUgbmV3IGZ1bmN0aW9uLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY29uc3RhbnQgZnVuY3Rpb24uXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3RzID0gXy50aW1lcygyLCBfLmNvbnN0YW50KHsgJ2EnOiAxIH0pKTtcbiAqXG4gKiBjb25zb2xlLmxvZyhvYmplY3RzKTtcbiAqIC8vID0+IFt7ICdhJzogMSB9LCB7ICdhJzogMSB9XVxuICpcbiAqIGNvbnNvbGUubG9nKG9iamVjdHNbMF0gPT09IG9iamVjdHNbMV0pO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBjb25zdGFudCh2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnN0YW50O1xuIiwiLyoqIFVzZWQgdG8gZGV0ZWN0IGhvdCBmdW5jdGlvbnMgYnkgbnVtYmVyIG9mIGNhbGxzIHdpdGhpbiBhIHNwYW4gb2YgbWlsbGlzZWNvbmRzLiAqL1xudmFyIEhPVF9DT1VOVCA9IDgwMCxcbiAgICBIT1RfU1BBTiA9IDE2O1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlTm93ID0gRGF0ZS5ub3c7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQnbGwgc2hvcnQgb3V0IGFuZCBpbnZva2UgYGlkZW50aXR5YCBpbnN0ZWFkXG4gKiBvZiBgZnVuY2Agd2hlbiBpdCdzIGNhbGxlZCBgSE9UX0NPVU5UYCBvciBtb3JlIHRpbWVzIGluIGBIT1RfU1BBTmBcbiAqIG1pbGxpc2Vjb25kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzaG9ydGFibGUgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIHNob3J0T3V0KGZ1bmMpIHtcbiAgdmFyIGNvdW50ID0gMCxcbiAgICAgIGxhc3RDYWxsZWQgPSAwO1xuXG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RhbXAgPSBuYXRpdmVOb3coKSxcbiAgICAgICAgcmVtYWluaW5nID0gSE9UX1NQQU4gLSAoc3RhbXAgLSBsYXN0Q2FsbGVkKTtcblxuICAgIGxhc3RDYWxsZWQgPSBzdGFtcDtcbiAgICBpZiAocmVtYWluaW5nID4gMCkge1xuICAgICAgaWYgKCsrY291bnQgPj0gSE9UX0NPVU5UKSB7XG4gICAgICAgIHJldHVybiBhcmd1bWVudHNbMF07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvdW50ID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmMuYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNob3J0T3V0O1xuIiwidmFyIGVxID0gcmVxdWlyZSgnLi9lcScpLFxuICAgIGlzQXJyYXlMaWtlID0gcmVxdWlyZSgnLi9pc0FycmF5TGlrZScpLFxuICAgIGlzSW5kZXggPSByZXF1aXJlKCcuL19pc0luZGV4JyksXG4gICAgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0Jyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIHRoZSBnaXZlbiBhcmd1bWVudHMgYXJlIGZyb20gYW4gaXRlcmF0ZWUgY2FsbC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIHZhbHVlIGFyZ3VtZW50LlxuICogQHBhcmFtIHsqfSBpbmRleCBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIGluZGV4IG9yIGtleSBhcmd1bWVudC5cbiAqIEBwYXJhbSB7Kn0gb2JqZWN0IFRoZSBwb3RlbnRpYWwgaXRlcmF0ZWUgb2JqZWN0IGFyZ3VtZW50LlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBhcmd1bWVudHMgYXJlIGZyb20gYW4gaXRlcmF0ZWUgY2FsbCxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzSXRlcmF0ZWVDYWxsKHZhbHVlLCBpbmRleCwgb2JqZWN0KSB7XG4gIGlmICghaXNPYmplY3Qob2JqZWN0KSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgdHlwZSA9IHR5cGVvZiBpbmRleDtcbiAgaWYgKHR5cGUgPT0gJ251bWJlcidcbiAgICAgICAgPyAoaXNBcnJheUxpa2Uob2JqZWN0KSAmJiBpc0luZGV4KGluZGV4LCBvYmplY3QubGVuZ3RoKSlcbiAgICAgICAgOiAodHlwZSA9PSAnc3RyaW5nJyAmJiBpbmRleCBpbiBvYmplY3QpXG4gICAgICApIHtcbiAgICByZXR1cm4gZXEob2JqZWN0W2luZGV4XSwgdmFsdWUpO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0l0ZXJhdGVlQ2FsbDtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpO1xuICBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzcztcbiAgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbn0iLCJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuZXhwb3J0IHZhciBzdWJzY3JpcHRpb25TaGFwZSA9IFByb3BUeXBlcy5zaGFwZSh7XG4gIHRyeVN1YnNjcmliZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgdHJ5VW5zdWJzY3JpYmU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIG5vdGlmeU5lc3RlZFN1YnM6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGlzU3Vic2NyaWJlZDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxufSk7XG5leHBvcnQgdmFyIHN0b3JlU2hhcGUgPSBQcm9wVHlwZXMuc2hhcGUoe1xuICBzdWJzY3JpYmU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGRpc3BhdGNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBnZXRTdGF0ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxufSk7IiwiaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50LCBDaGlsZHJlbiB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBzdG9yZVNoYXBlLCBzdWJzY3JpcHRpb25TaGFwZSB9IGZyb20gJy4uL3V0aWxzL1Byb3BUeXBlcyc7XG5pbXBvcnQgd2FybmluZyBmcm9tICcuLi91dGlscy93YXJuaW5nJztcbnZhciBwcmVmaXhVbnNhZmVMaWZlY3ljbGVNZXRob2RzID0gdHlwZW9mIFJlYWN0LmZvcndhcmRSZWYgIT09IFwidW5kZWZpbmVkXCI7XG52YXIgZGlkV2FybkFib3V0UmVjZWl2aW5nU3RvcmUgPSBmYWxzZTtcblxuZnVuY3Rpb24gd2FybkFib3V0UmVjZWl2aW5nU3RvcmUoKSB7XG4gIGlmIChkaWRXYXJuQWJvdXRSZWNlaXZpbmdTdG9yZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGRpZFdhcm5BYm91dFJlY2VpdmluZ1N0b3JlID0gdHJ1ZTtcbiAgd2FybmluZygnPFByb3ZpZGVyPiBkb2VzIG5vdCBzdXBwb3J0IGNoYW5naW5nIGBzdG9yZWAgb24gdGhlIGZseS4gJyArICdJdCBpcyBtb3N0IGxpa2VseSB0aGF0IHlvdSBzZWUgdGhpcyBlcnJvciBiZWNhdXNlIHlvdSB1cGRhdGVkIHRvICcgKyAnUmVkdXggMi54IGFuZCBSZWFjdCBSZWR1eCAyLnggd2hpY2ggbm8gbG9uZ2VyIGhvdCByZWxvYWQgcmVkdWNlcnMgJyArICdhdXRvbWF0aWNhbGx5LiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlZHV4anMvcmVhY3QtcmVkdXgvcmVsZWFzZXMvJyArICd0YWcvdjIuMC4wIGZvciB0aGUgbWlncmF0aW9uIGluc3RydWN0aW9ucy4nKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVByb3ZpZGVyKHN0b3JlS2V5KSB7XG4gIHZhciBfUHJvdmlkZXIkY2hpbGRDb250ZXg7XG5cbiAgaWYgKHN0b3JlS2V5ID09PSB2b2lkIDApIHtcbiAgICBzdG9yZUtleSA9ICdzdG9yZSc7XG4gIH1cblxuICB2YXIgc3Vic2NyaXB0aW9uS2V5ID0gc3RvcmVLZXkgKyBcIlN1YnNjcmlwdGlvblwiO1xuXG4gIHZhciBQcm92aWRlciA9XG4gIC8qI19fUFVSRV9fKi9cbiAgZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHNMb29zZShQcm92aWRlciwgX0NvbXBvbmVudCk7XG5cbiAgICB2YXIgX3Byb3RvID0gUHJvdmlkZXIucHJvdG90eXBlO1xuXG4gICAgX3Byb3RvLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICByZXR1cm4gX3JlZiA9IHt9LCBfcmVmW3N0b3JlS2V5XSA9IHRoaXNbc3RvcmVLZXldLCBfcmVmW3N1YnNjcmlwdGlvbktleV0gPSBudWxsLCBfcmVmO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBQcm92aWRlcihwcm9wcywgY29udGV4dCkge1xuICAgICAgdmFyIF90aGlzO1xuXG4gICAgICBfdGhpcyA9IF9Db21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkgfHwgdGhpcztcbiAgICAgIF90aGlzW3N0b3JlS2V5XSA9IHByb3BzLnN0b3JlO1xuICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gQ2hpbGRyZW4ub25seSh0aGlzLnByb3BzLmNoaWxkcmVuKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFByb3ZpZGVyO1xuICB9KENvbXBvbmVudCk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBVc2UgVU5TQUZFXyBldmVudCBuYW1lIHdoZXJlIHN1cHBvcnRlZFxuICAgIHZhciBldmVudE5hbWUgPSBwcmVmaXhVbnNhZmVMaWZlY3ljbGVNZXRob2RzID8gJ1VOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJyA6ICdjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJztcblxuICAgIFByb3ZpZGVyLnByb3RvdHlwZVtldmVudE5hbWVdID0gZnVuY3Rpb24gKG5leHRQcm9wcykge1xuICAgICAgaWYgKHRoaXNbc3RvcmVLZXldICE9PSBuZXh0UHJvcHMuc3RvcmUpIHtcbiAgICAgICAgd2FybkFib3V0UmVjZWl2aW5nU3RvcmUoKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgUHJvdmlkZXIucHJvcFR5cGVzID0ge1xuICAgIHN0b3JlOiBzdG9yZVNoYXBlLmlzUmVxdWlyZWQsXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5lbGVtZW50LmlzUmVxdWlyZWRcbiAgfTtcbiAgUHJvdmlkZXIuY2hpbGRDb250ZXh0VHlwZXMgPSAoX1Byb3ZpZGVyJGNoaWxkQ29udGV4ID0ge30sIF9Qcm92aWRlciRjaGlsZENvbnRleFtzdG9yZUtleV0gPSBzdG9yZVNoYXBlLmlzUmVxdWlyZWQsIF9Qcm92aWRlciRjaGlsZENvbnRleFtzdWJzY3JpcHRpb25LZXldID0gc3Vic2NyaXB0aW9uU2hhcGUsIF9Qcm92aWRlciRjaGlsZENvbnRleCk7XG4gIHJldHVybiBQcm92aWRlcjtcbn1cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVByb3ZpZGVyKCk7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7XG4gIGlmIChzZWxmID09PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1cblxuICByZXR1cm4gc2VsZjtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufSIsIi8vIGVuY2Fwc3VsYXRlcyB0aGUgc3Vic2NyaXB0aW9uIGxvZ2ljIGZvciBjb25uZWN0aW5nIGEgY29tcG9uZW50IHRvIHRoZSByZWR1eCBzdG9yZSwgYXNcbi8vIHdlbGwgYXMgbmVzdGluZyBzdWJzY3JpcHRpb25zIG9mIGRlc2NlbmRhbnQgY29tcG9uZW50cywgc28gdGhhdCB3ZSBjYW4gZW5zdXJlIHRoZVxuLy8gYW5jZXN0b3IgY29tcG9uZW50cyByZS1yZW5kZXIgYmVmb3JlIGRlc2NlbmRhbnRzXG52YXIgQ0xFQVJFRCA9IG51bGw7XG52YXIgbnVsbExpc3RlbmVycyA9IHtcbiAgbm90aWZ5OiBmdW5jdGlvbiBub3RpZnkoKSB7fVxufTtcblxuZnVuY3Rpb24gY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uKCkge1xuICAvLyB0aGUgY3VycmVudC9uZXh0IHBhdHRlcm4gaXMgY29waWVkIGZyb20gcmVkdXgncyBjcmVhdGVTdG9yZSBjb2RlLlxuICAvLyBUT0RPOiByZWZhY3RvcitleHBvc2UgdGhhdCBjb2RlIHRvIGJlIHJldXNhYmxlIGhlcmU/XG4gIHZhciBjdXJyZW50ID0gW107XG4gIHZhciBuZXh0ID0gW107XG4gIHJldHVybiB7XG4gICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgbmV4dCA9IENMRUFSRUQ7XG4gICAgICBjdXJyZW50ID0gQ0xFQVJFRDtcbiAgICB9LFxuICAgIG5vdGlmeTogZnVuY3Rpb24gbm90aWZ5KCkge1xuICAgICAgdmFyIGxpc3RlbmVycyA9IGN1cnJlbnQgPSBuZXh0O1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsaXN0ZW5lcnNbaV0oKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfSxcbiAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uIHN1YnNjcmliZShsaXN0ZW5lcikge1xuICAgICAgdmFyIGlzU3Vic2NyaWJlZCA9IHRydWU7XG4gICAgICBpZiAobmV4dCA9PT0gY3VycmVudCkgbmV4dCA9IGN1cnJlbnQuc2xpY2UoKTtcbiAgICAgIG5leHQucHVzaChsaXN0ZW5lcik7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gdW5zdWJzY3JpYmUoKSB7XG4gICAgICAgIGlmICghaXNTdWJzY3JpYmVkIHx8IGN1cnJlbnQgPT09IENMRUFSRUQpIHJldHVybjtcbiAgICAgICAgaXNTdWJzY3JpYmVkID0gZmFsc2U7XG4gICAgICAgIGlmIChuZXh0ID09PSBjdXJyZW50KSBuZXh0ID0gY3VycmVudC5zbGljZSgpO1xuICAgICAgICBuZXh0LnNwbGljZShuZXh0LmluZGV4T2YobGlzdGVuZXIpLCAxKTtcbiAgICAgIH07XG4gICAgfVxuICB9O1xufVxuXG52YXIgU3Vic2NyaXB0aW9uID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU3Vic2NyaXB0aW9uKHN0b3JlLCBwYXJlbnRTdWIsIG9uU3RhdGVDaGFuZ2UpIHtcbiAgICB0aGlzLnN0b3JlID0gc3RvcmU7XG4gICAgdGhpcy5wYXJlbnRTdWIgPSBwYXJlbnRTdWI7XG4gICAgdGhpcy5vblN0YXRlQ2hhbmdlID0gb25TdGF0ZUNoYW5nZTtcbiAgICB0aGlzLnVuc3Vic2NyaWJlID0gbnVsbDtcbiAgICB0aGlzLmxpc3RlbmVycyA9IG51bGxMaXN0ZW5lcnM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gU3Vic2NyaXB0aW9uLnByb3RvdHlwZTtcblxuICBfcHJvdG8uYWRkTmVzdGVkU3ViID0gZnVuY3Rpb24gYWRkTmVzdGVkU3ViKGxpc3RlbmVyKSB7XG4gICAgdGhpcy50cnlTdWJzY3JpYmUoKTtcbiAgICByZXR1cm4gdGhpcy5saXN0ZW5lcnMuc3Vic2NyaWJlKGxpc3RlbmVyKTtcbiAgfTtcblxuICBfcHJvdG8ubm90aWZ5TmVzdGVkU3VicyA9IGZ1bmN0aW9uIG5vdGlmeU5lc3RlZFN1YnMoKSB7XG4gICAgdGhpcy5saXN0ZW5lcnMubm90aWZ5KCk7XG4gIH07XG5cbiAgX3Byb3RvLmlzU3Vic2NyaWJlZCA9IGZ1bmN0aW9uIGlzU3Vic2NyaWJlZCgpIHtcbiAgICByZXR1cm4gQm9vbGVhbih0aGlzLnVuc3Vic2NyaWJlKTtcbiAgfTtcblxuICBfcHJvdG8udHJ5U3Vic2NyaWJlID0gZnVuY3Rpb24gdHJ5U3Vic2NyaWJlKCkge1xuICAgIGlmICghdGhpcy51bnN1YnNjcmliZSkge1xuICAgICAgdGhpcy51bnN1YnNjcmliZSA9IHRoaXMucGFyZW50U3ViID8gdGhpcy5wYXJlbnRTdWIuYWRkTmVzdGVkU3ViKHRoaXMub25TdGF0ZUNoYW5nZSkgOiB0aGlzLnN0b3JlLnN1YnNjcmliZSh0aGlzLm9uU3RhdGVDaGFuZ2UpO1xuICAgICAgdGhpcy5saXN0ZW5lcnMgPSBjcmVhdGVMaXN0ZW5lckNvbGxlY3Rpb24oKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnRyeVVuc3Vic2NyaWJlID0gZnVuY3Rpb24gdHJ5VW5zdWJzY3JpYmUoKSB7XG4gICAgaWYgKHRoaXMudW5zdWJzY3JpYmUpIHtcbiAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgIHRoaXMudW5zdWJzY3JpYmUgPSBudWxsO1xuICAgICAgdGhpcy5saXN0ZW5lcnMuY2xlYXIoKTtcbiAgICAgIHRoaXMubGlzdGVuZXJzID0gbnVsbExpc3RlbmVycztcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFN1YnNjcmlwdGlvbjtcbn0oKTtcblxuZXhwb3J0IHsgU3Vic2NyaXB0aW9uIGFzIGRlZmF1bHQgfTsiLCJpbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgaG9pc3RTdGF0aWNzIGZyb20gJ2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQsIGNyZWF0ZUVsZW1lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBpc1ZhbGlkRWxlbWVudFR5cGUgfSBmcm9tICdyZWFjdC1pcyc7XG5pbXBvcnQgU3Vic2NyaXB0aW9uIGZyb20gJy4uL3V0aWxzL1N1YnNjcmlwdGlvbic7XG5pbXBvcnQgeyBzdG9yZVNoYXBlLCBzdWJzY3JpcHRpb25TaGFwZSB9IGZyb20gJy4uL3V0aWxzL1Byb3BUeXBlcyc7XG52YXIgcHJlZml4VW5zYWZlTGlmZWN5Y2xlTWV0aG9kcyA9IHR5cGVvZiBSZWFjdC5mb3J3YXJkUmVmICE9PSBcInVuZGVmaW5lZFwiO1xudmFyIGhvdFJlbG9hZGluZ1ZlcnNpb24gPSAwO1xudmFyIGR1bW15U3RhdGUgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbmZ1bmN0aW9uIG1ha2VTZWxlY3RvclN0YXRlZnVsKHNvdXJjZVNlbGVjdG9yLCBzdG9yZSkge1xuICAvLyB3cmFwIHRoZSBzZWxlY3RvciBpbiBhbiBvYmplY3QgdGhhdCB0cmFja3MgaXRzIHJlc3VsdHMgYmV0d2VlbiBydW5zLlxuICB2YXIgc2VsZWN0b3IgPSB7XG4gICAgcnVuOiBmdW5jdGlvbiBydW5Db21wb25lbnRTZWxlY3Rvcihwcm9wcykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIG5leHRQcm9wcyA9IHNvdXJjZVNlbGVjdG9yKHN0b3JlLmdldFN0YXRlKCksIHByb3BzKTtcblxuICAgICAgICBpZiAobmV4dFByb3BzICE9PSBzZWxlY3Rvci5wcm9wcyB8fCBzZWxlY3Rvci5lcnJvcikge1xuICAgICAgICAgIHNlbGVjdG9yLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IHRydWU7XG4gICAgICAgICAgc2VsZWN0b3IucHJvcHMgPSBuZXh0UHJvcHM7XG4gICAgICAgICAgc2VsZWN0b3IuZXJyb3IgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBzZWxlY3Rvci5zaG91bGRDb21wb25lbnRVcGRhdGUgPSB0cnVlO1xuICAgICAgICBzZWxlY3Rvci5lcnJvciA9IGVycm9yO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHNlbGVjdG9yO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb25uZWN0QWR2YW5jZWQoXG4vKlxuICBzZWxlY3RvckZhY3RvcnkgaXMgYSBmdW5jIHRoYXQgaXMgcmVzcG9uc2libGUgZm9yIHJldHVybmluZyB0aGUgc2VsZWN0b3IgZnVuY3Rpb24gdXNlZCB0b1xuICBjb21wdXRlIG5ldyBwcm9wcyBmcm9tIHN0YXRlLCBwcm9wcywgYW5kIGRpc3BhdGNoLiBGb3IgZXhhbXBsZTpcbiAgICAgZXhwb3J0IGRlZmF1bHQgY29ubmVjdEFkdmFuY2VkKChkaXNwYXRjaCwgb3B0aW9ucykgPT4gKHN0YXRlLCBwcm9wcykgPT4gKHtcbiAgICAgIHRoaW5nOiBzdGF0ZS50aGluZ3NbcHJvcHMudGhpbmdJZF0sXG4gICAgICBzYXZlVGhpbmc6IGZpZWxkcyA9PiBkaXNwYXRjaChhY3Rpb25DcmVhdG9ycy5zYXZlVGhpbmcocHJvcHMudGhpbmdJZCwgZmllbGRzKSksXG4gICAgfSkpKFlvdXJDb21wb25lbnQpXG4gICBBY2Nlc3MgdG8gZGlzcGF0Y2ggaXMgcHJvdmlkZWQgdG8gdGhlIGZhY3Rvcnkgc28gc2VsZWN0b3JGYWN0b3JpZXMgY2FuIGJpbmQgYWN0aW9uQ3JlYXRvcnNcbiAgb3V0c2lkZSBvZiB0aGVpciBzZWxlY3RvciBhcyBhbiBvcHRpbWl6YXRpb24uIE9wdGlvbnMgcGFzc2VkIHRvIGNvbm5lY3RBZHZhbmNlZCBhcmUgcGFzc2VkIHRvXG4gIHRoZSBzZWxlY3RvckZhY3RvcnksIGFsb25nIHdpdGggZGlzcGxheU5hbWUgYW5kIFdyYXBwZWRDb21wb25lbnQsIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQuXG4gICBOb3RlIHRoYXQgc2VsZWN0b3JGYWN0b3J5IGlzIHJlc3BvbnNpYmxlIGZvciBhbGwgY2FjaGluZy9tZW1vaXphdGlvbiBvZiBpbmJvdW5kIGFuZCBvdXRib3VuZFxuICBwcm9wcy4gRG8gbm90IHVzZSBjb25uZWN0QWR2YW5jZWQgZGlyZWN0bHkgd2l0aG91dCBtZW1vaXppbmcgcmVzdWx0cyBiZXR3ZWVuIGNhbGxzIHRvIHlvdXJcbiAgc2VsZWN0b3IsIG90aGVyd2lzZSB0aGUgQ29ubmVjdCBjb21wb25lbnQgd2lsbCByZS1yZW5kZXIgb24gZXZlcnkgc3RhdGUgb3IgcHJvcHMgY2hhbmdlLlxuKi9cbnNlbGVjdG9yRmFjdG9yeSwgLy8gb3B0aW9ucyBvYmplY3Q6XG5fcmVmKSB7XG4gIHZhciBfY29udGV4dFR5cGVzLCBfY2hpbGRDb250ZXh0VHlwZXM7XG5cbiAgaWYgKF9yZWYgPT09IHZvaWQgMCkge1xuICAgIF9yZWYgPSB7fTtcbiAgfVxuXG4gIHZhciBfcmVmMiA9IF9yZWYsXG4gICAgICBfcmVmMiRnZXREaXNwbGF5TmFtZSA9IF9yZWYyLmdldERpc3BsYXlOYW1lLFxuICAgICAgZ2V0RGlzcGxheU5hbWUgPSBfcmVmMiRnZXREaXNwbGF5TmFtZSA9PT0gdm9pZCAwID8gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gXCJDb25uZWN0QWR2YW5jZWQoXCIgKyBuYW1lICsgXCIpXCI7XG4gIH0gOiBfcmVmMiRnZXREaXNwbGF5TmFtZSxcbiAgICAgIF9yZWYyJG1ldGhvZE5hbWUgPSBfcmVmMi5tZXRob2ROYW1lLFxuICAgICAgbWV0aG9kTmFtZSA9IF9yZWYyJG1ldGhvZE5hbWUgPT09IHZvaWQgMCA/ICdjb25uZWN0QWR2YW5jZWQnIDogX3JlZjIkbWV0aG9kTmFtZSxcbiAgICAgIF9yZWYyJHJlbmRlckNvdW50UHJvcCA9IF9yZWYyLnJlbmRlckNvdW50UHJvcCxcbiAgICAgIHJlbmRlckNvdW50UHJvcCA9IF9yZWYyJHJlbmRlckNvdW50UHJvcCA9PT0gdm9pZCAwID8gdW5kZWZpbmVkIDogX3JlZjIkcmVuZGVyQ291bnRQcm9wLFxuICAgICAgX3JlZjIkc2hvdWxkSGFuZGxlU3RhID0gX3JlZjIuc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzLFxuICAgICAgc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzID0gX3JlZjIkc2hvdWxkSGFuZGxlU3RhID09PSB2b2lkIDAgPyB0cnVlIDogX3JlZjIkc2hvdWxkSGFuZGxlU3RhLFxuICAgICAgX3JlZjIkc3RvcmVLZXkgPSBfcmVmMi5zdG9yZUtleSxcbiAgICAgIHN0b3JlS2V5ID0gX3JlZjIkc3RvcmVLZXkgPT09IHZvaWQgMCA/ICdzdG9yZScgOiBfcmVmMiRzdG9yZUtleSxcbiAgICAgIF9yZWYyJHdpdGhSZWYgPSBfcmVmMi53aXRoUmVmLFxuICAgICAgd2l0aFJlZiA9IF9yZWYyJHdpdGhSZWYgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjIkd2l0aFJlZixcbiAgICAgIGNvbm5lY3RPcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjIsIFtcImdldERpc3BsYXlOYW1lXCIsIFwibWV0aG9kTmFtZVwiLCBcInJlbmRlckNvdW50UHJvcFwiLCBcInNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlc1wiLCBcInN0b3JlS2V5XCIsIFwid2l0aFJlZlwiXSk7XG5cbiAgdmFyIHN1YnNjcmlwdGlvbktleSA9IHN0b3JlS2V5ICsgJ1N1YnNjcmlwdGlvbic7XG4gIHZhciB2ZXJzaW9uID0gaG90UmVsb2FkaW5nVmVyc2lvbisrO1xuICB2YXIgY29udGV4dFR5cGVzID0gKF9jb250ZXh0VHlwZXMgPSB7fSwgX2NvbnRleHRUeXBlc1tzdG9yZUtleV0gPSBzdG9yZVNoYXBlLCBfY29udGV4dFR5cGVzW3N1YnNjcmlwdGlvbktleV0gPSBzdWJzY3JpcHRpb25TaGFwZSwgX2NvbnRleHRUeXBlcyk7XG4gIHZhciBjaGlsZENvbnRleHRUeXBlcyA9IChfY2hpbGRDb250ZXh0VHlwZXMgPSB7fSwgX2NoaWxkQ29udGV4dFR5cGVzW3N1YnNjcmlwdGlvbktleV0gPSBzdWJzY3JpcHRpb25TaGFwZSwgX2NoaWxkQ29udGV4dFR5cGVzKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXBXaXRoQ29ubmVjdChXcmFwcGVkQ29tcG9uZW50KSB7XG4gICAgaW52YXJpYW50KGlzVmFsaWRFbGVtZW50VHlwZShXcmFwcGVkQ29tcG9uZW50KSwgXCJZb3UgbXVzdCBwYXNzIGEgY29tcG9uZW50IHRvIHRoZSBmdW5jdGlvbiByZXR1cm5lZCBieSBcIiArIChtZXRob2ROYW1lICsgXCIuIEluc3RlYWQgcmVjZWl2ZWQgXCIgKyBKU09OLnN0cmluZ2lmeShXcmFwcGVkQ29tcG9uZW50KSkpO1xuICAgIHZhciB3cmFwcGVkQ29tcG9uZW50TmFtZSA9IFdyYXBwZWRDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgV3JhcHBlZENvbXBvbmVudC5uYW1lIHx8ICdDb21wb25lbnQnO1xuICAgIHZhciBkaXNwbGF5TmFtZSA9IGdldERpc3BsYXlOYW1lKHdyYXBwZWRDb21wb25lbnROYW1lKTtcblxuICAgIHZhciBzZWxlY3RvckZhY3RvcnlPcHRpb25zID0gX2V4dGVuZHMoe30sIGNvbm5lY3RPcHRpb25zLCB7XG4gICAgICBnZXREaXNwbGF5TmFtZTogZ2V0RGlzcGxheU5hbWUsXG4gICAgICBtZXRob2ROYW1lOiBtZXRob2ROYW1lLFxuICAgICAgcmVuZGVyQ291bnRQcm9wOiByZW5kZXJDb3VudFByb3AsXG4gICAgICBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXM6IHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyxcbiAgICAgIHN0b3JlS2V5OiBzdG9yZUtleSxcbiAgICAgIHdpdGhSZWY6IHdpdGhSZWYsXG4gICAgICBkaXNwbGF5TmFtZTogZGlzcGxheU5hbWUsXG4gICAgICB3cmFwcGVkQ29tcG9uZW50TmFtZTogd3JhcHBlZENvbXBvbmVudE5hbWUsXG4gICAgICBXcmFwcGVkQ29tcG9uZW50OiBXcmFwcGVkQ29tcG9uZW50IC8vIFRPRE8gQWN0dWFsbHkgZml4IG91ciB1c2Ugb2YgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc1xuXG4gICAgICAvKiBlc2xpbnQtZGlzYWJsZSByZWFjdC9uby1kZXByZWNhdGVkICovXG5cbiAgICB9KTtcblxuICAgIHZhciBDb25uZWN0ID1cbiAgICAvKiNfX1BVUkVfXyovXG4gICAgZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgICAgIF9pbmhlcml0c0xvb3NlKENvbm5lY3QsIF9Db21wb25lbnQpO1xuXG4gICAgICBmdW5jdGlvbiBDb25uZWN0KHByb3BzLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBfdGhpcztcblxuICAgICAgICBfdGhpcyA9IF9Db21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkgfHwgdGhpcztcbiAgICAgICAgX3RoaXMudmVyc2lvbiA9IHZlcnNpb247XG4gICAgICAgIF90aGlzLnN0YXRlID0ge307XG4gICAgICAgIF90aGlzLnJlbmRlckNvdW50ID0gMDtcbiAgICAgICAgX3RoaXMuc3RvcmUgPSBwcm9wc1tzdG9yZUtleV0gfHwgY29udGV4dFtzdG9yZUtleV07XG4gICAgICAgIF90aGlzLnByb3BzTW9kZSA9IEJvb2xlYW4ocHJvcHNbc3RvcmVLZXldKTtcbiAgICAgICAgX3RoaXMuc2V0V3JhcHBlZEluc3RhbmNlID0gX3RoaXMuc2V0V3JhcHBlZEluc3RhbmNlLmJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSkpO1xuICAgICAgICBpbnZhcmlhbnQoX3RoaXMuc3RvcmUsIFwiQ291bGQgbm90IGZpbmQgXFxcIlwiICsgc3RvcmVLZXkgKyBcIlxcXCIgaW4gZWl0aGVyIHRoZSBjb250ZXh0IG9yIHByb3BzIG9mIFwiICsgKFwiXFxcIlwiICsgZGlzcGxheU5hbWUgKyBcIlxcXCIuIEVpdGhlciB3cmFwIHRoZSByb290IGNvbXBvbmVudCBpbiBhIDxQcm92aWRlcj4sIFwiKSArIChcIm9yIGV4cGxpY2l0bHkgcGFzcyBcXFwiXCIgKyBzdG9yZUtleSArIFwiXFxcIiBhcyBhIHByb3AgdG8gXFxcIlwiICsgZGlzcGxheU5hbWUgKyBcIlxcXCIuXCIpKTtcblxuICAgICAgICBfdGhpcy5pbml0U2VsZWN0b3IoKTtcblxuICAgICAgICBfdGhpcy5pbml0U3Vic2NyaXB0aW9uKCk7XG5cbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgICAgfVxuXG4gICAgICB2YXIgX3Byb3RvID0gQ29ubmVjdC5wcm90b3R5cGU7XG5cbiAgICAgIF9wcm90by5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgICAgIHZhciBfcmVmMztcblxuICAgICAgICAvLyBJZiB0aGlzIGNvbXBvbmVudCByZWNlaXZlZCBzdG9yZSBmcm9tIHByb3BzLCBpdHMgc3Vic2NyaXB0aW9uIHNob3VsZCBiZSB0cmFuc3BhcmVudFxuICAgICAgICAvLyB0byBhbnkgZGVzY2VuZGFudHMgcmVjZWl2aW5nIHN0b3JlK3N1YnNjcmlwdGlvbiBmcm9tIGNvbnRleHQ7IGl0IHBhc3NlcyBhbG9uZ1xuICAgICAgICAvLyBzdWJzY3JpcHRpb24gcGFzc2VkIHRvIGl0LiBPdGhlcndpc2UsIGl0IHNoYWRvd3MgdGhlIHBhcmVudCBzdWJzY3JpcHRpb24sIHdoaWNoIGFsbG93c1xuICAgICAgICAvLyBDb25uZWN0IHRvIGNvbnRyb2wgb3JkZXJpbmcgb2Ygbm90aWZpY2F0aW9ucyB0byBmbG93IHRvcC1kb3duLlxuICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5wcm9wc01vZGUgPyBudWxsIDogdGhpcy5zdWJzY3JpcHRpb247XG4gICAgICAgIHJldHVybiBfcmVmMyA9IHt9LCBfcmVmM1tzdWJzY3JpcHRpb25LZXldID0gc3Vic2NyaXB0aW9uIHx8IHRoaXMuY29udGV4dFtzdWJzY3JpcHRpb25LZXldLCBfcmVmMztcbiAgICAgIH07XG5cbiAgICAgIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICBpZiAoIXNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcykgcmV0dXJuOyAvLyBjb21wb25lbnRXaWxsTW91bnQgZmlyZXMgZHVyaW5nIHNlcnZlciBzaWRlIHJlbmRlcmluZywgYnV0IGNvbXBvbmVudERpZE1vdW50IGFuZFxuICAgICAgICAvLyBjb21wb25lbnRXaWxsVW5tb3VudCBkbyBub3QuIEJlY2F1c2Ugb2YgdGhpcywgdHJ5U3Vic2NyaWJlIGhhcHBlbnMgZHVyaW5nIC4uLmRpZE1vdW50LlxuICAgICAgICAvLyBPdGhlcndpc2UsIHVuc3Vic2NyaXB0aW9uIHdvdWxkIG5ldmVyIHRha2UgcGxhY2UgZHVyaW5nIFNTUiwgY2F1c2luZyBhIG1lbW9yeSBsZWFrLlxuICAgICAgICAvLyBUbyBoYW5kbGUgdGhlIGNhc2Ugd2hlcmUgYSBjaGlsZCBjb21wb25lbnQgbWF5IGhhdmUgdHJpZ2dlcmVkIGEgc3RhdGUgY2hhbmdlIGJ5XG4gICAgICAgIC8vIGRpc3BhdGNoaW5nIGFuIGFjdGlvbiBpbiBpdHMgY29tcG9uZW50V2lsbE1vdW50LCB3ZSBoYXZlIHRvIHJlLXJ1biB0aGUgc2VsZWN0IGFuZCBtYXliZVxuICAgICAgICAvLyByZS1yZW5kZXIuXG5cbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb24udHJ5U3Vic2NyaWJlKCk7XG4gICAgICAgIHRoaXMuc2VsZWN0b3IucnVuKHRoaXMucHJvcHMpO1xuICAgICAgICBpZiAodGhpcy5zZWxlY3Rvci5zaG91bGRDb21wb25lbnRVcGRhdGUpIHRoaXMuZm9yY2VVcGRhdGUoKTtcbiAgICAgIH07IC8vIE5vdGU6IHRoaXMgaXMgcmVuYW1lZCBiZWxvdyB0byB0aGUgVU5TQUZFXyB2ZXJzaW9uIGluIFJlYWN0ID49MTYuMy4wXG5cblxuICAgICAgX3Byb3RvLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgICB0aGlzLnNlbGVjdG9yLnJ1bihuZXh0UHJvcHMpO1xuICAgICAgfTtcblxuICAgICAgX3Byb3RvLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IGZ1bmN0aW9uIHNob3VsZENvbXBvbmVudFVwZGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0b3Iuc2hvdWxkQ29tcG9uZW50VXBkYXRlO1xuICAgICAgfTtcblxuICAgICAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICAgIGlmICh0aGlzLnN1YnNjcmlwdGlvbikgdGhpcy5zdWJzY3JpcHRpb24udHJ5VW5zdWJzY3JpYmUoKTtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb24gPSBudWxsO1xuICAgICAgICB0aGlzLm5vdGlmeU5lc3RlZFN1YnMgPSBub29wO1xuICAgICAgICB0aGlzLnN0b3JlID0gbnVsbDtcbiAgICAgICAgdGhpcy5zZWxlY3Rvci5ydW4gPSBub29wO1xuICAgICAgICB0aGlzLnNlbGVjdG9yLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IGZhbHNlO1xuICAgICAgfTtcblxuICAgICAgX3Byb3RvLmdldFdyYXBwZWRJbnN0YW5jZSA9IGZ1bmN0aW9uIGdldFdyYXBwZWRJbnN0YW5jZSgpIHtcbiAgICAgICAgaW52YXJpYW50KHdpdGhSZWYsIFwiVG8gYWNjZXNzIHRoZSB3cmFwcGVkIGluc3RhbmNlLCB5b3UgbmVlZCB0byBzcGVjaWZ5IFwiICsgKFwieyB3aXRoUmVmOiB0cnVlIH0gaW4gdGhlIG9wdGlvbnMgYXJndW1lbnQgb2YgdGhlIFwiICsgbWV0aG9kTmFtZSArIFwiKCkgY2FsbC5cIikpO1xuICAgICAgICByZXR1cm4gdGhpcy53cmFwcGVkSW5zdGFuY2U7XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8uc2V0V3JhcHBlZEluc3RhbmNlID0gZnVuY3Rpb24gc2V0V3JhcHBlZEluc3RhbmNlKHJlZikge1xuICAgICAgICB0aGlzLndyYXBwZWRJbnN0YW5jZSA9IHJlZjtcbiAgICAgIH07XG5cbiAgICAgIF9wcm90by5pbml0U2VsZWN0b3IgPSBmdW5jdGlvbiBpbml0U2VsZWN0b3IoKSB7XG4gICAgICAgIHZhciBzb3VyY2VTZWxlY3RvciA9IHNlbGVjdG9yRmFjdG9yeSh0aGlzLnN0b3JlLmRpc3BhdGNoLCBzZWxlY3RvckZhY3RvcnlPcHRpb25zKTtcbiAgICAgICAgdGhpcy5zZWxlY3RvciA9IG1ha2VTZWxlY3RvclN0YXRlZnVsKHNvdXJjZVNlbGVjdG9yLCB0aGlzLnN0b3JlKTtcbiAgICAgICAgdGhpcy5zZWxlY3Rvci5ydW4odGhpcy5wcm9wcyk7XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8uaW5pdFN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uIGluaXRTdWJzY3JpcHRpb24oKSB7XG4gICAgICAgIGlmICghc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzKSByZXR1cm47IC8vIHBhcmVudFN1YidzIHNvdXJjZSBzaG91bGQgbWF0Y2ggd2hlcmUgc3RvcmUgY2FtZSBmcm9tOiBwcm9wcyB2cy4gY29udGV4dC4gQSBjb21wb25lbnRcbiAgICAgICAgLy8gY29ubmVjdGVkIHRvIHRoZSBzdG9yZSB2aWEgcHJvcHMgc2hvdWxkbid0IHVzZSBzdWJzY3JpcHRpb24gZnJvbSBjb250ZXh0LCBvciB2aWNlIHZlcnNhLlxuXG4gICAgICAgIHZhciBwYXJlbnRTdWIgPSAodGhpcy5wcm9wc01vZGUgPyB0aGlzLnByb3BzIDogdGhpcy5jb250ZXh0KVtzdWJzY3JpcHRpb25LZXldO1xuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb24odGhpcy5zdG9yZSwgcGFyZW50U3ViLCB0aGlzLm9uU3RhdGVDaGFuZ2UuYmluZCh0aGlzKSk7IC8vIGBub3RpZnlOZXN0ZWRTdWJzYCBpcyBkdXBsaWNhdGVkIHRvIGhhbmRsZSB0aGUgY2FzZSB3aGVyZSB0aGUgY29tcG9uZW50IGlzIHVubW91bnRlZCBpblxuICAgICAgICAvLyB0aGUgbWlkZGxlIG9mIHRoZSBub3RpZmljYXRpb24gbG9vcCwgd2hlcmUgYHRoaXMuc3Vic2NyaXB0aW9uYCB3aWxsIHRoZW4gYmUgbnVsbC4gQW5cbiAgICAgICAgLy8gZXh0cmEgbnVsbCBjaGVjayBldmVyeSBjaGFuZ2UgY2FuIGJlIGF2b2lkZWQgYnkgY29weWluZyB0aGUgbWV0aG9kIG9udG8gYHRoaXNgIGFuZCB0aGVuXG4gICAgICAgIC8vIHJlcGxhY2luZyBpdCB3aXRoIGEgbm8tb3Agb24gdW5tb3VudC4gVGhpcyBjYW4gcHJvYmFibHkgYmUgYXZvaWRlZCBpZiBTdWJzY3JpcHRpb24nc1xuICAgICAgICAvLyBsaXN0ZW5lcnMgbG9naWMgaXMgY2hhbmdlZCB0byBub3QgY2FsbCBsaXN0ZW5lcnMgdGhhdCBoYXZlIGJlZW4gdW5zdWJzY3JpYmVkIGluIHRoZVxuICAgICAgICAvLyBtaWRkbGUgb2YgdGhlIG5vdGlmaWNhdGlvbiBsb29wLlxuXG4gICAgICAgIHRoaXMubm90aWZ5TmVzdGVkU3VicyA9IHRoaXMuc3Vic2NyaXB0aW9uLm5vdGlmeU5lc3RlZFN1YnMuYmluZCh0aGlzLnN1YnNjcmlwdGlvbik7XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8ub25TdGF0ZUNoYW5nZSA9IGZ1bmN0aW9uIG9uU3RhdGVDaGFuZ2UoKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0b3IucnVuKHRoaXMucHJvcHMpO1xuXG4gICAgICAgIGlmICghdGhpcy5zZWxlY3Rvci5zaG91bGRDb21wb25lbnRVcGRhdGUpIHtcbiAgICAgICAgICB0aGlzLm5vdGlmeU5lc3RlZFN1YnMoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmNvbXBvbmVudERpZFVwZGF0ZSA9IHRoaXMubm90aWZ5TmVzdGVkU3Vic09uQ29tcG9uZW50RGlkVXBkYXRlO1xuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoZHVtbXlTdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIF9wcm90by5ub3RpZnlOZXN0ZWRTdWJzT25Db21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBub3RpZnlOZXN0ZWRTdWJzT25Db21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgICAgIC8vIGBjb21wb25lbnREaWRVcGRhdGVgIGlzIGNvbmRpdGlvbmFsbHkgaW1wbGVtZW50ZWQgd2hlbiBgb25TdGF0ZUNoYW5nZWAgZGV0ZXJtaW5lcyBpdFxuICAgICAgICAvLyBuZWVkcyB0byBub3RpZnkgbmVzdGVkIHN1YnMuIE9uY2UgY2FsbGVkLCBpdCB1bmltcGxlbWVudHMgaXRzZWxmIHVudGlsIGZ1cnRoZXIgc3RhdGVcbiAgICAgICAgLy8gY2hhbmdlcyBvY2N1ci4gRG9pbmcgaXQgdGhpcyB3YXkgdnMgaGF2aW5nIGEgcGVybWFuZW50IGBjb21wb25lbnREaWRVcGRhdGVgIHRoYXQgZG9lc1xuICAgICAgICAvLyBhIGJvb2xlYW4gY2hlY2sgZXZlcnkgdGltZSBhdm9pZHMgYW4gZXh0cmEgbWV0aG9kIGNhbGwgbW9zdCBvZiB0aGUgdGltZSwgcmVzdWx0aW5nXG4gICAgICAgIC8vIGluIHNvbWUgcGVyZiBib29zdC5cbiAgICAgICAgdGhpcy5jb21wb25lbnREaWRVcGRhdGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMubm90aWZ5TmVzdGVkU3VicygpO1xuICAgICAgfTtcblxuICAgICAgX3Byb3RvLmlzU3Vic2NyaWJlZCA9IGZ1bmN0aW9uIGlzU3Vic2NyaWJlZCgpIHtcbiAgICAgICAgcmV0dXJuIEJvb2xlYW4odGhpcy5zdWJzY3JpcHRpb24pICYmIHRoaXMuc3Vic2NyaXB0aW9uLmlzU3Vic2NyaWJlZCgpO1xuICAgICAgfTtcblxuICAgICAgX3Byb3RvLmFkZEV4dHJhUHJvcHMgPSBmdW5jdGlvbiBhZGRFeHRyYVByb3BzKHByb3BzKSB7XG4gICAgICAgIGlmICghd2l0aFJlZiAmJiAhcmVuZGVyQ291bnRQcm9wICYmICEodGhpcy5wcm9wc01vZGUgJiYgdGhpcy5zdWJzY3JpcHRpb24pKSByZXR1cm4gcHJvcHM7IC8vIG1ha2UgYSBzaGFsbG93IGNvcHkgc28gdGhhdCBmaWVsZHMgYWRkZWQgZG9uJ3QgbGVhayB0byB0aGUgb3JpZ2luYWwgc2VsZWN0b3IuXG4gICAgICAgIC8vIHRoaXMgaXMgZXNwZWNpYWxseSBpbXBvcnRhbnQgZm9yICdyZWYnIHNpbmNlIHRoYXQncyBhIHJlZmVyZW5jZSBiYWNrIHRvIHRoZSBjb21wb25lbnRcbiAgICAgICAgLy8gaW5zdGFuY2UuIGEgc2luZ2xldG9uIG1lbW9pemVkIHNlbGVjdG9yIHdvdWxkIHRoZW4gYmUgaG9sZGluZyBhIHJlZmVyZW5jZSB0byB0aGVcbiAgICAgICAgLy8gaW5zdGFuY2UsIHByZXZlbnRpbmcgdGhlIGluc3RhbmNlIGZyb20gYmVpbmcgZ2FyYmFnZSBjb2xsZWN0ZWQsIGFuZCB0aGF0IHdvdWxkIGJlIGJhZFxuXG4gICAgICAgIHZhciB3aXRoRXh0cmFzID0gX2V4dGVuZHMoe30sIHByb3BzKTtcblxuICAgICAgICBpZiAod2l0aFJlZikgd2l0aEV4dHJhcy5yZWYgPSB0aGlzLnNldFdyYXBwZWRJbnN0YW5jZTtcbiAgICAgICAgaWYgKHJlbmRlckNvdW50UHJvcCkgd2l0aEV4dHJhc1tyZW5kZXJDb3VudFByb3BdID0gdGhpcy5yZW5kZXJDb3VudCsrO1xuICAgICAgICBpZiAodGhpcy5wcm9wc01vZGUgJiYgdGhpcy5zdWJzY3JpcHRpb24pIHdpdGhFeHRyYXNbc3Vic2NyaXB0aW9uS2V5XSA9IHRoaXMuc3Vic2NyaXB0aW9uO1xuICAgICAgICByZXR1cm4gd2l0aEV4dHJhcztcbiAgICAgIH07XG5cbiAgICAgIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHZhciBzZWxlY3RvciA9IHRoaXMuc2VsZWN0b3I7XG4gICAgICAgIHNlbGVjdG9yLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChzZWxlY3Rvci5lcnJvcikge1xuICAgICAgICAgIHRocm93IHNlbGVjdG9yLmVycm9yO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBjcmVhdGVFbGVtZW50KFdyYXBwZWRDb21wb25lbnQsIHRoaXMuYWRkRXh0cmFQcm9wcyhzZWxlY3Rvci5wcm9wcykpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gQ29ubmVjdDtcbiAgICB9KENvbXBvbmVudCk7XG5cbiAgICBpZiAocHJlZml4VW5zYWZlTGlmZWN5Y2xlTWV0aG9kcykge1xuICAgICAgLy8gVXNlIFVOU0FGRV8gZXZlbnQgbmFtZSB3aGVyZSBzdXBwb3J0ZWRcbiAgICAgIENvbm5lY3QucHJvdG90eXBlLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gQ29ubmVjdC5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcztcbiAgICAgIGRlbGV0ZSBDb25uZWN0LnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzO1xuICAgIH1cbiAgICAvKiBlc2xpbnQtZW5hYmxlIHJlYWN0L25vLWRlcHJlY2F0ZWQgKi9cblxuXG4gICAgQ29ubmVjdC5XcmFwcGVkQ29tcG9uZW50ID0gV3JhcHBlZENvbXBvbmVudDtcbiAgICBDb25uZWN0LmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XG4gICAgQ29ubmVjdC5jaGlsZENvbnRleHRUeXBlcyA9IGNoaWxkQ29udGV4dFR5cGVzO1xuICAgIENvbm5lY3QuY29udGV4dFR5cGVzID0gY29udGV4dFR5cGVzO1xuICAgIENvbm5lY3QucHJvcFR5cGVzID0gY29udGV4dFR5cGVzO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIC8vIFVzZSBVTlNBRkVfIGV2ZW50IG5hbWUgd2hlcmUgc3VwcG9ydGVkXG4gICAgICB2YXIgZXZlbnROYW1lID0gcHJlZml4VW5zYWZlTGlmZWN5Y2xlTWV0aG9kcyA/ICdVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZScgOiAnY29tcG9uZW50V2lsbFVwZGF0ZSc7XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlW2V2ZW50TmFtZV0gPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVXBkYXRlKCkge1xuICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgICAvLyBXZSBhcmUgaG90IHJlbG9hZGluZyFcbiAgICAgICAgaWYgKHRoaXMudmVyc2lvbiAhPT0gdmVyc2lvbikge1xuICAgICAgICAgIHRoaXMudmVyc2lvbiA9IHZlcnNpb247XG4gICAgICAgICAgdGhpcy5pbml0U2VsZWN0b3IoKTsgLy8gSWYgYW55IGNvbm5lY3RlZCBkZXNjZW5kYW50cyBkb24ndCBob3QgcmVsb2FkIChhbmQgcmVzdWJzY3JpYmUgaW4gdGhlIHByb2Nlc3MpLCB0aGVpclxuICAgICAgICAgIC8vIGxpc3RlbmVycyB3aWxsIGJlIGxvc3Qgd2hlbiB3ZSB1bnN1YnNjcmliZS4gVW5mb3J0dW5hdGVseSwgYnkgY29weWluZyBvdmVyIGFsbFxuICAgICAgICAgIC8vIGxpc3RlbmVycywgdGhpcyBkb2VzIG1lYW4gdGhhdCB0aGUgb2xkIHZlcnNpb25zIG9mIGNvbm5lY3RlZCBkZXNjZW5kYW50cyB3aWxsIHN0aWxsIGJlXG4gICAgICAgICAgLy8gbm90aWZpZWQgb2Ygc3RhdGUgY2hhbmdlczsgaG93ZXZlciwgdGhlaXIgb25TdGF0ZUNoYW5nZSBmdW5jdGlvbiBpcyBhIG5vLW9wIHNvIHRoaXNcbiAgICAgICAgICAvLyBpc24ndCBhIGh1Z2UgZGVhbC5cblxuICAgICAgICAgIHZhciBvbGRMaXN0ZW5lcnMgPSBbXTtcblxuICAgICAgICAgIGlmICh0aGlzLnN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgb2xkTGlzdGVuZXJzID0gdGhpcy5zdWJzY3JpcHRpb24ubGlzdGVuZXJzLmdldCgpO1xuICAgICAgICAgICAgdGhpcy5zdWJzY3JpcHRpb24udHJ5VW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLmluaXRTdWJzY3JpcHRpb24oKTtcblxuICAgICAgICAgIGlmIChzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMpIHtcbiAgICAgICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uLnRyeVN1YnNjcmliZSgpO1xuICAgICAgICAgICAgb2xkTGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICAgICAgICAgIHJldHVybiBfdGhpczIuc3Vic2NyaXB0aW9uLmxpc3RlbmVycy5zdWJzY3JpYmUobGlzdGVuZXIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBob2lzdFN0YXRpY3MoQ29ubmVjdCwgV3JhcHBlZENvbXBvbmVudCk7XG4gIH07XG59IiwidmFyIGhhc093biA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbmZ1bmN0aW9uIGlzKHgsIHkpIHtcbiAgaWYgKHggPT09IHkpIHtcbiAgICByZXR1cm4geCAhPT0gMCB8fCB5ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geCAhPT0geCAmJiB5ICE9PSB5O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNoYWxsb3dFcXVhbChvYmpBLCBvYmpCKSB7XG4gIGlmIChpcyhvYmpBLCBvYmpCKSkgcmV0dXJuIHRydWU7XG5cbiAgaWYgKHR5cGVvZiBvYmpBICE9PSAnb2JqZWN0JyB8fCBvYmpBID09PSBudWxsIHx8IHR5cGVvZiBvYmpCICE9PSAnb2JqZWN0JyB8fCBvYmpCID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMob2JqQSk7XG4gIHZhciBrZXlzQiA9IE9iamVjdC5rZXlzKG9iakIpO1xuICBpZiAoa2V5c0EubGVuZ3RoICE9PSBrZXlzQi5sZW5ndGgpIHJldHVybiBmYWxzZTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXNBLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKCFoYXNPd24uY2FsbChvYmpCLCBrZXlzQVtpXSkgfHwgIWlzKG9iakFba2V5c0FbaV1dLCBvYmpCW2tleXNBW2ldXSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn0iLCJpbXBvcnQgJCRvYnNlcnZhYmxlIGZyb20gJ3N5bWJvbC1vYnNlcnZhYmxlJztcblxuLyoqXG4gKiBUaGVzZSBhcmUgcHJpdmF0ZSBhY3Rpb24gdHlwZXMgcmVzZXJ2ZWQgYnkgUmVkdXguXG4gKiBGb3IgYW55IHVua25vd24gYWN0aW9ucywgeW91IG11c3QgcmV0dXJuIHRoZSBjdXJyZW50IHN0YXRlLlxuICogSWYgdGhlIGN1cnJlbnQgc3RhdGUgaXMgdW5kZWZpbmVkLCB5b3UgbXVzdCByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUuXG4gKiBEbyBub3QgcmVmZXJlbmNlIHRoZXNlIGFjdGlvbiB0eXBlcyBkaXJlY3RseSBpbiB5b3VyIGNvZGUuXG4gKi9cbnZhciByYW5kb21TdHJpbmcgPSBmdW5jdGlvbiByYW5kb21TdHJpbmcoKSB7XG4gIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoNykuc3BsaXQoJycpLmpvaW4oJy4nKTtcbn07XG5cbnZhciBBY3Rpb25UeXBlcyA9IHtcbiAgSU5JVDogXCJAQHJlZHV4L0lOSVRcIiArIHJhbmRvbVN0cmluZygpLFxuICBSRVBMQUNFOiBcIkBAcmVkdXgvUkVQTEFDRVwiICsgcmFuZG9tU3RyaW5nKCksXG4gIFBST0JFX1VOS05PV05fQUNUSU9OOiBmdW5jdGlvbiBQUk9CRV9VTktOT1dOX0FDVElPTigpIHtcbiAgICByZXR1cm4gXCJAQHJlZHV4L1BST0JFX1VOS05PV05fQUNUSU9OXCIgKyByYW5kb21TdHJpbmcoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge2FueX0gb2JqIFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBhcmd1bWVudCBhcHBlYXJzIHRvIGJlIGEgcGxhaW4gb2JqZWN0LlxuICovXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KG9iaikge1xuICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcgfHwgb2JqID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG4gIHZhciBwcm90byA9IG9iajtcblxuICB3aGlsZSAoT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKSAhPT0gbnVsbCkge1xuICAgIHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKTtcbiAgfVxuXG4gIHJldHVybiBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqKSA9PT0gcHJvdG87XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIFJlZHV4IHN0b3JlIHRoYXQgaG9sZHMgdGhlIHN0YXRlIHRyZWUuXG4gKiBUaGUgb25seSB3YXkgdG8gY2hhbmdlIHRoZSBkYXRhIGluIHRoZSBzdG9yZSBpcyB0byBjYWxsIGBkaXNwYXRjaCgpYCBvbiBpdC5cbiAqXG4gKiBUaGVyZSBzaG91bGQgb25seSBiZSBhIHNpbmdsZSBzdG9yZSBpbiB5b3VyIGFwcC4gVG8gc3BlY2lmeSBob3cgZGlmZmVyZW50XG4gKiBwYXJ0cyBvZiB0aGUgc3RhdGUgdHJlZSByZXNwb25kIHRvIGFjdGlvbnMsIHlvdSBtYXkgY29tYmluZSBzZXZlcmFsIHJlZHVjZXJzXG4gKiBpbnRvIGEgc2luZ2xlIHJlZHVjZXIgZnVuY3Rpb24gYnkgdXNpbmcgYGNvbWJpbmVSZWR1Y2Vyc2AuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVkdWNlciBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgbmV4dCBzdGF0ZSB0cmVlLCBnaXZlblxuICogdGhlIGN1cnJlbnQgc3RhdGUgdHJlZSBhbmQgdGhlIGFjdGlvbiB0byBoYW5kbGUuXG4gKlxuICogQHBhcmFtIHthbnl9IFtwcmVsb2FkZWRTdGF0ZV0gVGhlIGluaXRpYWwgc3RhdGUuIFlvdSBtYXkgb3B0aW9uYWxseSBzcGVjaWZ5IGl0XG4gKiB0byBoeWRyYXRlIHRoZSBzdGF0ZSBmcm9tIHRoZSBzZXJ2ZXIgaW4gdW5pdmVyc2FsIGFwcHMsIG9yIHRvIHJlc3RvcmUgYVxuICogcHJldmlvdXNseSBzZXJpYWxpemVkIHVzZXIgc2Vzc2lvbi5cbiAqIElmIHlvdSB1c2UgYGNvbWJpbmVSZWR1Y2Vyc2AgdG8gcHJvZHVjZSB0aGUgcm9vdCByZWR1Y2VyIGZ1bmN0aW9uLCB0aGlzIG11c3QgYmVcbiAqIGFuIG9iamVjdCB3aXRoIHRoZSBzYW1lIHNoYXBlIGFzIGBjb21iaW5lUmVkdWNlcnNgIGtleXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2VuaGFuY2VyXSBUaGUgc3RvcmUgZW5oYW5jZXIuIFlvdSBtYXkgb3B0aW9uYWxseSBzcGVjaWZ5IGl0XG4gKiB0byBlbmhhbmNlIHRoZSBzdG9yZSB3aXRoIHRoaXJkLXBhcnR5IGNhcGFiaWxpdGllcyBzdWNoIGFzIG1pZGRsZXdhcmUsXG4gKiB0aW1lIHRyYXZlbCwgcGVyc2lzdGVuY2UsIGV0Yy4gVGhlIG9ubHkgc3RvcmUgZW5oYW5jZXIgdGhhdCBzaGlwcyB3aXRoIFJlZHV4XG4gKiBpcyBgYXBwbHlNaWRkbGV3YXJlKClgLlxuICpcbiAqIEByZXR1cm5zIHtTdG9yZX0gQSBSZWR1eCBzdG9yZSB0aGF0IGxldHMgeW91IHJlYWQgdGhlIHN0YXRlLCBkaXNwYXRjaCBhY3Rpb25zXG4gKiBhbmQgc3Vic2NyaWJlIHRvIGNoYW5nZXMuXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlU3RvcmUocmVkdWNlciwgcHJlbG9hZGVkU3RhdGUsIGVuaGFuY2VyKSB7XG4gIHZhciBfcmVmMjtcblxuICBpZiAodHlwZW9mIHByZWxvYWRlZFN0YXRlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBlbmhhbmNlciA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgZW5oYW5jZXIgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGFyZ3VtZW50c1szXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcignSXQgbG9va3MgbGlrZSB5b3UgYXJlIHBhc3Npbmcgc2V2ZXJhbCBzdG9yZSBlbmhhbmNlcnMgdG8gJyArICdjcmVhdGVTdG9yZSgpLiBUaGlzIGlzIG5vdCBzdXBwb3J0ZWQuIEluc3RlYWQsIGNvbXBvc2UgdGhlbSAnICsgJ3RvZ2V0aGVyIHRvIGEgc2luZ2xlIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBwcmVsb2FkZWRTdGF0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZW5oYW5jZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgZW5oYW5jZXIgPSBwcmVsb2FkZWRTdGF0ZTtcbiAgICBwcmVsb2FkZWRTdGF0ZSA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZW5oYW5jZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgaWYgKHR5cGVvZiBlbmhhbmNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgZW5oYW5jZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZW5oYW5jZXIoY3JlYXRlU3RvcmUpKHJlZHVjZXIsIHByZWxvYWRlZFN0YXRlKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcmVkdWNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIHJlZHVjZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgfVxuXG4gIHZhciBjdXJyZW50UmVkdWNlciA9IHJlZHVjZXI7XG4gIHZhciBjdXJyZW50U3RhdGUgPSBwcmVsb2FkZWRTdGF0ZTtcbiAgdmFyIGN1cnJlbnRMaXN0ZW5lcnMgPSBbXTtcbiAgdmFyIG5leHRMaXN0ZW5lcnMgPSBjdXJyZW50TGlzdGVuZXJzO1xuICB2YXIgaXNEaXNwYXRjaGluZyA9IGZhbHNlO1xuICAvKipcbiAgICogVGhpcyBtYWtlcyBhIHNoYWxsb3cgY29weSBvZiBjdXJyZW50TGlzdGVuZXJzIHNvIHdlIGNhbiB1c2VcbiAgICogbmV4dExpc3RlbmVycyBhcyBhIHRlbXBvcmFyeSBsaXN0IHdoaWxlIGRpc3BhdGNoaW5nLlxuICAgKlxuICAgKiBUaGlzIHByZXZlbnRzIGFueSBidWdzIGFyb3VuZCBjb25zdW1lcnMgY2FsbGluZ1xuICAgKiBzdWJzY3JpYmUvdW5zdWJzY3JpYmUgaW4gdGhlIG1pZGRsZSBvZiBhIGRpc3BhdGNoLlxuICAgKi9cblxuICBmdW5jdGlvbiBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCkge1xuICAgIGlmIChuZXh0TGlzdGVuZXJzID09PSBjdXJyZW50TGlzdGVuZXJzKSB7XG4gICAgICBuZXh0TGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycy5zbGljZSgpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogUmVhZHMgdGhlIHN0YXRlIHRyZWUgbWFuYWdlZCBieSB0aGUgc3RvcmUuXG4gICAqXG4gICAqIEByZXR1cm5zIHthbnl9IFRoZSBjdXJyZW50IHN0YXRlIHRyZWUgb2YgeW91ciBhcHBsaWNhdGlvbi5cbiAgICovXG5cblxuICBmdW5jdGlvbiBnZXRTdGF0ZSgpIHtcbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbWF5IG5vdCBjYWxsIHN0b3JlLmdldFN0YXRlKCkgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ1RoZSByZWR1Y2VyIGhhcyBhbHJlYWR5IHJlY2VpdmVkIHRoZSBzdGF0ZSBhcyBhbiBhcmd1bWVudC4gJyArICdQYXNzIGl0IGRvd24gZnJvbSB0aGUgdG9wIHJlZHVjZXIgaW5zdGVhZCBvZiByZWFkaW5nIGl0IGZyb20gdGhlIHN0b3JlLicpO1xuICAgIH1cblxuICAgIHJldHVybiBjdXJyZW50U3RhdGU7XG4gIH1cbiAgLyoqXG4gICAqIEFkZHMgYSBjaGFuZ2UgbGlzdGVuZXIuIEl0IHdpbGwgYmUgY2FsbGVkIGFueSB0aW1lIGFuIGFjdGlvbiBpcyBkaXNwYXRjaGVkLFxuICAgKiBhbmQgc29tZSBwYXJ0IG9mIHRoZSBzdGF0ZSB0cmVlIG1heSBwb3RlbnRpYWxseSBoYXZlIGNoYW5nZWQuIFlvdSBtYXkgdGhlblxuICAgKiBjYWxsIGBnZXRTdGF0ZSgpYCB0byByZWFkIHRoZSBjdXJyZW50IHN0YXRlIHRyZWUgaW5zaWRlIHRoZSBjYWxsYmFjay5cbiAgICpcbiAgICogWW91IG1heSBjYWxsIGBkaXNwYXRjaCgpYCBmcm9tIGEgY2hhbmdlIGxpc3RlbmVyLCB3aXRoIHRoZSBmb2xsb3dpbmdcbiAgICogY2F2ZWF0czpcbiAgICpcbiAgICogMS4gVGhlIHN1YnNjcmlwdGlvbnMgYXJlIHNuYXBzaG90dGVkIGp1c3QgYmVmb3JlIGV2ZXJ5IGBkaXNwYXRjaCgpYCBjYWxsLlxuICAgKiBJZiB5b3Ugc3Vic2NyaWJlIG9yIHVuc3Vic2NyaWJlIHdoaWxlIHRoZSBsaXN0ZW5lcnMgYXJlIGJlaW5nIGludm9rZWQsIHRoaXNcbiAgICogd2lsbCBub3QgaGF2ZSBhbnkgZWZmZWN0IG9uIHRoZSBgZGlzcGF0Y2goKWAgdGhhdCBpcyBjdXJyZW50bHkgaW4gcHJvZ3Jlc3MuXG4gICAqIEhvd2V2ZXIsIHRoZSBuZXh0IGBkaXNwYXRjaCgpYCBjYWxsLCB3aGV0aGVyIG5lc3RlZCBvciBub3QsIHdpbGwgdXNlIGEgbW9yZVxuICAgKiByZWNlbnQgc25hcHNob3Qgb2YgdGhlIHN1YnNjcmlwdGlvbiBsaXN0LlxuICAgKlxuICAgKiAyLiBUaGUgbGlzdGVuZXIgc2hvdWxkIG5vdCBleHBlY3QgdG8gc2VlIGFsbCBzdGF0ZSBjaGFuZ2VzLCBhcyB0aGUgc3RhdGVcbiAgICogbWlnaHQgaGF2ZSBiZWVuIHVwZGF0ZWQgbXVsdGlwbGUgdGltZXMgZHVyaW5nIGEgbmVzdGVkIGBkaXNwYXRjaCgpYCBiZWZvcmVcbiAgICogdGhlIGxpc3RlbmVyIGlzIGNhbGxlZC4gSXQgaXMsIGhvd2V2ZXIsIGd1YXJhbnRlZWQgdGhhdCBhbGwgc3Vic2NyaWJlcnNcbiAgICogcmVnaXN0ZXJlZCBiZWZvcmUgdGhlIGBkaXNwYXRjaCgpYCBzdGFydGVkIHdpbGwgYmUgY2FsbGVkIHdpdGggdGhlIGxhdGVzdFxuICAgKiBzdGF0ZSBieSB0aGUgdGltZSBpdCBleGl0cy5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXIgQSBjYWxsYmFjayB0byBiZSBpbnZva2VkIG9uIGV2ZXJ5IGRpc3BhdGNoLlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgZnVuY3Rpb24gdG8gcmVtb3ZlIHRoaXMgY2hhbmdlIGxpc3RlbmVyLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHN1YnNjcmliZShsaXN0ZW5lcikge1xuICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIGxpc3RlbmVyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG1heSBub3QgY2FsbCBzdG9yZS5zdWJzY3JpYmUoKSB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnSWYgeW91IHdvdWxkIGxpa2UgdG8gYmUgbm90aWZpZWQgYWZ0ZXIgdGhlIHN0b3JlIGhhcyBiZWVuIHVwZGF0ZWQsIHN1YnNjcmliZSBmcm9tIGEgJyArICdjb21wb25lbnQgYW5kIGludm9rZSBzdG9yZS5nZXRTdGF0ZSgpIGluIHRoZSBjYWxsYmFjayB0byBhY2Nlc3MgdGhlIGxhdGVzdCBzdGF0ZS4gJyArICdTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvYXBpLXJlZmVyZW5jZS9zdG9yZSNzdWJzY3JpYmVsaXN0ZW5lciBmb3IgbW9yZSBkZXRhaWxzLicpO1xuICAgIH1cblxuICAgIHZhciBpc1N1YnNjcmliZWQgPSB0cnVlO1xuICAgIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKTtcbiAgICBuZXh0TGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIHJldHVybiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICAgIGlmICghaXNTdWJzY3JpYmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbWF5IG5vdCB1bnN1YnNjcmliZSBmcm9tIGEgc3RvcmUgbGlzdGVuZXIgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ1NlZSBodHRwczovL3JlZHV4LmpzLm9yZy9hcGktcmVmZXJlbmNlL3N0b3JlI3N1YnNjcmliZWxpc3RlbmVyIGZvciBtb3JlIGRldGFpbHMuJyk7XG4gICAgICB9XG5cbiAgICAgIGlzU3Vic2NyaWJlZCA9IGZhbHNlO1xuICAgICAgZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpO1xuICAgICAgdmFyIGluZGV4ID0gbmV4dExpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcbiAgICAgIG5leHRMaXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIGN1cnJlbnRMaXN0ZW5lcnMgPSBudWxsO1xuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIERpc3BhdGNoZXMgYW4gYWN0aW9uLiBJdCBpcyB0aGUgb25seSB3YXkgdG8gdHJpZ2dlciBhIHN0YXRlIGNoYW5nZS5cbiAgICpcbiAgICogVGhlIGByZWR1Y2VyYCBmdW5jdGlvbiwgdXNlZCB0byBjcmVhdGUgdGhlIHN0b3JlLCB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZVxuICAgKiBjdXJyZW50IHN0YXRlIHRyZWUgYW5kIHRoZSBnaXZlbiBgYWN0aW9uYC4gSXRzIHJldHVybiB2YWx1ZSB3aWxsXG4gICAqIGJlIGNvbnNpZGVyZWQgdGhlICoqbmV4dCoqIHN0YXRlIG9mIHRoZSB0cmVlLCBhbmQgdGhlIGNoYW5nZSBsaXN0ZW5lcnNcbiAgICogd2lsbCBiZSBub3RpZmllZC5cbiAgICpcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb25seSBzdXBwb3J0cyBwbGFpbiBvYmplY3QgYWN0aW9ucy4gSWYgeW91IHdhbnQgdG9cbiAgICogZGlzcGF0Y2ggYSBQcm9taXNlLCBhbiBPYnNlcnZhYmxlLCBhIHRodW5rLCBvciBzb21ldGhpbmcgZWxzZSwgeW91IG5lZWQgdG9cbiAgICogd3JhcCB5b3VyIHN0b3JlIGNyZWF0aW5nIGZ1bmN0aW9uIGludG8gdGhlIGNvcnJlc3BvbmRpbmcgbWlkZGxld2FyZS4gRm9yXG4gICAqIGV4YW1wbGUsIHNlZSB0aGUgZG9jdW1lbnRhdGlvbiBmb3IgdGhlIGByZWR1eC10aHVua2AgcGFja2FnZS4gRXZlbiB0aGVcbiAgICogbWlkZGxld2FyZSB3aWxsIGV2ZW50dWFsbHkgZGlzcGF0Y2ggcGxhaW4gb2JqZWN0IGFjdGlvbnMgdXNpbmcgdGhpcyBtZXRob2QuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBhY3Rpb24gQSBwbGFpbiBvYmplY3QgcmVwcmVzZW50aW5nIOKAnHdoYXQgY2hhbmdlZOKAnS4gSXQgaXNcbiAgICogYSBnb29kIGlkZWEgdG8ga2VlcCBhY3Rpb25zIHNlcmlhbGl6YWJsZSBzbyB5b3UgY2FuIHJlY29yZCBhbmQgcmVwbGF5IHVzZXJcbiAgICogc2Vzc2lvbnMsIG9yIHVzZSB0aGUgdGltZSB0cmF2ZWxsaW5nIGByZWR1eC1kZXZ0b29sc2AuIEFuIGFjdGlvbiBtdXN0IGhhdmVcbiAgICogYSBgdHlwZWAgcHJvcGVydHkgd2hpY2ggbWF5IG5vdCBiZSBgdW5kZWZpbmVkYC4gSXQgaXMgYSBnb29kIGlkZWEgdG8gdXNlXG4gICAqIHN0cmluZyBjb25zdGFudHMgZm9yIGFjdGlvbiB0eXBlcy5cbiAgICpcbiAgICogQHJldHVybnMge09iamVjdH0gRm9yIGNvbnZlbmllbmNlLCB0aGUgc2FtZSBhY3Rpb24gb2JqZWN0IHlvdSBkaXNwYXRjaGVkLlxuICAgKlxuICAgKiBOb3RlIHRoYXQsIGlmIHlvdSB1c2UgYSBjdXN0b20gbWlkZGxld2FyZSwgaXQgbWF5IHdyYXAgYGRpc3BhdGNoKClgIHRvXG4gICAqIHJldHVybiBzb21ldGhpbmcgZWxzZSAoZm9yIGV4YW1wbGUsIGEgUHJvbWlzZSB5b3UgY2FuIGF3YWl0KS5cbiAgICovXG5cblxuICBmdW5jdGlvbiBkaXNwYXRjaChhY3Rpb24pIHtcbiAgICBpZiAoIWlzUGxhaW5PYmplY3QoYWN0aW9uKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBY3Rpb25zIG11c3QgYmUgcGxhaW4gb2JqZWN0cy4gJyArICdVc2UgY3VzdG9tIG1pZGRsZXdhcmUgZm9yIGFzeW5jIGFjdGlvbnMuJyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBhY3Rpb24udHlwZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQWN0aW9ucyBtYXkgbm90IGhhdmUgYW4gdW5kZWZpbmVkIFwidHlwZVwiIHByb3BlcnR5LiAnICsgJ0hhdmUgeW91IG1pc3NwZWxsZWQgYSBjb25zdGFudD8nKTtcbiAgICB9XG5cbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZWR1Y2VycyBtYXkgbm90IGRpc3BhdGNoIGFjdGlvbnMuJyk7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGlzRGlzcGF0Y2hpbmcgPSB0cnVlO1xuICAgICAgY3VycmVudFN0YXRlID0gY3VycmVudFJlZHVjZXIoY3VycmVudFN0YXRlLCBhY3Rpb24pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpc0Rpc3BhdGNoaW5nID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGxpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMgPSBuZXh0TGlzdGVuZXJzO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBsaXN0ZW5lciA9IGxpc3RlbmVyc1tpXTtcbiAgICAgIGxpc3RlbmVyKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfVxuICAvKipcbiAgICogUmVwbGFjZXMgdGhlIHJlZHVjZXIgY3VycmVudGx5IHVzZWQgYnkgdGhlIHN0b3JlIHRvIGNhbGN1bGF0ZSB0aGUgc3RhdGUuXG4gICAqXG4gICAqIFlvdSBtaWdodCBuZWVkIHRoaXMgaWYgeW91ciBhcHAgaW1wbGVtZW50cyBjb2RlIHNwbGl0dGluZyBhbmQgeW91IHdhbnQgdG9cbiAgICogbG9hZCBzb21lIG9mIHRoZSByZWR1Y2VycyBkeW5hbWljYWxseS4gWW91IG1pZ2h0IGFsc28gbmVlZCB0aGlzIGlmIHlvdVxuICAgKiBpbXBsZW1lbnQgYSBob3QgcmVsb2FkaW5nIG1lY2hhbmlzbSBmb3IgUmVkdXguXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IG5leHRSZWR1Y2VyIFRoZSByZWR1Y2VyIGZvciB0aGUgc3RvcmUgdG8gdXNlIGluc3RlYWQuXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHJlcGxhY2VSZWR1Y2VyKG5leHRSZWR1Y2VyKSB7XG4gICAgaWYgKHR5cGVvZiBuZXh0UmVkdWNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgbmV4dFJlZHVjZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICBjdXJyZW50UmVkdWNlciA9IG5leHRSZWR1Y2VyOyAvLyBUaGlzIGFjdGlvbiBoYXMgYSBzaW1pbGlhciBlZmZlY3QgdG8gQWN0aW9uVHlwZXMuSU5JVC5cbiAgICAvLyBBbnkgcmVkdWNlcnMgdGhhdCBleGlzdGVkIGluIGJvdGggdGhlIG5ldyBhbmQgb2xkIHJvb3RSZWR1Y2VyXG4gICAgLy8gd2lsbCByZWNlaXZlIHRoZSBwcmV2aW91cyBzdGF0ZS4gVGhpcyBlZmZlY3RpdmVseSBwb3B1bGF0ZXNcbiAgICAvLyB0aGUgbmV3IHN0YXRlIHRyZWUgd2l0aCBhbnkgcmVsZXZhbnQgZGF0YSBmcm9tIHRoZSBvbGQgb25lLlxuXG4gICAgZGlzcGF0Y2goe1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuUkVQTEFDRVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBJbnRlcm9wZXJhYmlsaXR5IHBvaW50IGZvciBvYnNlcnZhYmxlL3JlYWN0aXZlIGxpYnJhcmllcy5cbiAgICogQHJldHVybnMge29ic2VydmFibGV9IEEgbWluaW1hbCBvYnNlcnZhYmxlIG9mIHN0YXRlIGNoYW5nZXMuXG4gICAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIG9ic2VydmFibGUgcHJvcG9zYWw6XG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9ic2VydmFibGVcbiAgICovXG5cblxuICBmdW5jdGlvbiBvYnNlcnZhYmxlKCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIG91dGVyU3Vic2NyaWJlID0gc3Vic2NyaWJlO1xuICAgIHJldHVybiBfcmVmID0ge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGUgbWluaW1hbCBvYnNlcnZhYmxlIHN1YnNjcmlwdGlvbiBtZXRob2QuXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JzZXJ2ZXIgQW55IG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIGFzIGFuIG9ic2VydmVyLlxuICAgICAgICogVGhlIG9ic2VydmVyIG9iamVjdCBzaG91bGQgaGF2ZSBhIGBuZXh0YCBtZXRob2QuXG4gICAgICAgKiBAcmV0dXJucyB7c3Vic2NyaXB0aW9ufSBBbiBvYmplY3Qgd2l0aCBhbiBgdW5zdWJzY3JpYmVgIG1ldGhvZCB0aGF0IGNhblxuICAgICAgICogYmUgdXNlZCB0byB1bnN1YnNjcmliZSB0aGUgb2JzZXJ2YWJsZSBmcm9tIHRoZSBzdG9yZSwgYW5kIHByZXZlbnQgZnVydGhlclxuICAgICAgICogZW1pc3Npb24gb2YgdmFsdWVzIGZyb20gdGhlIG9ic2VydmFibGUuXG4gICAgICAgKi9cbiAgICAgIHN1YnNjcmliZTogZnVuY3Rpb24gc3Vic2NyaWJlKG9ic2VydmVyKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygb2JzZXJ2ZXIgIT09ICdvYmplY3QnIHx8IG9ic2VydmVyID09PSBudWxsKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgdGhlIG9ic2VydmVyIHRvIGJlIGFuIG9iamVjdC4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIG9ic2VydmVTdGF0ZSgpIHtcbiAgICAgICAgICBpZiAob2JzZXJ2ZXIubmV4dCkge1xuICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChnZXRTdGF0ZSgpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBvYnNlcnZlU3RhdGUoKTtcbiAgICAgICAgdmFyIHVuc3Vic2NyaWJlID0gb3V0ZXJTdWJzY3JpYmUob2JzZXJ2ZVN0YXRlKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB1bnN1YnNjcmliZTogdW5zdWJzY3JpYmVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9LCBfcmVmWyQkb2JzZXJ2YWJsZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LCBfcmVmO1xuICB9IC8vIFdoZW4gYSBzdG9yZSBpcyBjcmVhdGVkLCBhbiBcIklOSVRcIiBhY3Rpb24gaXMgZGlzcGF0Y2hlZCBzbyB0aGF0IGV2ZXJ5XG4gIC8vIHJlZHVjZXIgcmV0dXJucyB0aGVpciBpbml0aWFsIHN0YXRlLiBUaGlzIGVmZmVjdGl2ZWx5IHBvcHVsYXRlc1xuICAvLyB0aGUgaW5pdGlhbCBzdGF0ZSB0cmVlLlxuXG5cbiAgZGlzcGF0Y2goe1xuICAgIHR5cGU6IEFjdGlvblR5cGVzLklOSVRcbiAgfSk7XG4gIHJldHVybiBfcmVmMiA9IHtcbiAgICBkaXNwYXRjaDogZGlzcGF0Y2gsXG4gICAgc3Vic2NyaWJlOiBzdWJzY3JpYmUsXG4gICAgZ2V0U3RhdGU6IGdldFN0YXRlLFxuICAgIHJlcGxhY2VSZWR1Y2VyOiByZXBsYWNlUmVkdWNlclxuICB9LCBfcmVmMlskJG9ic2VydmFibGVdID0gb2JzZXJ2YWJsZSwgX3JlZjI7XG59XG5cbi8qKlxuICogUHJpbnRzIGEgd2FybmluZyBpbiB0aGUgY29uc29sZSBpZiBpdCBleGlzdHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgVGhlIHdhcm5pbmcgbWVzc2FnZS5cbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiB3YXJuaW5nKG1lc3NhZ2UpIHtcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBjb25zb2xlLmVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgfVxuICAvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbnNvbGUgKi9cblxuXG4gIHRyeSB7XG4gICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCBpZiB5b3UgZW5hYmxlXG4gICAgLy8gXCJicmVhayBvbiBhbGwgZXhjZXB0aW9uc1wiIGluIHlvdXIgY29uc29sZSxcbiAgICAvLyBpdCB3b3VsZCBwYXVzZSB0aGUgZXhlY3V0aW9uIGF0IHRoaXMgbGluZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIH0gY2F0Y2ggKGUpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZW1wdHlcblxufVxuXG5mdW5jdGlvbiBnZXRVbmRlZmluZWRTdGF0ZUVycm9yTWVzc2FnZShrZXksIGFjdGlvbikge1xuICB2YXIgYWN0aW9uVHlwZSA9IGFjdGlvbiAmJiBhY3Rpb24udHlwZTtcbiAgdmFyIGFjdGlvbkRlc2NyaXB0aW9uID0gYWN0aW9uVHlwZSAmJiBcImFjdGlvbiBcXFwiXCIgKyBTdHJpbmcoYWN0aW9uVHlwZSkgKyBcIlxcXCJcIiB8fCAnYW4gYWN0aW9uJztcbiAgcmV0dXJuIFwiR2l2ZW4gXCIgKyBhY3Rpb25EZXNjcmlwdGlvbiArIFwiLCByZWR1Y2VyIFxcXCJcIiArIGtleSArIFwiXFxcIiByZXR1cm5lZCB1bmRlZmluZWQuIFwiICsgXCJUbyBpZ25vcmUgYW4gYWN0aW9uLCB5b3UgbXVzdCBleHBsaWNpdGx5IHJldHVybiB0aGUgcHJldmlvdXMgc3RhdGUuIFwiICsgXCJJZiB5b3Ugd2FudCB0aGlzIHJlZHVjZXIgdG8gaG9sZCBubyB2YWx1ZSwgeW91IGNhbiByZXR1cm4gbnVsbCBpbnN0ZWFkIG9mIHVuZGVmaW5lZC5cIjtcbn1cblxuZnVuY3Rpb24gZ2V0VW5leHBlY3RlZFN0YXRlU2hhcGVXYXJuaW5nTWVzc2FnZShpbnB1dFN0YXRlLCByZWR1Y2VycywgYWN0aW9uLCB1bmV4cGVjdGVkS2V5Q2FjaGUpIHtcbiAgdmFyIHJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMocmVkdWNlcnMpO1xuICB2YXIgYXJndW1lbnROYW1lID0gYWN0aW9uICYmIGFjdGlvbi50eXBlID09PSBBY3Rpb25UeXBlcy5JTklUID8gJ3ByZWxvYWRlZFN0YXRlIGFyZ3VtZW50IHBhc3NlZCB0byBjcmVhdGVTdG9yZScgOiAncHJldmlvdXMgc3RhdGUgcmVjZWl2ZWQgYnkgdGhlIHJlZHVjZXInO1xuXG4gIGlmIChyZWR1Y2VyS2V5cy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gJ1N0b3JlIGRvZXMgbm90IGhhdmUgYSB2YWxpZCByZWR1Y2VyLiBNYWtlIHN1cmUgdGhlIGFyZ3VtZW50IHBhc3NlZCAnICsgJ3RvIGNvbWJpbmVSZWR1Y2VycyBpcyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSByZWR1Y2Vycy4nO1xuICB9XG5cbiAgaWYgKCFpc1BsYWluT2JqZWN0KGlucHV0U3RhdGUpKSB7XG4gICAgcmV0dXJuIFwiVGhlIFwiICsgYXJndW1lbnROYW1lICsgXCIgaGFzIHVuZXhwZWN0ZWQgdHlwZSBvZiBcXFwiXCIgKyB7fS50b1N0cmluZy5jYWxsKGlucHV0U3RhdGUpLm1hdGNoKC9cXHMoW2EtenxBLVpdKykvKVsxXSArIFwiXFxcIi4gRXhwZWN0ZWQgYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBcIiArIChcImtleXM6IFxcXCJcIiArIHJlZHVjZXJLZXlzLmpvaW4oJ1wiLCBcIicpICsgXCJcXFwiXCIpO1xuICB9XG5cbiAgdmFyIHVuZXhwZWN0ZWRLZXlzID0gT2JqZWN0LmtleXMoaW5wdXRTdGF0ZSkuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gIXJlZHVjZXJzLmhhc093blByb3BlcnR5KGtleSkgJiYgIXVuZXhwZWN0ZWRLZXlDYWNoZVtrZXldO1xuICB9KTtcbiAgdW5leHBlY3RlZEtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdW5leHBlY3RlZEtleUNhY2hlW2tleV0gPSB0cnVlO1xuICB9KTtcbiAgaWYgKGFjdGlvbiAmJiBhY3Rpb24udHlwZSA9PT0gQWN0aW9uVHlwZXMuUkVQTEFDRSkgcmV0dXJuO1xuXG4gIGlmICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIFwiVW5leHBlY3RlZCBcIiArICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAxID8gJ2tleXMnIDogJ2tleScpICsgXCIgXCIgKyAoXCJcXFwiXCIgKyB1bmV4cGVjdGVkS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIiBmb3VuZCBpbiBcIiArIGFyZ3VtZW50TmFtZSArIFwiLiBcIikgKyBcIkV4cGVjdGVkIHRvIGZpbmQgb25lIG9mIHRoZSBrbm93biByZWR1Y2VyIGtleXMgaW5zdGVhZDogXCIgKyAoXCJcXFwiXCIgKyByZWR1Y2VyS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIi4gVW5leHBlY3RlZCBrZXlzIHdpbGwgYmUgaWdub3JlZC5cIik7XG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0UmVkdWNlclNoYXBlKHJlZHVjZXJzKSB7XG4gIE9iamVjdC5rZXlzKHJlZHVjZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgcmVkdWNlciA9IHJlZHVjZXJzW2tleV07XG4gICAgdmFyIGluaXRpYWxTdGF0ZSA9IHJlZHVjZXIodW5kZWZpbmVkLCB7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5JTklUXG4gICAgfSk7XG5cbiAgICBpZiAodHlwZW9mIGluaXRpYWxTdGF0ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlJlZHVjZXIgXFxcIlwiICsga2V5ICsgXCJcXFwiIHJldHVybmVkIHVuZGVmaW5lZCBkdXJpbmcgaW5pdGlhbGl6YXRpb24uIFwiICsgXCJJZiB0aGUgc3RhdGUgcGFzc2VkIHRvIHRoZSByZWR1Y2VyIGlzIHVuZGVmaW5lZCwgeW91IG11c3QgXCIgKyBcImV4cGxpY2l0bHkgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLiBUaGUgaW5pdGlhbCBzdGF0ZSBtYXkgXCIgKyBcIm5vdCBiZSB1bmRlZmluZWQuIElmIHlvdSBkb24ndCB3YW50IHRvIHNldCBhIHZhbHVlIGZvciB0aGlzIHJlZHVjZXIsIFwiICsgXCJ5b3UgY2FuIHVzZSBudWxsIGluc3RlYWQgb2YgdW5kZWZpbmVkLlwiKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHJlZHVjZXIodW5kZWZpbmVkLCB7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5QUk9CRV9VTktOT1dOX0FDVElPTigpXG4gICAgfSkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJSZWR1Y2VyIFxcXCJcIiArIGtleSArIFwiXFxcIiByZXR1cm5lZCB1bmRlZmluZWQgd2hlbiBwcm9iZWQgd2l0aCBhIHJhbmRvbSB0eXBlLiBcIiArIChcIkRvbid0IHRyeSB0byBoYW5kbGUgXCIgKyBBY3Rpb25UeXBlcy5JTklUICsgXCIgb3Igb3RoZXIgYWN0aW9ucyBpbiBcXFwicmVkdXgvKlxcXCIgXCIpICsgXCJuYW1lc3BhY2UuIFRoZXkgYXJlIGNvbnNpZGVyZWQgcHJpdmF0ZS4gSW5zdGVhZCwgeW91IG11c3QgcmV0dXJuIHRoZSBcIiArIFwiY3VycmVudCBzdGF0ZSBmb3IgYW55IHVua25vd24gYWN0aW9ucywgdW5sZXNzIGl0IGlzIHVuZGVmaW5lZCwgXCIgKyBcImluIHdoaWNoIGNhc2UgeW91IG11c3QgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLCByZWdhcmRsZXNzIG9mIHRoZSBcIiArIFwiYWN0aW9uIHR5cGUuIFRoZSBpbml0aWFsIHN0YXRlIG1heSBub3QgYmUgdW5kZWZpbmVkLCBidXQgY2FuIGJlIG51bGwuXCIpO1xuICAgIH1cbiAgfSk7XG59XG4vKipcbiAqIFR1cm5zIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGRpZmZlcmVudCByZWR1Y2VyIGZ1bmN0aW9ucywgaW50byBhIHNpbmdsZVxuICogcmVkdWNlciBmdW5jdGlvbi4gSXQgd2lsbCBjYWxsIGV2ZXJ5IGNoaWxkIHJlZHVjZXIsIGFuZCBnYXRoZXIgdGhlaXIgcmVzdWx0c1xuICogaW50byBhIHNpbmdsZSBzdGF0ZSBvYmplY3QsIHdob3NlIGtleXMgY29ycmVzcG9uZCB0byB0aGUga2V5cyBvZiB0aGUgcGFzc2VkXG4gKiByZWR1Y2VyIGZ1bmN0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcmVkdWNlcnMgQW4gb2JqZWN0IHdob3NlIHZhbHVlcyBjb3JyZXNwb25kIHRvIGRpZmZlcmVudFxuICogcmVkdWNlciBmdW5jdGlvbnMgdGhhdCBuZWVkIHRvIGJlIGNvbWJpbmVkIGludG8gb25lLiBPbmUgaGFuZHkgd2F5IHRvIG9idGFpblxuICogaXQgaXMgdG8gdXNlIEVTNiBgaW1wb3J0ICogYXMgcmVkdWNlcnNgIHN5bnRheC4gVGhlIHJlZHVjZXJzIG1heSBuZXZlciByZXR1cm5cbiAqIHVuZGVmaW5lZCBmb3IgYW55IGFjdGlvbi4gSW5zdGVhZCwgdGhleSBzaG91bGQgcmV0dXJuIHRoZWlyIGluaXRpYWwgc3RhdGVcbiAqIGlmIHRoZSBzdGF0ZSBwYXNzZWQgdG8gdGhlbSB3YXMgdW5kZWZpbmVkLCBhbmQgdGhlIGN1cnJlbnQgc3RhdGUgZm9yIGFueVxuICogdW5yZWNvZ25pemVkIGFjdGlvbi5cbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgcmVkdWNlciBmdW5jdGlvbiB0aGF0IGludm9rZXMgZXZlcnkgcmVkdWNlciBpbnNpZGUgdGhlXG4gKiBwYXNzZWQgb2JqZWN0LCBhbmQgYnVpbGRzIGEgc3RhdGUgb2JqZWN0IHdpdGggdGhlIHNhbWUgc2hhcGUuXG4gKi9cblxuXG5mdW5jdGlvbiBjb21iaW5lUmVkdWNlcnMocmVkdWNlcnMpIHtcbiAgdmFyIHJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMocmVkdWNlcnMpO1xuICB2YXIgZmluYWxSZWR1Y2VycyA9IHt9O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmVkdWNlcktleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0gcmVkdWNlcktleXNbaV07XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKHR5cGVvZiByZWR1Y2Vyc1trZXldID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB3YXJuaW5nKFwiTm8gcmVkdWNlciBwcm92aWRlZCBmb3Iga2V5IFxcXCJcIiArIGtleSArIFwiXFxcIlwiKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHJlZHVjZXJzW2tleV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGZpbmFsUmVkdWNlcnNba2V5XSA9IHJlZHVjZXJzW2tleV07XG4gICAgfVxuICB9XG5cbiAgdmFyIGZpbmFsUmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhmaW5hbFJlZHVjZXJzKTsgLy8gVGhpcyBpcyB1c2VkIHRvIG1ha2Ugc3VyZSB3ZSBkb24ndCB3YXJuIGFib3V0IHRoZSBzYW1lXG4gIC8vIGtleXMgbXVsdGlwbGUgdGltZXMuXG5cbiAgdmFyIHVuZXhwZWN0ZWRLZXlDYWNoZTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHVuZXhwZWN0ZWRLZXlDYWNoZSA9IHt9O1xuICB9XG5cbiAgdmFyIHNoYXBlQXNzZXJ0aW9uRXJyb3I7XG5cbiAgdHJ5IHtcbiAgICBhc3NlcnRSZWR1Y2VyU2hhcGUoZmluYWxSZWR1Y2Vycyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBzaGFwZUFzc2VydGlvbkVycm9yID0gZTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiBjb21iaW5hdGlvbihzdGF0ZSwgYWN0aW9uKSB7XG4gICAgaWYgKHN0YXRlID09PSB2b2lkIDApIHtcbiAgICAgIHN0YXRlID0ge307XG4gICAgfVxuXG4gICAgaWYgKHNoYXBlQXNzZXJ0aW9uRXJyb3IpIHtcbiAgICAgIHRocm93IHNoYXBlQXNzZXJ0aW9uRXJyb3I7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciB3YXJuaW5nTWVzc2FnZSA9IGdldFVuZXhwZWN0ZWRTdGF0ZVNoYXBlV2FybmluZ01lc3NhZ2Uoc3RhdGUsIGZpbmFsUmVkdWNlcnMsIGFjdGlvbiwgdW5leHBlY3RlZEtleUNhY2hlKTtcblxuICAgICAgaWYgKHdhcm5pbmdNZXNzYWdlKSB7XG4gICAgICAgIHdhcm5pbmcod2FybmluZ01lc3NhZ2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBoYXNDaGFuZ2VkID0gZmFsc2U7XG4gICAgdmFyIG5leHRTdGF0ZSA9IHt9O1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGZpbmFsUmVkdWNlcktleXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2tleSA9IGZpbmFsUmVkdWNlcktleXNbX2ldO1xuICAgICAgdmFyIHJlZHVjZXIgPSBmaW5hbFJlZHVjZXJzW19rZXldO1xuICAgICAgdmFyIHByZXZpb3VzU3RhdGVGb3JLZXkgPSBzdGF0ZVtfa2V5XTtcbiAgICAgIHZhciBuZXh0U3RhdGVGb3JLZXkgPSByZWR1Y2VyKHByZXZpb3VzU3RhdGVGb3JLZXksIGFjdGlvbik7XG5cbiAgICAgIGlmICh0eXBlb2YgbmV4dFN0YXRlRm9yS2V5ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB2YXIgZXJyb3JNZXNzYWdlID0gZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2UoX2tleSwgYWN0aW9uKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yTWVzc2FnZSk7XG4gICAgICB9XG5cbiAgICAgIG5leHRTdGF0ZVtfa2V5XSA9IG5leHRTdGF0ZUZvcktleTtcbiAgICAgIGhhc0NoYW5nZWQgPSBoYXNDaGFuZ2VkIHx8IG5leHRTdGF0ZUZvcktleSAhPT0gcHJldmlvdXNTdGF0ZUZvcktleTtcbiAgICB9XG5cbiAgICBoYXNDaGFuZ2VkID0gaGFzQ2hhbmdlZCB8fCBmaW5hbFJlZHVjZXJLZXlzLmxlbmd0aCAhPT0gT2JqZWN0LmtleXMoc3RhdGUpLmxlbmd0aDtcbiAgICByZXR1cm4gaGFzQ2hhbmdlZCA/IG5leHRTdGF0ZSA6IHN0YXRlO1xuICB9O1xufVxuXG5mdW5jdGlvbiBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9yLCBkaXNwYXRjaCkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBkaXNwYXRjaChhY3Rpb25DcmVhdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9O1xufVxuLyoqXG4gKiBUdXJucyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBhY3Rpb24gY3JlYXRvcnMsIGludG8gYW4gb2JqZWN0IHdpdGggdGhlXG4gKiBzYW1lIGtleXMsIGJ1dCB3aXRoIGV2ZXJ5IGZ1bmN0aW9uIHdyYXBwZWQgaW50byBhIGBkaXNwYXRjaGAgY2FsbCBzbyB0aGV5XG4gKiBtYXkgYmUgaW52b2tlZCBkaXJlY3RseS4gVGhpcyBpcyBqdXN0IGEgY29udmVuaWVuY2UgbWV0aG9kLCBhcyB5b3UgY2FuIGNhbGxcbiAqIGBzdG9yZS5kaXNwYXRjaChNeUFjdGlvbkNyZWF0b3JzLmRvU29tZXRoaW5nKCkpYCB5b3Vyc2VsZiBqdXN0IGZpbmUuXG4gKlxuICogRm9yIGNvbnZlbmllbmNlLCB5b3UgY2FuIGFsc28gcGFzcyBhbiBhY3Rpb24gY3JlYXRvciBhcyB0aGUgZmlyc3QgYXJndW1lbnQsXG4gKiBhbmQgZ2V0IGEgZGlzcGF0Y2ggd3JhcHBlZCBmdW5jdGlvbiBpbiByZXR1cm4uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R9IGFjdGlvbkNyZWF0b3JzIEFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGFjdGlvblxuICogY3JlYXRvciBmdW5jdGlvbnMuIE9uZSBoYW5keSB3YXkgdG8gb2J0YWluIGl0IGlzIHRvIHVzZSBFUzYgYGltcG9ydCAqIGFzYFxuICogc3ludGF4LiBZb3UgbWF5IGFsc28gcGFzcyBhIHNpbmdsZSBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBkaXNwYXRjaCBUaGUgYGRpc3BhdGNoYCBmdW5jdGlvbiBhdmFpbGFibGUgb24geW91ciBSZWR1eFxuICogc3RvcmUuXG4gKlxuICogQHJldHVybnMge0Z1bmN0aW9ufE9iamVjdH0gVGhlIG9iamVjdCBtaW1pY2tpbmcgdGhlIG9yaWdpbmFsIG9iamVjdCwgYnV0IHdpdGhcbiAqIGV2ZXJ5IGFjdGlvbiBjcmVhdG9yIHdyYXBwZWQgaW50byB0aGUgYGRpc3BhdGNoYCBjYWxsLiBJZiB5b3UgcGFzc2VkIGFcbiAqIGZ1bmN0aW9uIGFzIGBhY3Rpb25DcmVhdG9yc2AsIHRoZSByZXR1cm4gdmFsdWUgd2lsbCBhbHNvIGJlIGEgc2luZ2xlXG4gKiBmdW5jdGlvbi5cbiAqL1xuXG5cbmZ1bmN0aW9uIGJpbmRBY3Rpb25DcmVhdG9ycyhhY3Rpb25DcmVhdG9ycywgZGlzcGF0Y2gpIHtcbiAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9ycyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9ycywgZGlzcGF0Y2gpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9ycyAhPT0gJ29iamVjdCcgfHwgYWN0aW9uQ3JlYXRvcnMgPT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJiaW5kQWN0aW9uQ3JlYXRvcnMgZXhwZWN0ZWQgYW4gb2JqZWN0IG9yIGEgZnVuY3Rpb24sIGluc3RlYWQgcmVjZWl2ZWQgXCIgKyAoYWN0aW9uQ3JlYXRvcnMgPT09IG51bGwgPyAnbnVsbCcgOiB0eXBlb2YgYWN0aW9uQ3JlYXRvcnMpICsgXCIuIFwiICsgXCJEaWQgeW91IHdyaXRlIFxcXCJpbXBvcnQgQWN0aW9uQ3JlYXRvcnMgZnJvbVxcXCIgaW5zdGVhZCBvZiBcXFwiaW1wb3J0ICogYXMgQWN0aW9uQ3JlYXRvcnMgZnJvbVxcXCI/XCIpO1xuICB9XG5cbiAgdmFyIGJvdW5kQWN0aW9uQ3JlYXRvcnMgPSB7fTtcblxuICBmb3IgKHZhciBrZXkgaW4gYWN0aW9uQ3JlYXRvcnMpIHtcbiAgICB2YXIgYWN0aW9uQ3JlYXRvciA9IGFjdGlvbkNyZWF0b3JzW2tleV07XG5cbiAgICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGJvdW5kQWN0aW9uQ3JlYXRvcnNba2V5XSA9IGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3IsIGRpc3BhdGNoKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYm91bmRBY3Rpb25DcmVhdG9ycztcbn1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICBrZXlzLnB1c2guYXBwbHkoa2V5cywgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpKTtcbiAgfVxuXG4gIGlmIChlbnVtZXJhYmxlT25seSkga2V5cyA9IGtleXMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHtcbiAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTtcbiAgfSk7XG4gIHJldHVybiBrZXlzO1xufVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkMih0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTtcblxuICAgIGlmIChpICUgMikge1xuICAgICAgb3duS2V5cyhzb3VyY2UsIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG93bktleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG4vKipcbiAqIENvbXBvc2VzIHNpbmdsZS1hcmd1bWVudCBmdW5jdGlvbnMgZnJvbSByaWdodCB0byBsZWZ0LiBUaGUgcmlnaHRtb3N0XG4gKiBmdW5jdGlvbiBjYW4gdGFrZSBtdWx0aXBsZSBhcmd1bWVudHMgYXMgaXQgcHJvdmlkZXMgdGhlIHNpZ25hdHVyZSBmb3JcbiAqIHRoZSByZXN1bHRpbmcgY29tcG9zaXRlIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IGZ1bmNzIFRoZSBmdW5jdGlvbnMgdG8gY29tcG9zZS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBmdW5jdGlvbiBvYnRhaW5lZCBieSBjb21wb3NpbmcgdGhlIGFyZ3VtZW50IGZ1bmN0aW9uc1xuICogZnJvbSByaWdodCB0byBsZWZ0LiBGb3IgZXhhbXBsZSwgY29tcG9zZShmLCBnLCBoKSBpcyBpZGVudGljYWwgdG8gZG9pbmdcbiAqICguLi5hcmdzKSA9PiBmKGcoaCguLi5hcmdzKSkpLlxuICovXG5mdW5jdGlvbiBjb21wb3NlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgZnVuY3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgZnVuY3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICBpZiAoZnVuY3MubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgIHJldHVybiBhcmc7XG4gICAgfTtcbiAgfVxuXG4gIGlmIChmdW5jcy5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gZnVuY3NbMF07XG4gIH1cblxuICByZXR1cm4gZnVuY3MucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBhKGIuYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpKTtcbiAgICB9O1xuICB9KTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgc3RvcmUgZW5oYW5jZXIgdGhhdCBhcHBsaWVzIG1pZGRsZXdhcmUgdG8gdGhlIGRpc3BhdGNoIG1ldGhvZFxuICogb2YgdGhlIFJlZHV4IHN0b3JlLiBUaGlzIGlzIGhhbmR5IGZvciBhIHZhcmlldHkgb2YgdGFza3MsIHN1Y2ggYXMgZXhwcmVzc2luZ1xuICogYXN5bmNocm9ub3VzIGFjdGlvbnMgaW4gYSBjb25jaXNlIG1hbm5lciwgb3IgbG9nZ2luZyBldmVyeSBhY3Rpb24gcGF5bG9hZC5cbiAqXG4gKiBTZWUgYHJlZHV4LXRodW5rYCBwYWNrYWdlIGFzIGFuIGV4YW1wbGUgb2YgdGhlIFJlZHV4IG1pZGRsZXdhcmUuXG4gKlxuICogQmVjYXVzZSBtaWRkbGV3YXJlIGlzIHBvdGVudGlhbGx5IGFzeW5jaHJvbm91cywgdGhpcyBzaG91bGQgYmUgdGhlIGZpcnN0XG4gKiBzdG9yZSBlbmhhbmNlciBpbiB0aGUgY29tcG9zaXRpb24gY2hhaW4uXG4gKlxuICogTm90ZSB0aGF0IGVhY2ggbWlkZGxld2FyZSB3aWxsIGJlIGdpdmVuIHRoZSBgZGlzcGF0Y2hgIGFuZCBgZ2V0U3RhdGVgIGZ1bmN0aW9uc1xuICogYXMgbmFtZWQgYXJndW1lbnRzLlxuICpcbiAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IG1pZGRsZXdhcmVzIFRoZSBtaWRkbGV3YXJlIGNoYWluIHRvIGJlIGFwcGxpZWQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgc3RvcmUgZW5oYW5jZXIgYXBwbHlpbmcgdGhlIG1pZGRsZXdhcmUuXG4gKi9cblxuZnVuY3Rpb24gYXBwbHlNaWRkbGV3YXJlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgbWlkZGxld2FyZXMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgbWlkZGxld2FyZXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGNyZWF0ZVN0b3JlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzdG9yZSA9IGNyZWF0ZVN0b3JlLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcblxuICAgICAgdmFyIF9kaXNwYXRjaCA9IGZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Rpc3BhdGNoaW5nIHdoaWxlIGNvbnN0cnVjdGluZyB5b3VyIG1pZGRsZXdhcmUgaXMgbm90IGFsbG93ZWQuICcgKyAnT3RoZXIgbWlkZGxld2FyZSB3b3VsZCBub3QgYmUgYXBwbGllZCB0byB0aGlzIGRpc3BhdGNoLicpO1xuICAgICAgfTtcblxuICAgICAgdmFyIG1pZGRsZXdhcmVBUEkgPSB7XG4gICAgICAgIGdldFN0YXRlOiBzdG9yZS5nZXRTdGF0ZSxcbiAgICAgICAgZGlzcGF0Y2g6IGZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICAgICAgICAgIHJldHVybiBfZGlzcGF0Y2guYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgdmFyIGNoYWluID0gbWlkZGxld2FyZXMubWFwKGZ1bmN0aW9uIChtaWRkbGV3YXJlKSB7XG4gICAgICAgIHJldHVybiBtaWRkbGV3YXJlKG1pZGRsZXdhcmVBUEkpO1xuICAgICAgfSk7XG4gICAgICBfZGlzcGF0Y2ggPSBjb21wb3NlLmFwcGx5KHZvaWQgMCwgY2hhaW4pKHN0b3JlLmRpc3BhdGNoKTtcbiAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkMih7fSwgc3RvcmUsIHtcbiAgICAgICAgZGlzcGF0Y2g6IF9kaXNwYXRjaFxuICAgICAgfSk7XG4gICAgfTtcbiAgfTtcbn1cblxuLypcbiAqIFRoaXMgaXMgYSBkdW1teSBmdW5jdGlvbiB0byBjaGVjayBpZiB0aGUgZnVuY3Rpb24gbmFtZSBoYXMgYmVlbiBhbHRlcmVkIGJ5IG1pbmlmaWNhdGlvbi5cbiAqIElmIHRoZSBmdW5jdGlvbiBoYXMgYmVlbiBtaW5pZmllZCBhbmQgTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJywgd2FybiB0aGUgdXNlci5cbiAqL1xuXG5mdW5jdGlvbiBpc0NydXNoZWQoKSB7fVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB0eXBlb2YgaXNDcnVzaGVkLm5hbWUgPT09ICdzdHJpbmcnICYmIGlzQ3J1c2hlZC5uYW1lICE9PSAnaXNDcnVzaGVkJykge1xuICB3YXJuaW5nKCdZb3UgYXJlIGN1cnJlbnRseSB1c2luZyBtaW5pZmllZCBjb2RlIG91dHNpZGUgb2YgTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiLiAnICsgJ1RoaXMgbWVhbnMgdGhhdCB5b3UgYXJlIHJ1bm5pbmcgYSBzbG93ZXIgZGV2ZWxvcG1lbnQgYnVpbGQgb2YgUmVkdXguICcgKyAnWW91IGNhbiB1c2UgbG9vc2UtZW52aWZ5IChodHRwczovL2dpdGh1Yi5jb20vemVydG9zaC9sb29zZS1lbnZpZnkpIGZvciBicm93c2VyaWZ5ICcgKyAnb3Igc2V0dGluZyBtb2RlIHRvIHByb2R1Y3Rpb24gaW4gd2VicGFjayAoaHR0cHM6Ly93ZWJwYWNrLmpzLm9yZy9jb25jZXB0cy9tb2RlLykgJyArICd0byBlbnN1cmUgeW91IGhhdmUgdGhlIGNvcnJlY3QgY29kZSBmb3IgeW91ciBwcm9kdWN0aW9uIGJ1aWxkLicpO1xufVxuXG5leHBvcnQgeyBBY3Rpb25UeXBlcyBhcyBfX0RPX05PVF9VU0VfX0FjdGlvblR5cGVzLCBhcHBseU1pZGRsZXdhcmUsIGJpbmRBY3Rpb25DcmVhdG9ycywgY29tYmluZVJlZHVjZXJzLCBjb21wb3NlLCBjcmVhdGVTdG9yZSB9O1xuIiwiaW1wb3J0IHZlcmlmeVBsYWluT2JqZWN0IGZyb20gJy4uL3V0aWxzL3ZlcmlmeVBsYWluT2JqZWN0JztcbmV4cG9ydCBmdW5jdGlvbiB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGdldENvbnN0YW50KSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbml0Q29uc3RhbnRTZWxlY3RvcihkaXNwYXRjaCwgb3B0aW9ucykge1xuICAgIHZhciBjb25zdGFudCA9IGdldENvbnN0YW50KGRpc3BhdGNoLCBvcHRpb25zKTtcblxuICAgIGZ1bmN0aW9uIGNvbnN0YW50U2VsZWN0b3IoKSB7XG4gICAgICByZXR1cm4gY29uc3RhbnQ7XG4gICAgfVxuXG4gICAgY29uc3RhbnRTZWxlY3Rvci5kZXBlbmRzT25Pd25Qcm9wcyA9IGZhbHNlO1xuICAgIHJldHVybiBjb25zdGFudFNlbGVjdG9yO1xuICB9O1xufSAvLyBkZXBlbmRzT25Pd25Qcm9wcyBpcyB1c2VkIGJ5IGNyZWF0ZU1hcFRvUHJvcHNQcm94eSB0byBkZXRlcm1pbmUgd2hldGhlciB0byBwYXNzIHByb3BzIGFzIGFyZ3Ncbi8vIHRvIHRoZSBtYXBUb1Byb3BzIGZ1bmN0aW9uIGJlaW5nIHdyYXBwZWQuIEl0IGlzIGFsc28gdXNlZCBieSBtYWtlUHVyZVByb3BzU2VsZWN0b3IgdG8gZGV0ZXJtaW5lXG4vLyB3aGV0aGVyIG1hcFRvUHJvcHMgbmVlZHMgdG8gYmUgaW52b2tlZCB3aGVuIHByb3BzIGhhdmUgY2hhbmdlZC5cbi8vIFxuLy8gQSBsZW5ndGggb2Ygb25lIHNpZ25hbHMgdGhhdCBtYXBUb1Byb3BzIGRvZXMgbm90IGRlcGVuZCBvbiBwcm9wcyBmcm9tIHRoZSBwYXJlbnQgY29tcG9uZW50LlxuLy8gQSBsZW5ndGggb2YgemVybyBpcyBhc3N1bWVkIHRvIG1lYW4gbWFwVG9Qcm9wcyBpcyBnZXR0aW5nIGFyZ3MgdmlhIGFyZ3VtZW50cyBvciAuLi5hcmdzIGFuZFxuLy8gdGhlcmVmb3JlIG5vdCByZXBvcnRpbmcgaXRzIGxlbmd0aCBhY2N1cmF0ZWx5Li5cblxuZXhwb3J0IGZ1bmN0aW9uIGdldERlcGVuZHNPbk93blByb3BzKG1hcFRvUHJvcHMpIHtcbiAgcmV0dXJuIG1hcFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMgIT09IG51bGwgJiYgbWFwVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcyAhPT0gdW5kZWZpbmVkID8gQm9vbGVhbihtYXBUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKSA6IG1hcFRvUHJvcHMubGVuZ3RoICE9PSAxO1xufSAvLyBVc2VkIGJ5IHdoZW5NYXBTdGF0ZVRvUHJvcHNJc0Z1bmN0aW9uIGFuZCB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNGdW5jdGlvbixcbi8vIHRoaXMgZnVuY3Rpb24gd3JhcHMgbWFwVG9Qcm9wcyBpbiBhIHByb3h5IGZ1bmN0aW9uIHdoaWNoIGRvZXMgc2V2ZXJhbCB0aGluZ3M6XG4vLyBcbi8vICAqIERldGVjdHMgd2hldGhlciB0aGUgbWFwVG9Qcm9wcyBmdW5jdGlvbiBiZWluZyBjYWxsZWQgZGVwZW5kcyBvbiBwcm9wcywgd2hpY2hcbi8vICAgIGlzIHVzZWQgYnkgc2VsZWN0b3JGYWN0b3J5IHRvIGRlY2lkZSBpZiBpdCBzaG91bGQgcmVpbnZva2Ugb24gcHJvcHMgY2hhbmdlcy5cbi8vICAgIFxuLy8gICogT24gZmlyc3QgY2FsbCwgaGFuZGxlcyBtYXBUb1Byb3BzIGlmIHJldHVybnMgYW5vdGhlciBmdW5jdGlvbiwgYW5kIHRyZWF0cyB0aGF0XG4vLyAgICBuZXcgZnVuY3Rpb24gYXMgdGhlIHRydWUgbWFwVG9Qcm9wcyBmb3Igc3Vic2VxdWVudCBjYWxscy5cbi8vICAgIFxuLy8gICogT24gZmlyc3QgY2FsbCwgdmVyaWZpZXMgdGhlIGZpcnN0IHJlc3VsdCBpcyBhIHBsYWluIG9iamVjdCwgaW4gb3JkZXIgdG8gd2FyblxuLy8gICAgdGhlIGRldmVsb3BlciB0aGF0IHRoZWlyIG1hcFRvUHJvcHMgZnVuY3Rpb24gaXMgbm90IHJldHVybmluZyBhIHZhbGlkIHJlc3VsdC5cbi8vICAgIFxuXG5leHBvcnQgZnVuY3Rpb24gd3JhcE1hcFRvUHJvcHNGdW5jKG1hcFRvUHJvcHMsIG1ldGhvZE5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGluaXRQcm94eVNlbGVjdG9yKGRpc3BhdGNoLCBfcmVmKSB7XG4gICAgdmFyIGRpc3BsYXlOYW1lID0gX3JlZi5kaXNwbGF5TmFtZTtcblxuICAgIHZhciBwcm94eSA9IGZ1bmN0aW9uIG1hcFRvUHJvcHNQcm94eShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKSB7XG4gICAgICByZXR1cm4gcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPyBwcm94eS5tYXBUb1Byb3BzKHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpIDogcHJveHkubWFwVG9Qcm9wcyhzdGF0ZU9yRGlzcGF0Y2gpO1xuICAgIH07IC8vIGFsbG93IGRldGVjdEZhY3RvcnlBbmRWZXJpZnkgdG8gZ2V0IG93blByb3BzXG5cblxuICAgIHByb3h5LmRlcGVuZHNPbk93blByb3BzID0gdHJ1ZTtcblxuICAgIHByb3h5Lm1hcFRvUHJvcHMgPSBmdW5jdGlvbiBkZXRlY3RGYWN0b3J5QW5kVmVyaWZ5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpIHtcbiAgICAgIHByb3h5Lm1hcFRvUHJvcHMgPSBtYXBUb1Byb3BzO1xuICAgICAgcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPSBnZXREZXBlbmRzT25Pd25Qcm9wcyhtYXBUb1Byb3BzKTtcbiAgICAgIHZhciBwcm9wcyA9IHByb3h5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpO1xuXG4gICAgICBpZiAodHlwZW9mIHByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHByb3h5Lm1hcFRvUHJvcHMgPSBwcm9wcztcbiAgICAgICAgcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPSBnZXREZXBlbmRzT25Pd25Qcm9wcyhwcm9wcyk7XG4gICAgICAgIHByb3BzID0gcHJveHkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB2ZXJpZnlQbGFpbk9iamVjdChwcm9wcywgZGlzcGxheU5hbWUsIG1ldGhvZE5hbWUpO1xuICAgICAgcmV0dXJuIHByb3BzO1xuICAgIH07XG5cbiAgICByZXR1cm4gcHJveHk7XG4gIH07XG59IiwiaW1wb3J0IHsgYmluZEFjdGlvbkNyZWF0b3JzIH0gZnJvbSAncmVkdXgnO1xuaW1wb3J0IHsgd3JhcE1hcFRvUHJvcHNDb25zdGFudCwgd3JhcE1hcFRvUHJvcHNGdW5jIH0gZnJvbSAnLi93cmFwTWFwVG9Qcm9wcyc7XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzRnVuY3Rpb24obWFwRGlzcGF0Y2hUb1Byb3BzKSB7XG4gIHJldHVybiB0eXBlb2YgbWFwRGlzcGF0Y2hUb1Byb3BzID09PSAnZnVuY3Rpb24nID8gd3JhcE1hcFRvUHJvcHNGdW5jKG1hcERpc3BhdGNoVG9Qcm9wcywgJ21hcERpc3BhdGNoVG9Qcm9wcycpIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc01pc3NpbmcobWFwRGlzcGF0Y2hUb1Byb3BzKSB7XG4gIHJldHVybiAhbWFwRGlzcGF0Y2hUb1Byb3BzID8gd3JhcE1hcFRvUHJvcHNDb25zdGFudChmdW5jdGlvbiAoZGlzcGF0Y2gpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZGlzcGF0Y2g6IGRpc3BhdGNoXG4gICAgfTtcbiAgfSkgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzT2JqZWN0KG1hcERpc3BhdGNoVG9Qcm9wcykge1xuICByZXR1cm4gbWFwRGlzcGF0Y2hUb1Byb3BzICYmIHR5cGVvZiBtYXBEaXNwYXRjaFRvUHJvcHMgPT09ICdvYmplY3QnID8gd3JhcE1hcFRvUHJvcHNDb25zdGFudChmdW5jdGlvbiAoZGlzcGF0Y2gpIHtcbiAgICByZXR1cm4gYmluZEFjdGlvbkNyZWF0b3JzKG1hcERpc3BhdGNoVG9Qcm9wcywgZGlzcGF0Y2gpO1xuICB9KSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBkZWZhdWx0IFt3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNGdW5jdGlvbiwgd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzTWlzc2luZywgd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzT2JqZWN0XTsiLCJpbXBvcnQgeyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50LCB3cmFwTWFwVG9Qcm9wc0Z1bmMgfSBmcm9tICcuL3dyYXBNYXBUb1Byb3BzJztcbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwU3RhdGVUb1Byb3BzSXNGdW5jdGlvbihtYXBTdGF0ZVRvUHJvcHMpIHtcbiAgcmV0dXJuIHR5cGVvZiBtYXBTdGF0ZVRvUHJvcHMgPT09ICdmdW5jdGlvbicgPyB3cmFwTWFwVG9Qcm9wc0Z1bmMobWFwU3RhdGVUb1Byb3BzLCAnbWFwU3RhdGVUb1Byb3BzJykgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcFN0YXRlVG9Qcm9wc0lzTWlzc2luZyhtYXBTdGF0ZVRvUHJvcHMpIHtcbiAgcmV0dXJuICFtYXBTdGF0ZVRvUHJvcHMgPyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge307XG4gIH0pIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGRlZmF1bHQgW3doZW5NYXBTdGF0ZVRvUHJvcHNJc0Z1bmN0aW9uLCB3aGVuTWFwU3RhdGVUb1Byb3BzSXNNaXNzaW5nXTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCB2ZXJpZnlQbGFpbk9iamVjdCBmcm9tICcuLi91dGlscy92ZXJpZnlQbGFpbk9iamVjdCc7XG5leHBvcnQgZnVuY3Rpb24gZGVmYXVsdE1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpIHtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBvd25Qcm9wcywgc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcyk7XG59XG5leHBvcnQgZnVuY3Rpb24gd3JhcE1lcmdlUHJvcHNGdW5jKG1lcmdlUHJvcHMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGluaXRNZXJnZVByb3BzUHJveHkoZGlzcGF0Y2gsIF9yZWYpIHtcbiAgICB2YXIgZGlzcGxheU5hbWUgPSBfcmVmLmRpc3BsYXlOYW1lLFxuICAgICAgICBwdXJlID0gX3JlZi5wdXJlLFxuICAgICAgICBhcmVNZXJnZWRQcm9wc0VxdWFsID0gX3JlZi5hcmVNZXJnZWRQcm9wc0VxdWFsO1xuICAgIHZhciBoYXNSdW5PbmNlID0gZmFsc2U7XG4gICAgdmFyIG1lcmdlZFByb3BzO1xuICAgIHJldHVybiBmdW5jdGlvbiBtZXJnZVByb3BzUHJveHkoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpIHtcbiAgICAgIHZhciBuZXh0TWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcblxuICAgICAgaWYgKGhhc1J1bk9uY2UpIHtcbiAgICAgICAgaWYgKCFwdXJlIHx8ICFhcmVNZXJnZWRQcm9wc0VxdWFsKG5leHRNZXJnZWRQcm9wcywgbWVyZ2VkUHJvcHMpKSBtZXJnZWRQcm9wcyA9IG5leHRNZXJnZWRQcm9wcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGhhc1J1bk9uY2UgPSB0cnVlO1xuICAgICAgICBtZXJnZWRQcm9wcyA9IG5leHRNZXJnZWRQcm9wcztcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHZlcmlmeVBsYWluT2JqZWN0KG1lcmdlZFByb3BzLCBkaXNwbGF5TmFtZSwgJ21lcmdlUHJvcHMnKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICAgIH07XG4gIH07XG59XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1lcmdlUHJvcHNJc0Z1bmN0aW9uKG1lcmdlUHJvcHMpIHtcbiAgcmV0dXJuIHR5cGVvZiBtZXJnZVByb3BzID09PSAnZnVuY3Rpb24nID8gd3JhcE1lcmdlUHJvcHNGdW5jKG1lcmdlUHJvcHMpIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NZXJnZVByb3BzSXNPbWl0dGVkKG1lcmdlUHJvcHMpIHtcbiAgcmV0dXJuICFtZXJnZVByb3BzID8gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBkZWZhdWx0TWVyZ2VQcm9wcztcbiAgfSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBkZWZhdWx0IFt3aGVuTWVyZ2VQcm9wc0lzRnVuY3Rpb24sIHdoZW5NZXJnZVByb3BzSXNPbWl0dGVkXTsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCB2ZXJpZnlTdWJzZWxlY3RvcnMgZnJvbSAnLi92ZXJpZnlTdWJzZWxlY3RvcnMnO1xuZXhwb3J0IGZ1bmN0aW9uIGltcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIGRpc3BhdGNoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3Ioc3RhdGUsIG93blByb3BzKSB7XG4gICAgcmV0dXJuIG1lcmdlUHJvcHMobWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyksIG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpLCBvd25Qcm9wcyk7XG4gIH07XG59XG5leHBvcnQgZnVuY3Rpb24gcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIGRpc3BhdGNoLCBfcmVmKSB7XG4gIHZhciBhcmVTdGF0ZXNFcXVhbCA9IF9yZWYuYXJlU3RhdGVzRXF1YWwsXG4gICAgICBhcmVPd25Qcm9wc0VxdWFsID0gX3JlZi5hcmVPd25Qcm9wc0VxdWFsLFxuICAgICAgYXJlU3RhdGVQcm9wc0VxdWFsID0gX3JlZi5hcmVTdGF0ZVByb3BzRXF1YWw7XG4gIHZhciBoYXNSdW5BdExlYXN0T25jZSA9IGZhbHNlO1xuICB2YXIgc3RhdGU7XG4gIHZhciBvd25Qcm9wcztcbiAgdmFyIHN0YXRlUHJvcHM7XG4gIHZhciBkaXNwYXRjaFByb3BzO1xuICB2YXIgbWVyZ2VkUHJvcHM7XG5cbiAgZnVuY3Rpb24gaGFuZGxlRmlyc3RDYWxsKGZpcnN0U3RhdGUsIGZpcnN0T3duUHJvcHMpIHtcbiAgICBzdGF0ZSA9IGZpcnN0U3RhdGU7XG4gICAgb3duUHJvcHMgPSBmaXJzdE93blByb3BzO1xuICAgIHN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcbiAgICBkaXNwYXRjaFByb3BzID0gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyk7XG4gICAgbWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcbiAgICBoYXNSdW5BdExlYXN0T25jZSA9IHRydWU7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlTmV3UHJvcHNBbmROZXdTdGF0ZSgpIHtcbiAgICBzdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG4gICAgaWYgKG1hcERpc3BhdGNoVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcykgZGlzcGF0Y2hQcm9wcyA9IG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpO1xuICAgIG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlTmV3UHJvcHMoKSB7XG4gICAgaWYgKG1hcFN0YXRlVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcykgc3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuICAgIGlmIChtYXBEaXNwYXRjaFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIGRpc3BhdGNoUHJvcHMgPSBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKTtcbiAgICBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU5ld1N0YXRlKCkge1xuICAgIHZhciBuZXh0U3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuICAgIHZhciBzdGF0ZVByb3BzQ2hhbmdlZCA9ICFhcmVTdGF0ZVByb3BzRXF1YWwobmV4dFN0YXRlUHJvcHMsIHN0YXRlUHJvcHMpO1xuICAgIHN0YXRlUHJvcHMgPSBuZXh0U3RhdGVQcm9wcztcbiAgICBpZiAoc3RhdGVQcm9wc0NoYW5nZWQpIG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlU3Vic2VxdWVudENhbGxzKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSB7XG4gICAgdmFyIHByb3BzQ2hhbmdlZCA9ICFhcmVPd25Qcm9wc0VxdWFsKG5leHRPd25Qcm9wcywgb3duUHJvcHMpO1xuICAgIHZhciBzdGF0ZUNoYW5nZWQgPSAhYXJlU3RhdGVzRXF1YWwobmV4dFN0YXRlLCBzdGF0ZSk7XG4gICAgc3RhdGUgPSBuZXh0U3RhdGU7XG4gICAgb3duUHJvcHMgPSBuZXh0T3duUHJvcHM7XG4gICAgaWYgKHByb3BzQ2hhbmdlZCAmJiBzdGF0ZUNoYW5nZWQpIHJldHVybiBoYW5kbGVOZXdQcm9wc0FuZE5ld1N0YXRlKCk7XG4gICAgaWYgKHByb3BzQ2hhbmdlZCkgcmV0dXJuIGhhbmRsZU5ld1Byb3BzKCk7XG4gICAgaWYgKHN0YXRlQ2hhbmdlZCkgcmV0dXJuIGhhbmRsZU5ld1N0YXRlKCk7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHB1cmVGaW5hbFByb3BzU2VsZWN0b3IobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpIHtcbiAgICByZXR1cm4gaGFzUnVuQXRMZWFzdE9uY2UgPyBoYW5kbGVTdWJzZXF1ZW50Q2FsbHMobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpIDogaGFuZGxlRmlyc3RDYWxsKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKTtcbiAgfTtcbn0gLy8gVE9ETzogQWRkIG1vcmUgY29tbWVudHNcbi8vIElmIHB1cmUgaXMgdHJ1ZSwgdGhlIHNlbGVjdG9yIHJldHVybmVkIGJ5IHNlbGVjdG9yRmFjdG9yeSB3aWxsIG1lbW9pemUgaXRzIHJlc3VsdHMsXG4vLyBhbGxvd2luZyBjb25uZWN0QWR2YW5jZWQncyBzaG91bGRDb21wb25lbnRVcGRhdGUgdG8gcmV0dXJuIGZhbHNlIGlmIGZpbmFsXG4vLyBwcm9wcyBoYXZlIG5vdCBjaGFuZ2VkLiBJZiBmYWxzZSwgdGhlIHNlbGVjdG9yIHdpbGwgYWx3YXlzIHJldHVybiBhIG5ld1xuLy8gb2JqZWN0IGFuZCBzaG91bGRDb21wb25lbnRVcGRhdGUgd2lsbCBhbHdheXMgcmV0dXJuIHRydWUuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkoZGlzcGF0Y2gsIF9yZWYyKSB7XG4gIHZhciBpbml0TWFwU3RhdGVUb1Byb3BzID0gX3JlZjIuaW5pdE1hcFN0YXRlVG9Qcm9wcyxcbiAgICAgIGluaXRNYXBEaXNwYXRjaFRvUHJvcHMgPSBfcmVmMi5pbml0TWFwRGlzcGF0Y2hUb1Byb3BzLFxuICAgICAgaW5pdE1lcmdlUHJvcHMgPSBfcmVmMi5pbml0TWVyZ2VQcm9wcyxcbiAgICAgIG9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmMiwgW1wiaW5pdE1hcFN0YXRlVG9Qcm9wc1wiLCBcImluaXRNYXBEaXNwYXRjaFRvUHJvcHNcIiwgXCJpbml0TWVyZ2VQcm9wc1wiXSk7XG5cbiAgdmFyIG1hcFN0YXRlVG9Qcm9wcyA9IGluaXRNYXBTdGF0ZVRvUHJvcHMoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuICB2YXIgbWFwRGlzcGF0Y2hUb1Byb3BzID0gaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3B0aW9ucyk7XG4gIHZhciBtZXJnZVByb3BzID0gaW5pdE1lcmdlUHJvcHMoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmVyaWZ5U3Vic2VsZWN0b3JzKG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBvcHRpb25zLmRpc3BsYXlOYW1lKTtcbiAgfVxuXG4gIHZhciBzZWxlY3RvckZhY3RvcnkgPSBvcHRpb25zLnB1cmUgPyBwdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSA6IGltcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3Rvcnk7XG4gIHJldHVybiBzZWxlY3RvckZhY3RvcnkobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIGRpc3BhdGNoLCBvcHRpb25zKTtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IGNvbm5lY3RBZHZhbmNlZCBmcm9tICcuLi9jb21wb25lbnRzL2Nvbm5lY3RBZHZhbmNlZCc7XG5pbXBvcnQgc2hhbGxvd0VxdWFsIGZyb20gJy4uL3V0aWxzL3NoYWxsb3dFcXVhbCc7XG5pbXBvcnQgZGVmYXVsdE1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyBmcm9tICcuL21hcERpc3BhdGNoVG9Qcm9wcyc7XG5pbXBvcnQgZGVmYXVsdE1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyBmcm9tICcuL21hcFN0YXRlVG9Qcm9wcyc7XG5pbXBvcnQgZGVmYXVsdE1lcmdlUHJvcHNGYWN0b3JpZXMgZnJvbSAnLi9tZXJnZVByb3BzJztcbmltcG9ydCBkZWZhdWx0U2VsZWN0b3JGYWN0b3J5IGZyb20gJy4vc2VsZWN0b3JGYWN0b3J5Jztcbi8qXG4gIGNvbm5lY3QgaXMgYSBmYWNhZGUgb3ZlciBjb25uZWN0QWR2YW5jZWQuIEl0IHR1cm5zIGl0cyBhcmdzIGludG8gYSBjb21wYXRpYmxlXG4gIHNlbGVjdG9yRmFjdG9yeSwgd2hpY2ggaGFzIHRoZSBzaWduYXR1cmU6XG5cbiAgICAoZGlzcGF0Y2gsIG9wdGlvbnMpID0+IChuZXh0U3RhdGUsIG5leHRPd25Qcm9wcykgPT4gbmV4dEZpbmFsUHJvcHNcbiAgXG4gIGNvbm5lY3QgcGFzc2VzIGl0cyBhcmdzIHRvIGNvbm5lY3RBZHZhbmNlZCBhcyBvcHRpb25zLCB3aGljaCB3aWxsIGluIHR1cm4gcGFzcyB0aGVtIHRvXG4gIHNlbGVjdG9yRmFjdG9yeSBlYWNoIHRpbWUgYSBDb25uZWN0IGNvbXBvbmVudCBpbnN0YW5jZSBpcyBpbnN0YW50aWF0ZWQgb3IgaG90IHJlbG9hZGVkLlxuXG4gIHNlbGVjdG9yRmFjdG9yeSByZXR1cm5zIGEgZmluYWwgcHJvcHMgc2VsZWN0b3IgZnJvbSBpdHMgbWFwU3RhdGVUb1Byb3BzLFxuICBtYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzLCBtZXJnZVByb3BzLFxuICBtZXJnZVByb3BzRmFjdG9yaWVzLCBhbmQgcHVyZSBhcmdzLlxuXG4gIFRoZSByZXN1bHRpbmcgZmluYWwgcHJvcHMgc2VsZWN0b3IgaXMgY2FsbGVkIGJ5IHRoZSBDb25uZWN0IGNvbXBvbmVudCBpbnN0YW5jZSB3aGVuZXZlclxuICBpdCByZWNlaXZlcyBuZXcgcHJvcHMgb3Igc3RvcmUgc3RhdGUuXG4gKi9cblxuZnVuY3Rpb24gbWF0Y2goYXJnLCBmYWN0b3JpZXMsIG5hbWUpIHtcbiAgZm9yICh2YXIgaSA9IGZhY3Rvcmllcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIHZhciByZXN1bHQgPSBmYWN0b3JpZXNbaV0oYXJnKTtcbiAgICBpZiAocmVzdWx0KSByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChkaXNwYXRjaCwgb3B0aW9ucykge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgdmFsdWUgb2YgdHlwZSBcIiArIHR5cGVvZiBhcmcgKyBcIiBmb3IgXCIgKyBuYW1lICsgXCIgYXJndW1lbnQgd2hlbiBjb25uZWN0aW5nIGNvbXBvbmVudCBcIiArIG9wdGlvbnMud3JhcHBlZENvbXBvbmVudE5hbWUgKyBcIi5cIik7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0cmljdEVxdWFsKGEsIGIpIHtcbiAgcmV0dXJuIGEgPT09IGI7XG59IC8vIGNyZWF0ZUNvbm5lY3Qgd2l0aCBkZWZhdWx0IGFyZ3MgYnVpbGRzIHRoZSAnb2ZmaWNpYWwnIGNvbm5lY3QgYmVoYXZpb3IuIENhbGxpbmcgaXQgd2l0aFxuLy8gZGlmZmVyZW50IG9wdGlvbnMgb3BlbnMgdXAgc29tZSB0ZXN0aW5nIGFuZCBleHRlbnNpYmlsaXR5IHNjZW5hcmlvc1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDb25uZWN0KF90ZW1wKSB7XG4gIHZhciBfcmVmID0gX3RlbXAgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAsXG4gICAgICBfcmVmJGNvbm5lY3RIT0MgPSBfcmVmLmNvbm5lY3RIT0MsXG4gICAgICBjb25uZWN0SE9DID0gX3JlZiRjb25uZWN0SE9DID09PSB2b2lkIDAgPyBjb25uZWN0QWR2YW5jZWQgOiBfcmVmJGNvbm5lY3RIT0MsXG4gICAgICBfcmVmJG1hcFN0YXRlVG9Qcm9wc0YgPSBfcmVmLm1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyxcbiAgICAgIG1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyA9IF9yZWYkbWFwU3RhdGVUb1Byb3BzRiA9PT0gdm9pZCAwID8gZGVmYXVsdE1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyA6IF9yZWYkbWFwU3RhdGVUb1Byb3BzRixcbiAgICAgIF9yZWYkbWFwRGlzcGF0Y2hUb1BybyA9IF9yZWYubWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzLFxuICAgICAgbWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzID0gX3JlZiRtYXBEaXNwYXRjaFRvUHJvID09PSB2b2lkIDAgPyBkZWZhdWx0TWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzIDogX3JlZiRtYXBEaXNwYXRjaFRvUHJvLFxuICAgICAgX3JlZiRtZXJnZVByb3BzRmFjdG9yID0gX3JlZi5tZXJnZVByb3BzRmFjdG9yaWVzLFxuICAgICAgbWVyZ2VQcm9wc0ZhY3RvcmllcyA9IF9yZWYkbWVyZ2VQcm9wc0ZhY3RvciA9PT0gdm9pZCAwID8gZGVmYXVsdE1lcmdlUHJvcHNGYWN0b3JpZXMgOiBfcmVmJG1lcmdlUHJvcHNGYWN0b3IsXG4gICAgICBfcmVmJHNlbGVjdG9yRmFjdG9yeSA9IF9yZWYuc2VsZWN0b3JGYWN0b3J5LFxuICAgICAgc2VsZWN0b3JGYWN0b3J5ID0gX3JlZiRzZWxlY3RvckZhY3RvcnkgPT09IHZvaWQgMCA/IGRlZmF1bHRTZWxlY3RvckZhY3RvcnkgOiBfcmVmJHNlbGVjdG9yRmFjdG9yeTtcblxuICByZXR1cm4gZnVuY3Rpb24gY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgX3JlZjIpIHtcbiAgICBpZiAoX3JlZjIgPT09IHZvaWQgMCkge1xuICAgICAgX3JlZjIgPSB7fTtcbiAgICB9XG5cbiAgICB2YXIgX3JlZjMgPSBfcmVmMixcbiAgICAgICAgX3JlZjMkcHVyZSA9IF9yZWYzLnB1cmUsXG4gICAgICAgIHB1cmUgPSBfcmVmMyRwdXJlID09PSB2b2lkIDAgPyB0cnVlIDogX3JlZjMkcHVyZSxcbiAgICAgICAgX3JlZjMkYXJlU3RhdGVzRXF1YWwgPSBfcmVmMy5hcmVTdGF0ZXNFcXVhbCxcbiAgICAgICAgYXJlU3RhdGVzRXF1YWwgPSBfcmVmMyRhcmVTdGF0ZXNFcXVhbCA9PT0gdm9pZCAwID8gc3RyaWN0RXF1YWwgOiBfcmVmMyRhcmVTdGF0ZXNFcXVhbCxcbiAgICAgICAgX3JlZjMkYXJlT3duUHJvcHNFcXVhID0gX3JlZjMuYXJlT3duUHJvcHNFcXVhbCxcbiAgICAgICAgYXJlT3duUHJvcHNFcXVhbCA9IF9yZWYzJGFyZU93blByb3BzRXF1YSA9PT0gdm9pZCAwID8gc2hhbGxvd0VxdWFsIDogX3JlZjMkYXJlT3duUHJvcHNFcXVhLFxuICAgICAgICBfcmVmMyRhcmVTdGF0ZVByb3BzRXEgPSBfcmVmMy5hcmVTdGF0ZVByb3BzRXF1YWwsXG4gICAgICAgIGFyZVN0YXRlUHJvcHNFcXVhbCA9IF9yZWYzJGFyZVN0YXRlUHJvcHNFcSA9PT0gdm9pZCAwID8gc2hhbGxvd0VxdWFsIDogX3JlZjMkYXJlU3RhdGVQcm9wc0VxLFxuICAgICAgICBfcmVmMyRhcmVNZXJnZWRQcm9wc0UgPSBfcmVmMy5hcmVNZXJnZWRQcm9wc0VxdWFsLFxuICAgICAgICBhcmVNZXJnZWRQcm9wc0VxdWFsID0gX3JlZjMkYXJlTWVyZ2VkUHJvcHNFID09PSB2b2lkIDAgPyBzaGFsbG93RXF1YWwgOiBfcmVmMyRhcmVNZXJnZWRQcm9wc0UsXG4gICAgICAgIGV4dHJhT3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYzLCBbXCJwdXJlXCIsIFwiYXJlU3RhdGVzRXF1YWxcIiwgXCJhcmVPd25Qcm9wc0VxdWFsXCIsIFwiYXJlU3RhdGVQcm9wc0VxdWFsXCIsIFwiYXJlTWVyZ2VkUHJvcHNFcXVhbFwiXSk7XG5cbiAgICB2YXIgaW5pdE1hcFN0YXRlVG9Qcm9wcyA9IG1hdGNoKG1hcFN0YXRlVG9Qcm9wcywgbWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzLCAnbWFwU3RhdGVUb1Byb3BzJyk7XG4gICAgdmFyIGluaXRNYXBEaXNwYXRjaFRvUHJvcHMgPSBtYXRjaChtYXBEaXNwYXRjaFRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcywgJ21hcERpc3BhdGNoVG9Qcm9wcycpO1xuICAgIHZhciBpbml0TWVyZ2VQcm9wcyA9IG1hdGNoKG1lcmdlUHJvcHMsIG1lcmdlUHJvcHNGYWN0b3JpZXMsICdtZXJnZVByb3BzJyk7XG4gICAgcmV0dXJuIGNvbm5lY3RIT0Moc2VsZWN0b3JGYWN0b3J5LCBfZXh0ZW5kcyh7XG4gICAgICAvLyB1c2VkIGluIGVycm9yIG1lc3NhZ2VzXG4gICAgICBtZXRob2ROYW1lOiAnY29ubmVjdCcsXG4gICAgICAvLyB1c2VkIHRvIGNvbXB1dGUgQ29ubmVjdCdzIGRpc3BsYXlOYW1lIGZyb20gdGhlIHdyYXBwZWQgY29tcG9uZW50J3MgZGlzcGxheU5hbWUuXG4gICAgICBnZXREaXNwbGF5TmFtZTogZnVuY3Rpb24gZ2V0RGlzcGxheU5hbWUobmFtZSkge1xuICAgICAgICByZXR1cm4gXCJDb25uZWN0KFwiICsgbmFtZSArIFwiKVwiO1xuICAgICAgfSxcbiAgICAgIC8vIGlmIG1hcFN0YXRlVG9Qcm9wcyBpcyBmYWxzeSwgdGhlIENvbm5lY3QgY29tcG9uZW50IGRvZXNuJ3Qgc3Vic2NyaWJlIHRvIHN0b3JlIHN0YXRlIGNoYW5nZXNcbiAgICAgIHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlczogQm9vbGVhbihtYXBTdGF0ZVRvUHJvcHMpLFxuICAgICAgLy8gcGFzc2VkIHRocm91Z2ggdG8gc2VsZWN0b3JGYWN0b3J5XG4gICAgICBpbml0TWFwU3RhdGVUb1Byb3BzOiBpbml0TWFwU3RhdGVUb1Byb3BzLFxuICAgICAgaW5pdE1hcERpc3BhdGNoVG9Qcm9wczogaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyxcbiAgICAgIGluaXRNZXJnZVByb3BzOiBpbml0TWVyZ2VQcm9wcyxcbiAgICAgIHB1cmU6IHB1cmUsXG4gICAgICBhcmVTdGF0ZXNFcXVhbDogYXJlU3RhdGVzRXF1YWwsXG4gICAgICBhcmVPd25Qcm9wc0VxdWFsOiBhcmVPd25Qcm9wc0VxdWFsLFxuICAgICAgYXJlU3RhdGVQcm9wc0VxdWFsOiBhcmVTdGF0ZVByb3BzRXF1YWwsXG4gICAgICBhcmVNZXJnZWRQcm9wc0VxdWFsOiBhcmVNZXJnZWRQcm9wc0VxdWFsXG4gICAgfSwgZXh0cmFPcHRpb25zKSk7XG4gIH07XG59XG5leHBvcnQgZGVmYXVsdCBjcmVhdGVDb25uZWN0KCk7IiwiZnVuY3Rpb24gaXNBYnNvbHV0ZShwYXRobmFtZSkge1xuICByZXR1cm4gcGF0aG5hbWUuY2hhckF0KDApID09PSAnLyc7XG59XG5cbi8vIEFib3V0IDEuNXggZmFzdGVyIHRoYW4gdGhlIHR3by1hcmcgdmVyc2lvbiBvZiBBcnJheSNzcGxpY2UoKVxuZnVuY3Rpb24gc3BsaWNlT25lKGxpc3QsIGluZGV4KSB7XG4gIGZvciAodmFyIGkgPSBpbmRleCwgayA9IGkgKyAxLCBuID0gbGlzdC5sZW5ndGg7IGsgPCBuOyBpICs9IDEsIGsgKz0gMSkge1xuICAgIGxpc3RbaV0gPSBsaXN0W2tdO1xuICB9XG5cbiAgbGlzdC5wb3AoKTtcbn1cblxuLy8gVGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBiYXNlZCBoZWF2aWx5IG9uIG5vZGUncyB1cmwucGFyc2VcbmZ1bmN0aW9uIHJlc29sdmVQYXRobmFtZSh0bykge1xuICB2YXIgZnJvbSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJyc7XG5cbiAgdmFyIHRvUGFydHMgPSB0byAmJiB0by5zcGxpdCgnLycpIHx8IFtdO1xuICB2YXIgZnJvbVBhcnRzID0gZnJvbSAmJiBmcm9tLnNwbGl0KCcvJykgfHwgW107XG5cbiAgdmFyIGlzVG9BYnMgPSB0byAmJiBpc0Fic29sdXRlKHRvKTtcbiAgdmFyIGlzRnJvbUFicyA9IGZyb20gJiYgaXNBYnNvbHV0ZShmcm9tKTtcbiAgdmFyIG11c3RFbmRBYnMgPSBpc1RvQWJzIHx8IGlzRnJvbUFicztcblxuICBpZiAodG8gJiYgaXNBYnNvbHV0ZSh0bykpIHtcbiAgICAvLyB0byBpcyBhYnNvbHV0ZVxuICAgIGZyb21QYXJ0cyA9IHRvUGFydHM7XG4gIH0gZWxzZSBpZiAodG9QYXJ0cy5sZW5ndGgpIHtcbiAgICAvLyB0byBpcyByZWxhdGl2ZSwgZHJvcCB0aGUgZmlsZW5hbWVcbiAgICBmcm9tUGFydHMucG9wKCk7XG4gICAgZnJvbVBhcnRzID0gZnJvbVBhcnRzLmNvbmNhdCh0b1BhcnRzKTtcbiAgfVxuXG4gIGlmICghZnJvbVBhcnRzLmxlbmd0aCkgcmV0dXJuICcvJztcblxuICB2YXIgaGFzVHJhaWxpbmdTbGFzaCA9IHZvaWQgMDtcbiAgaWYgKGZyb21QYXJ0cy5sZW5ndGgpIHtcbiAgICB2YXIgbGFzdCA9IGZyb21QYXJ0c1tmcm9tUGFydHMubGVuZ3RoIC0gMV07XG4gICAgaGFzVHJhaWxpbmdTbGFzaCA9IGxhc3QgPT09ICcuJyB8fCBsYXN0ID09PSAnLi4nIHx8IGxhc3QgPT09ICcnO1xuICB9IGVsc2Uge1xuICAgIGhhc1RyYWlsaW5nU2xhc2ggPSBmYWxzZTtcbiAgfVxuXG4gIHZhciB1cCA9IDA7XG4gIGZvciAodmFyIGkgPSBmcm9tUGFydHMubGVuZ3RoOyBpID49IDA7IGktLSkge1xuICAgIHZhciBwYXJ0ID0gZnJvbVBhcnRzW2ldO1xuXG4gICAgaWYgKHBhcnQgPT09ICcuJykge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgfSBlbHNlIGlmIChwYXJ0ID09PSAnLi4nKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICAgIHVwKys7XG4gICAgfSBlbHNlIGlmICh1cCkge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgICB1cC0tO1xuICAgIH1cbiAgfVxuXG4gIGlmICghbXVzdEVuZEFicykgZm9yICg7IHVwLS07IHVwKSB7XG4gICAgZnJvbVBhcnRzLnVuc2hpZnQoJy4uJyk7XG4gIH1pZiAobXVzdEVuZEFicyAmJiBmcm9tUGFydHNbMF0gIT09ICcnICYmICghZnJvbVBhcnRzWzBdIHx8ICFpc0Fic29sdXRlKGZyb21QYXJ0c1swXSkpKSBmcm9tUGFydHMudW5zaGlmdCgnJyk7XG5cbiAgdmFyIHJlc3VsdCA9IGZyb21QYXJ0cy5qb2luKCcvJyk7XG5cbiAgaWYgKGhhc1RyYWlsaW5nU2xhc2ggJiYgcmVzdWx0LnN1YnN0cigtMSkgIT09ICcvJykgcmVzdWx0ICs9ICcvJztcblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCByZXNvbHZlUGF0aG5hbWU7IiwidmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG5mdW5jdGlvbiB2YWx1ZUVxdWFsKGEsIGIpIHtcbiAgaWYgKGEgPT09IGIpIHJldHVybiB0cnVlO1xuXG4gIGlmIChhID09IG51bGwgfHwgYiA9PSBudWxsKSByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkoYSkpIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShiKSAmJiBhLmxlbmd0aCA9PT0gYi5sZW5ndGggJiYgYS5ldmVyeShmdW5jdGlvbiAoaXRlbSwgaW5kZXgpIHtcbiAgICAgIHJldHVybiB2YWx1ZUVxdWFsKGl0ZW0sIGJbaW5kZXhdKTtcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBhVHlwZSA9IHR5cGVvZiBhID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihhKTtcbiAgdmFyIGJUeXBlID0gdHlwZW9mIGIgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGIpO1xuXG4gIGlmIChhVHlwZSAhPT0gYlR5cGUpIHJldHVybiBmYWxzZTtcblxuICBpZiAoYVR5cGUgPT09ICdvYmplY3QnKSB7XG4gICAgdmFyIGFWYWx1ZSA9IGEudmFsdWVPZigpO1xuICAgIHZhciBiVmFsdWUgPSBiLnZhbHVlT2YoKTtcblxuICAgIGlmIChhVmFsdWUgIT09IGEgfHwgYlZhbHVlICE9PSBiKSByZXR1cm4gdmFsdWVFcXVhbChhVmFsdWUsIGJWYWx1ZSk7XG5cbiAgICB2YXIgYUtleXMgPSBPYmplY3Qua2V5cyhhKTtcbiAgICB2YXIgYktleXMgPSBPYmplY3Qua2V5cyhiKTtcblxuICAgIGlmIChhS2V5cy5sZW5ndGggIT09IGJLZXlzLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuXG4gICAgcmV0dXJuIGFLZXlzLmV2ZXJ5KGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHJldHVybiB2YWx1ZUVxdWFsKGFba2V5XSwgYltrZXldKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdmFsdWVFcXVhbDsiLCJ2YXIgaXNQcm9kdWN0aW9uID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJztcbnZhciBwcmVmaXggPSAnSW52YXJpYW50IGZhaWxlZCc7XG5mdW5jdGlvbiBpbnZhcmlhbnQoY29uZGl0aW9uLCBtZXNzYWdlKSB7XG4gIGlmIChjb25kaXRpb24pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoaXNQcm9kdWN0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHByZWZpeCk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHByZWZpeCArIFwiOiBcIiArIChtZXNzYWdlIHx8ICcnKSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgaW52YXJpYW50O1xuIiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0IHJlc29sdmVQYXRobmFtZSBmcm9tICdyZXNvbHZlLXBhdGhuYW1lJztcbmltcG9ydCB2YWx1ZUVxdWFsIGZyb20gJ3ZhbHVlLWVxdWFsJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3Rpbnktd2FybmluZyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ3RpbnktaW52YXJpYW50JztcblxuZnVuY3Rpb24gYWRkTGVhZGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnLycgPyBwYXRoIDogJy8nICsgcGF0aDtcbn1cbmZ1bmN0aW9uIHN0cmlwTGVhZGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnLycgPyBwYXRoLnN1YnN0cigxKSA6IHBhdGg7XG59XG5mdW5jdGlvbiBoYXNCYXNlbmFtZShwYXRoLCBwcmVmaXgpIHtcbiAgcmV0dXJuIG5ldyBSZWdFeHAoJ14nICsgcHJlZml4ICsgJyhcXFxcL3xcXFxcP3wjfCQpJywgJ2knKS50ZXN0KHBhdGgpO1xufVxuZnVuY3Rpb24gc3RyaXBCYXNlbmFtZShwYXRoLCBwcmVmaXgpIHtcbiAgcmV0dXJuIGhhc0Jhc2VuYW1lKHBhdGgsIHByZWZpeCkgPyBwYXRoLnN1YnN0cihwcmVmaXgubGVuZ3RoKSA6IHBhdGg7XG59XG5mdW5jdGlvbiBzdHJpcFRyYWlsaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQocGF0aC5sZW5ndGggLSAxKSA9PT0gJy8nID8gcGF0aC5zbGljZSgwLCAtMSkgOiBwYXRoO1xufVxuZnVuY3Rpb24gcGFyc2VQYXRoKHBhdGgpIHtcbiAgdmFyIHBhdGhuYW1lID0gcGF0aCB8fCAnLyc7XG4gIHZhciBzZWFyY2ggPSAnJztcbiAgdmFyIGhhc2ggPSAnJztcbiAgdmFyIGhhc2hJbmRleCA9IHBhdGhuYW1lLmluZGV4T2YoJyMnKTtcblxuICBpZiAoaGFzaEluZGV4ICE9PSAtMSkge1xuICAgIGhhc2ggPSBwYXRobmFtZS5zdWJzdHIoaGFzaEluZGV4KTtcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnN1YnN0cigwLCBoYXNoSW5kZXgpO1xuICB9XG5cbiAgdmFyIHNlYXJjaEluZGV4ID0gcGF0aG5hbWUuaW5kZXhPZignPycpO1xuXG4gIGlmIChzZWFyY2hJbmRleCAhPT0gLTEpIHtcbiAgICBzZWFyY2ggPSBwYXRobmFtZS5zdWJzdHIoc2VhcmNoSW5kZXgpO1xuICAgIHBhdGhuYW1lID0gcGF0aG5hbWUuc3Vic3RyKDAsIHNlYXJjaEluZGV4KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcGF0aG5hbWU6IHBhdGhuYW1lLFxuICAgIHNlYXJjaDogc2VhcmNoID09PSAnPycgPyAnJyA6IHNlYXJjaCxcbiAgICBoYXNoOiBoYXNoID09PSAnIycgPyAnJyA6IGhhc2hcbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVBhdGgobG9jYXRpb24pIHtcbiAgdmFyIHBhdGhuYW1lID0gbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICBzZWFyY2ggPSBsb2NhdGlvbi5zZWFyY2gsXG4gICAgICBoYXNoID0gbG9jYXRpb24uaGFzaDtcbiAgdmFyIHBhdGggPSBwYXRobmFtZSB8fCAnLyc7XG4gIGlmIChzZWFyY2ggJiYgc2VhcmNoICE9PSAnPycpIHBhdGggKz0gc2VhcmNoLmNoYXJBdCgwKSA9PT0gJz8nID8gc2VhcmNoIDogXCI/XCIgKyBzZWFyY2g7XG4gIGlmIChoYXNoICYmIGhhc2ggIT09ICcjJykgcGF0aCArPSBoYXNoLmNoYXJBdCgwKSA9PT0gJyMnID8gaGFzaCA6IFwiI1wiICsgaGFzaDtcbiAgcmV0dXJuIHBhdGg7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBrZXksIGN1cnJlbnRMb2NhdGlvbikge1xuICB2YXIgbG9jYXRpb247XG5cbiAgaWYgKHR5cGVvZiBwYXRoID09PSAnc3RyaW5nJykge1xuICAgIC8vIFR3by1hcmcgZm9ybTogcHVzaChwYXRoLCBzdGF0ZSlcbiAgICBsb2NhdGlvbiA9IHBhcnNlUGF0aChwYXRoKTtcbiAgICBsb2NhdGlvbi5zdGF0ZSA9IHN0YXRlO1xuICB9IGVsc2Uge1xuICAgIC8vIE9uZS1hcmcgZm9ybTogcHVzaChsb2NhdGlvbilcbiAgICBsb2NhdGlvbiA9IF9leHRlbmRzKHt9LCBwYXRoKTtcbiAgICBpZiAobG9jYXRpb24ucGF0aG5hbWUgPT09IHVuZGVmaW5lZCkgbG9jYXRpb24ucGF0aG5hbWUgPSAnJztcblxuICAgIGlmIChsb2NhdGlvbi5zZWFyY2gpIHtcbiAgICAgIGlmIChsb2NhdGlvbi5zZWFyY2guY2hhckF0KDApICE9PSAnPycpIGxvY2F0aW9uLnNlYXJjaCA9ICc/JyArIGxvY2F0aW9uLnNlYXJjaDtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb24uc2VhcmNoID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKGxvY2F0aW9uLmhhc2gpIHtcbiAgICAgIGlmIChsb2NhdGlvbi5oYXNoLmNoYXJBdCgwKSAhPT0gJyMnKSBsb2NhdGlvbi5oYXNoID0gJyMnICsgbG9jYXRpb24uaGFzaDtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb24uaGFzaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChzdGF0ZSAhPT0gdW5kZWZpbmVkICYmIGxvY2F0aW9uLnN0YXRlID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnN0YXRlID0gc3RhdGU7XG4gIH1cblxuICB0cnkge1xuICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gZGVjb2RlVVJJKGxvY2F0aW9uLnBhdGhuYW1lKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmIChlIGluc3RhbmNlb2YgVVJJRXJyb3IpIHtcbiAgICAgIHRocm93IG5ldyBVUklFcnJvcignUGF0aG5hbWUgXCInICsgbG9jYXRpb24ucGF0aG5hbWUgKyAnXCIgY291bGQgbm90IGJlIGRlY29kZWQuICcgKyAnVGhpcyBpcyBsaWtlbHkgY2F1c2VkIGJ5IGFuIGludmFsaWQgcGVyY2VudC1lbmNvZGluZy4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gIH1cblxuICBpZiAoa2V5KSBsb2NhdGlvbi5rZXkgPSBrZXk7XG5cbiAgaWYgKGN1cnJlbnRMb2NhdGlvbikge1xuICAgIC8vIFJlc29sdmUgaW5jb21wbGV0ZS9yZWxhdGl2ZSBwYXRobmFtZSByZWxhdGl2ZSB0byBjdXJyZW50IGxvY2F0aW9uLlxuICAgIGlmICghbG9jYXRpb24ucGF0aG5hbWUpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gY3VycmVudExvY2F0aW9uLnBhdGhuYW1lO1xuICAgIH0gZWxzZSBpZiAobG9jYXRpb24ucGF0aG5hbWUuY2hhckF0KDApICE9PSAnLycpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gcmVzb2x2ZVBhdGhuYW1lKGxvY2F0aW9uLnBhdGhuYW1lLCBjdXJyZW50TG9jYXRpb24ucGF0aG5hbWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBXaGVuIHRoZXJlIGlzIG5vIHByaW9yIGxvY2F0aW9uIGFuZCBwYXRobmFtZSBpcyBlbXB0eSwgc2V0IGl0IHRvIC9cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9ICcvJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbG9jYXRpb247XG59XG5mdW5jdGlvbiBsb2NhdGlvbnNBcmVFcXVhbChhLCBiKSB7XG4gIHJldHVybiBhLnBhdGhuYW1lID09PSBiLnBhdGhuYW1lICYmIGEuc2VhcmNoID09PSBiLnNlYXJjaCAmJiBhLmhhc2ggPT09IGIuaGFzaCAmJiBhLmtleSA9PT0gYi5rZXkgJiYgdmFsdWVFcXVhbChhLnN0YXRlLCBiLnN0YXRlKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKSB7XG4gIHZhciBwcm9tcHQgPSBudWxsO1xuXG4gIGZ1bmN0aW9uIHNldFByb21wdChuZXh0UHJvbXB0KSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhwcm9tcHQgPT0gbnVsbCwgJ0EgaGlzdG9yeSBzdXBwb3J0cyBvbmx5IG9uZSBwcm9tcHQgYXQgYSB0aW1lJykgOiB2b2lkIDA7XG4gICAgcHJvbXB0ID0gbmV4dFByb21wdDtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHByb21wdCA9PT0gbmV4dFByb21wdCkgcHJvbXB0ID0gbnVsbDtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBjYWxsYmFjaykge1xuICAgIC8vIFRPRE86IElmIGFub3RoZXIgdHJhbnNpdGlvbiBzdGFydHMgd2hpbGUgd2UncmUgc3RpbGwgY29uZmlybWluZ1xuICAgIC8vIHRoZSBwcmV2aW91cyBvbmUsIHdlIG1heSBlbmQgdXAgaW4gYSB3ZWlyZCBzdGF0ZS4gRmlndXJlIG91dCB0aGVcbiAgICAvLyBiZXN0IHdheSB0byBoYW5kbGUgdGhpcy5cbiAgICBpZiAocHJvbXB0ICE9IG51bGwpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0eXBlb2YgcHJvbXB0ID09PSAnZnVuY3Rpb24nID8gcHJvbXB0KGxvY2F0aW9uLCBhY3Rpb24pIDogcHJvbXB0O1xuXG4gICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBnZXRVc2VyQ29uZmlybWF0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbihyZXN1bHQsIGNhbGxiYWNrKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnQSBoaXN0b3J5IG5lZWRzIGEgZ2V0VXNlckNvbmZpcm1hdGlvbiBmdW5jdGlvbiBpbiBvcmRlciB0byB1c2UgYSBwcm9tcHQgbWVzc2FnZScpIDogdm9pZCAwO1xuICAgICAgICAgIGNhbGxiYWNrKHRydWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBSZXR1cm4gZmFsc2UgZnJvbSBhIHRyYW5zaXRpb24gaG9vayB0byBjYW5jZWwgdGhlIHRyYW5zaXRpb24uXG4gICAgICAgIGNhbGxiYWNrKHJlc3VsdCAhPT0gZmFsc2UpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgbGlzdGVuZXJzID0gW107XG5cbiAgZnVuY3Rpb24gYXBwZW5kTGlzdGVuZXIoZm4pIHtcbiAgICB2YXIgaXNBY3RpdmUgPSB0cnVlO1xuXG4gICAgZnVuY3Rpb24gbGlzdGVuZXIoKSB7XG4gICAgICBpZiAoaXNBY3RpdmUpIGZuLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlzQWN0aXZlID0gZmFsc2U7XG4gICAgICBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHJldHVybiBpdGVtICE9PSBsaXN0ZW5lcjtcbiAgICAgIH0pO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBub3RpZnlMaXN0ZW5lcnMoKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIGxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgcmV0dXJuIGxpc3RlbmVyLmFwcGx5KHZvaWQgMCwgYXJncyk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHNldFByb21wdDogc2V0UHJvbXB0LFxuICAgIGNvbmZpcm1UcmFuc2l0aW9uVG86IGNvbmZpcm1UcmFuc2l0aW9uVG8sXG4gICAgYXBwZW5kTGlzdGVuZXI6IGFwcGVuZExpc3RlbmVyLFxuICAgIG5vdGlmeUxpc3RlbmVyczogbm90aWZ5TGlzdGVuZXJzXG4gIH07XG59XG5cbnZhciBjYW5Vc2VET00gPSAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuZnVuY3Rpb24gZ2V0Q29uZmlybWF0aW9uKG1lc3NhZ2UsIGNhbGxiYWNrKSB7XG4gIGNhbGxiYWNrKHdpbmRvdy5jb25maXJtKG1lc3NhZ2UpKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1hbGVydFxufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIEhUTUw1IGhpc3RvcnkgQVBJIGlzIHN1cHBvcnRlZC4gVGFrZW4gZnJvbSBNb2Rlcm5penIuXG4gKlxuICogaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICogaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvYmxvYi9tYXN0ZXIvZmVhdHVyZS1kZXRlY3RzL2hpc3RvcnkuanNcbiAqIGNoYW5nZWQgdG8gYXZvaWQgZmFsc2UgbmVnYXRpdmVzIGZvciBXaW5kb3dzIFBob25lczogaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3Qtcm91dGVyL2lzc3Vlcy81ODZcbiAqL1xuXG5mdW5jdGlvbiBzdXBwb3J0c0hpc3RvcnkoKSB7XG4gIHZhciB1YSA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xuICBpZiAoKHVhLmluZGV4T2YoJ0FuZHJvaWQgMi4nKSAhPT0gLTEgfHwgdWEuaW5kZXhPZignQW5kcm9pZCA0LjAnKSAhPT0gLTEpICYmIHVhLmluZGV4T2YoJ01vYmlsZSBTYWZhcmknKSAhPT0gLTEgJiYgdWEuaW5kZXhPZignQ2hyb21lJykgPT09IC0xICYmIHVhLmluZGV4T2YoJ1dpbmRvd3MgUGhvbmUnKSA9PT0gLTEpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5ICYmICdwdXNoU3RhdGUnIGluIHdpbmRvdy5oaXN0b3J5O1xufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYnJvd3NlciBmaXJlcyBwb3BzdGF0ZSBvbiBoYXNoIGNoYW5nZS5cbiAqIElFMTAgYW5kIElFMTEgZG8gbm90LlxuICovXG5cbmZ1bmN0aW9uIHN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UoKSB7XG4gIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdUcmlkZW50JykgPT09IC0xO1xufVxuLyoqXG4gKiBSZXR1cm5zIGZhbHNlIGlmIHVzaW5nIGdvKG4pIHdpdGggaGFzaCBoaXN0b3J5IGNhdXNlcyBhIGZ1bGwgcGFnZSByZWxvYWQuXG4gKi9cblxuZnVuY3Rpb24gc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2goKSB7XG4gIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdGaXJlZm94JykgPT09IC0xO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYSBnaXZlbiBwb3BzdGF0ZSBldmVudCBpcyBhbiBleHRyYW5lb3VzIFdlYktpdCBldmVudC5cbiAqIEFjY291bnRzIGZvciB0aGUgZmFjdCB0aGF0IENocm9tZSBvbiBpT1MgZmlyZXMgcmVhbCBwb3BzdGF0ZSBldmVudHNcbiAqIGNvbnRhaW5pbmcgdW5kZWZpbmVkIHN0YXRlIHdoZW4gcHJlc3NpbmcgdGhlIGJhY2sgYnV0dG9uLlxuICovXG5cbmZ1bmN0aW9uIGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQoZXZlbnQpIHtcbiAgZXZlbnQuc3RhdGUgPT09IHVuZGVmaW5lZCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0NyaU9TJykgPT09IC0xO1xufVxuXG52YXIgUG9wU3RhdGVFdmVudCA9ICdwb3BzdGF0ZSc7XG52YXIgSGFzaENoYW5nZUV2ZW50ID0gJ2hhc2hjaGFuZ2UnO1xuXG5mdW5jdGlvbiBnZXRIaXN0b3J5U3RhdGUoKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5LnN0YXRlIHx8IHt9O1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gSUUgMTEgc29tZXRpbWVzIHRocm93cyB3aGVuIGFjY2Vzc2luZyB3aW5kb3cuaGlzdG9yeS5zdGF0ZVxuICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vUmVhY3RUcmFpbmluZy9oaXN0b3J5L3B1bGwvMjg5XG4gICAgcmV0dXJuIHt9O1xuICB9XG59XG4vKipcbiAqIENyZWF0ZXMgYSBoaXN0b3J5IG9iamVjdCB0aGF0IHVzZXMgdGhlIEhUTUw1IGhpc3RvcnkgQVBJIGluY2x1ZGluZ1xuICogcHVzaFN0YXRlLCByZXBsYWNlU3RhdGUsIGFuZCB0aGUgcG9wc3RhdGUgZXZlbnQuXG4gKi9cblxuXG5mdW5jdGlvbiBjcmVhdGVCcm93c2VySGlzdG9yeShwcm9wcykge1xuICBpZiAocHJvcHMgPT09IHZvaWQgMCkge1xuICAgIHByb3BzID0ge307XG4gIH1cblxuICAhY2FuVXNlRE9NID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQnJvd3NlciBoaXN0b3J5IG5lZWRzIGEgRE9NJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB2YXIgZ2xvYmFsSGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5O1xuICB2YXIgY2FuVXNlSGlzdG9yeSA9IHN1cHBvcnRzSGlzdG9yeSgpO1xuICB2YXIgbmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIgPSAhc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSgpO1xuICB2YXIgX3Byb3BzID0gcHJvcHMsXG4gICAgICBfcHJvcHMkZm9yY2VSZWZyZXNoID0gX3Byb3BzLmZvcmNlUmVmcmVzaCxcbiAgICAgIGZvcmNlUmVmcmVzaCA9IF9wcm9wcyRmb3JjZVJlZnJlc2ggPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGZvcmNlUmVmcmVzaCxcbiAgICAgIF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9IF9wcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9PT0gdm9pZCAwID8gZ2V0Q29uZmlybWF0aW9uIDogX3Byb3BzJGdldFVzZXJDb25maXJtLFxuICAgICAgX3Byb3BzJGtleUxlbmd0aCA9IF9wcm9wcy5rZXlMZW5ndGgsXG4gICAgICBrZXlMZW5ndGggPSBfcHJvcHMka2V5TGVuZ3RoID09PSB2b2lkIDAgPyA2IDogX3Byb3BzJGtleUxlbmd0aDtcbiAgdmFyIGJhc2VuYW1lID0gcHJvcHMuYmFzZW5hbWUgPyBzdHJpcFRyYWlsaW5nU2xhc2goYWRkTGVhZGluZ1NsYXNoKHByb3BzLmJhc2VuYW1lKSkgOiAnJztcblxuICBmdW5jdGlvbiBnZXRET01Mb2NhdGlvbihoaXN0b3J5U3RhdGUpIHtcbiAgICB2YXIgX3JlZiA9IGhpc3RvcnlTdGF0ZSB8fCB7fSxcbiAgICAgICAga2V5ID0gX3JlZi5rZXksXG4gICAgICAgIHN0YXRlID0gX3JlZi5zdGF0ZTtcblxuICAgIHZhciBfd2luZG93JGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uLFxuICAgICAgICBwYXRobmFtZSA9IF93aW5kb3ckbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICAgIHNlYXJjaCA9IF93aW5kb3ckbG9jYXRpb24uc2VhcmNoLFxuICAgICAgICBoYXNoID0gX3dpbmRvdyRsb2NhdGlvbi5oYXNoO1xuICAgIHZhciBwYXRoID0gcGF0aG5hbWUgKyBzZWFyY2ggKyBoYXNoO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIWJhc2VuYW1lIHx8IGhhc0Jhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKSwgJ1lvdSBhcmUgYXR0ZW1wdGluZyB0byB1c2UgYSBiYXNlbmFtZSBvbiBhIHBhZ2Ugd2hvc2UgVVJMIHBhdGggZG9lcyBub3QgYmVnaW4gJyArICd3aXRoIHRoZSBiYXNlbmFtZS4gRXhwZWN0ZWQgcGF0aCBcIicgKyBwYXRoICsgJ1wiIHRvIGJlZ2luIHdpdGggXCInICsgYmFzZW5hbWUgKyAnXCIuJykgOiB2b2lkIDA7XG4gICAgaWYgKGJhc2VuYW1lKSBwYXRoID0gc3RyaXBCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSk7XG4gICAgcmV0dXJuIGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBrZXkpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlS2V5KCkge1xuICAgIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwga2V5TGVuZ3RoKTtcbiAgfVxuXG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCk7XG5cbiAgZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gZ2xvYmFsSGlzdG9yeS5sZW5ndGg7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVBvcFN0YXRlKGV2ZW50KSB7XG4gICAgLy8gSWdub3JlIGV4dHJhbmVvdXMgcG9wc3RhdGUgZXZlbnRzIGluIFdlYktpdC5cbiAgICBpZiAoaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudChldmVudCkpIHJldHVybjtcbiAgICBoYW5kbGVQb3AoZ2V0RE9NTG9jYXRpb24oZXZlbnQuc3RhdGUpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUhhc2hDaGFuZ2UoKSB7XG4gICAgaGFuZGxlUG9wKGdldERPTUxvY2F0aW9uKGdldEhpc3RvcnlTdGF0ZSgpKSk7XG4gIH1cblxuICB2YXIgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gaGFuZGxlUG9wKGxvY2F0aW9uKSB7XG4gICAgaWYgKGZvcmNlTmV4dFBvcCkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gICAgICBzZXRTdGF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG4gICAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgICBpZiAob2spIHtcbiAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldmVydFBvcChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJldmVydFBvcChmcm9tTG9jYXRpb24pIHtcbiAgICB2YXIgdG9Mb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247IC8vIFRPRE86IFdlIGNvdWxkIHByb2JhYmx5IG1ha2UgdGhpcyBtb3JlIHJlbGlhYmxlIGJ5XG4gICAgLy8ga2VlcGluZyBhIGxpc3Qgb2Yga2V5cyB3ZSd2ZSBzZWVuIGluIHNlc3Npb25TdG9yYWdlLlxuICAgIC8vIEluc3RlYWQsIHdlIGp1c3QgZGVmYXVsdCB0byAwIGZvciBrZXlzIHdlIGRvbid0IGtub3cuXG5cbiAgICB2YXIgdG9JbmRleCA9IGFsbEtleXMuaW5kZXhPZih0b0xvY2F0aW9uLmtleSk7XG4gICAgaWYgKHRvSW5kZXggPT09IC0xKSB0b0luZGV4ID0gMDtcbiAgICB2YXIgZnJvbUluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGZyb21Mb2NhdGlvbi5rZXkpO1xuICAgIGlmIChmcm9tSW5kZXggPT09IC0xKSBmcm9tSW5kZXggPSAwO1xuICAgIHZhciBkZWx0YSA9IHRvSW5kZXggLSBmcm9tSW5kZXg7XG5cbiAgICBpZiAoZGVsdGEpIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IHRydWU7XG4gICAgICBnbyhkZWx0YSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGluaXRpYWxMb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKGdldEhpc3RvcnlTdGF0ZSgpKTtcbiAgdmFyIGFsbEtleXMgPSBbaW5pdGlhbExvY2F0aW9uLmtleV07IC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICBmdW5jdGlvbiBjcmVhdGVIcmVmKGxvY2F0aW9uKSB7XG4gICAgcmV0dXJuIGJhc2VuYW1lICsgY3JlYXRlUGF0aChsb2NhdGlvbik7XG4gIH1cblxuICBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHR5cGVvZiBwYXRoID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byBwdXNoIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIGhyZWYgPSBjcmVhdGVIcmVmKGxvY2F0aW9uKTtcbiAgICAgIHZhciBrZXkgPSBsb2NhdGlvbi5rZXksXG4gICAgICAgICAgc3RhdGUgPSBsb2NhdGlvbi5zdGF0ZTtcblxuICAgICAgaWYgKGNhblVzZUhpc3RvcnkpIHtcbiAgICAgICAgZ2xvYmFsSGlzdG9yeS5wdXNoU3RhdGUoe1xuICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgIHN0YXRlOiBzdGF0ZVxuICAgICAgICB9LCBudWxsLCBocmVmKTtcblxuICAgICAgICBpZiAoZm9yY2VSZWZyZXNoKSB7XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBocmVmO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxLZXlzLmluZGV4T2YoaGlzdG9yeS5sb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIHZhciBuZXh0S2V5cyA9IGFsbEtleXMuc2xpY2UoMCwgcHJldkluZGV4ID09PSAtMSA/IDAgOiBwcmV2SW5kZXggKyAxKTtcbiAgICAgICAgICBuZXh0S2V5cy5wdXNoKGxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgYWxsS2V5cyA9IG5leHRLZXlzO1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0Jyb3dzZXIgaGlzdG9yeSBjYW5ub3QgcHVzaCBzdGF0ZSBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEhUTUw1IGhpc3RvcnknKSA6IHZvaWQgMDtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBocmVmO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgcGF0aCA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcmVwbGFjZSB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cbiAgICAgIGlmIChjYW5Vc2VIaXN0b3J5KSB7XG4gICAgICAgIGdsb2JhbEhpc3RvcnkucmVwbGFjZVN0YXRlKHtcbiAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICBzdGF0ZTogc3RhdGVcbiAgICAgICAgfSwgbnVsbCwgaHJlZik7XG5cbiAgICAgICAgaWYgKGZvcmNlUmVmcmVzaCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGhyZWYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxLZXlzLmluZGV4T2YoaGlzdG9yeS5sb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIGlmIChwcmV2SW5kZXggIT09IC0xKSBhbGxLZXlzW3ByZXZJbmRleF0gPSBsb2NhdGlvbi5rZXk7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnQnJvd3NlciBoaXN0b3J5IGNhbm5vdCByZXBsYWNlIHN0YXRlIGluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgSFRNTDUgaGlzdG9yeScpIDogdm9pZCAwO1xuICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShocmVmKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKG4pIHtcbiAgICBnbG9iYWxIaXN0b3J5LmdvKG4pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIGdvKC0xKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICBnbygxKTtcbiAgfVxuXG4gIHZhciBsaXN0ZW5lckNvdW50ID0gMDtcblxuICBmdW5jdGlvbiBjaGVja0RPTUxpc3RlbmVycyhkZWx0YSkge1xuICAgIGxpc3RlbmVyQ291bnQgKz0gZGVsdGE7XG5cbiAgICBpZiAobGlzdGVuZXJDb3VudCA9PT0gMSAmJiBkZWx0YSA9PT0gMSkge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH0gZWxzZSBpZiAobGlzdGVuZXJDb3VudCA9PT0gMCkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpc0Jsb2NrZWQgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBibG9jayhwcm9tcHQpIHtcbiAgICBpZiAocHJvbXB0ID09PSB2b2lkIDApIHtcbiAgICAgIHByb21wdCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciB1bmJsb2NrID0gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG5cbiAgICBpZiAoIWlzQmxvY2tlZCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgICBpc0Jsb2NrZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXNCbG9ja2VkKSB7XG4gICAgICAgIGlzQmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bmJsb2NrKCk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHZhciB1bmxpc3RlbiA9IHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgdW5saXN0ZW4oKTtcbiAgICB9O1xuICB9XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBnbG9iYWxIaXN0b3J5Lmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBpbml0aWFsTG9jYXRpb24sXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuICByZXR1cm4gaGlzdG9yeTtcbn1cblxudmFyIEhhc2hDaGFuZ2VFdmVudCQxID0gJ2hhc2hjaGFuZ2UnO1xudmFyIEhhc2hQYXRoQ29kZXJzID0ge1xuICBoYXNoYmFuZzoge1xuICAgIGVuY29kZVBhdGg6IGZ1bmN0aW9uIGVuY29kZVBhdGgocGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnIScgPyBwYXRoIDogJyEvJyArIHN0cmlwTGVhZGluZ1NsYXNoKHBhdGgpO1xuICAgIH0sXG4gICAgZGVjb2RlUGF0aDogZnVuY3Rpb24gZGVjb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbiAgICB9XG4gIH0sXG4gIG5vc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBzdHJpcExlYWRpbmdTbGFzaCxcbiAgICBkZWNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2hcbiAgfSxcbiAgc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2gsXG4gICAgZGVjb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoXG4gIH1cbn07XG5cbmZ1bmN0aW9uIGdldEhhc2hQYXRoKCkge1xuICAvLyBXZSBjYW4ndCB1c2Ugd2luZG93LmxvY2F0aW9uLmhhc2ggaGVyZSBiZWNhdXNlIGl0J3Mgbm90XG4gIC8vIGNvbnNpc3RlbnQgYWNyb3NzIGJyb3dzZXJzIC0gRmlyZWZveCB3aWxsIHByZS1kZWNvZGUgaXQhXG4gIHZhciBocmVmID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gIHZhciBoYXNoSW5kZXggPSBocmVmLmluZGV4T2YoJyMnKTtcbiAgcmV0dXJuIGhhc2hJbmRleCA9PT0gLTEgPyAnJyA6IGhyZWYuc3Vic3RyaW5nKGhhc2hJbmRleCArIDEpO1xufVxuXG5mdW5jdGlvbiBwdXNoSGFzaFBhdGgocGF0aCkge1xuICB3aW5kb3cubG9jYXRpb24uaGFzaCA9IHBhdGg7XG59XG5cbmZ1bmN0aW9uIHJlcGxhY2VIYXNoUGF0aChwYXRoKSB7XG4gIHZhciBoYXNoSW5kZXggPSB3aW5kb3cubG9jYXRpb24uaHJlZi5pbmRleE9mKCcjJyk7XG4gIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHdpbmRvdy5sb2NhdGlvbi5ocmVmLnNsaWNlKDAsIGhhc2hJbmRleCA+PSAwID8gaGFzaEluZGV4IDogMCkgKyAnIycgKyBwYXRoKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlSGFzaEhpc3RvcnkocHJvcHMpIHtcbiAgaWYgKHByb3BzID09PSB2b2lkIDApIHtcbiAgICBwcm9wcyA9IHt9O1xuICB9XG5cbiAgIWNhblVzZURPTSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0hhc2ggaGlzdG9yeSBuZWVkcyBhIERPTScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdmFyIGNhbkdvV2l0aG91dFJlbG9hZCA9IHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoKCk7XG4gIHZhciBfcHJvcHMgPSBwcm9wcyxcbiAgICAgIF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9IF9wcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9PT0gdm9pZCAwID8gZ2V0Q29uZmlybWF0aW9uIDogX3Byb3BzJGdldFVzZXJDb25maXJtLFxuICAgICAgX3Byb3BzJGhhc2hUeXBlID0gX3Byb3BzLmhhc2hUeXBlLFxuICAgICAgaGFzaFR5cGUgPSBfcHJvcHMkaGFzaFR5cGUgPT09IHZvaWQgMCA/ICdzbGFzaCcgOiBfcHJvcHMkaGFzaFR5cGU7XG4gIHZhciBiYXNlbmFtZSA9IHByb3BzLmJhc2VuYW1lID8gc3RyaXBUcmFpbGluZ1NsYXNoKGFkZExlYWRpbmdTbGFzaChwcm9wcy5iYXNlbmFtZSkpIDogJyc7XG4gIHZhciBfSGFzaFBhdGhDb2RlcnMkaGFzaFQgPSBIYXNoUGF0aENvZGVyc1toYXNoVHlwZV0sXG4gICAgICBlbmNvZGVQYXRoID0gX0hhc2hQYXRoQ29kZXJzJGhhc2hULmVuY29kZVBhdGgsXG4gICAgICBkZWNvZGVQYXRoID0gX0hhc2hQYXRoQ29kZXJzJGhhc2hULmRlY29kZVBhdGg7XG5cbiAgZnVuY3Rpb24gZ2V0RE9NTG9jYXRpb24oKSB7XG4gICAgdmFyIHBhdGggPSBkZWNvZGVQYXRoKGdldEhhc2hQYXRoKCkpO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIWJhc2VuYW1lIHx8IGhhc0Jhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKSwgJ1lvdSBhcmUgYXR0ZW1wdGluZyB0byB1c2UgYSBiYXNlbmFtZSBvbiBhIHBhZ2Ugd2hvc2UgVVJMIHBhdGggZG9lcyBub3QgYmVnaW4gJyArICd3aXRoIHRoZSBiYXNlbmFtZS4gRXhwZWN0ZWQgcGF0aCBcIicgKyBwYXRoICsgJ1wiIHRvIGJlZ2luIHdpdGggXCInICsgYmFzZW5hbWUgKyAnXCIuJykgOiB2b2lkIDA7XG4gICAgaWYgKGJhc2VuYW1lKSBwYXRoID0gc3RyaXBCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSk7XG4gICAgcmV0dXJuIGNyZWF0ZUxvY2F0aW9uKHBhdGgpO1xuICB9XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICB2YXIgaWdub3JlUGF0aCA9IG51bGw7XG5cbiAgZnVuY3Rpb24gaGFuZGxlSGFzaENoYW5nZSgpIHtcbiAgICB2YXIgcGF0aCA9IGdldEhhc2hQYXRoKCk7XG4gICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChwYXRoKTtcblxuICAgIGlmIChwYXRoICE9PSBlbmNvZGVkUGF0aCkge1xuICAgICAgLy8gRW5zdXJlIHdlIGFsd2F5cyBoYXZlIGEgcHJvcGVybHktZW5jb2RlZCBoYXNoLlxuICAgICAgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGxvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oKTtcbiAgICAgIHZhciBwcmV2TG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uO1xuICAgICAgaWYgKCFmb3JjZU5leHRQb3AgJiYgbG9jYXRpb25zQXJlRXF1YWwocHJldkxvY2F0aW9uLCBsb2NhdGlvbikpIHJldHVybjsgLy8gQSBoYXNoY2hhbmdlIGRvZXNuJ3QgYWx3YXlzID09IGxvY2F0aW9uIGNoYW5nZS5cblxuICAgICAgaWYgKGlnbm9yZVBhdGggPT09IGNyZWF0ZVBhdGgobG9jYXRpb24pKSByZXR1cm47IC8vIElnbm9yZSB0aGlzIGNoYW5nZTsgd2UgYWxyZWFkeSBzZXRTdGF0ZSBpbiBwdXNoL3JlcGxhY2UuXG5cbiAgICAgIGlnbm9yZVBhdGggPSBudWxsO1xuICAgICAgaGFuZGxlUG9wKGxvY2F0aW9uKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVQb3AobG9jYXRpb24pIHtcbiAgICBpZiAoZm9yY2VOZXh0UG9wKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgICAgIHNldFN0YXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhY3Rpb24gPSAnUE9QJztcbiAgICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICAgIGlmIChvaykge1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV2ZXJ0UG9wKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmV2ZXJ0UG9wKGZyb21Mb2NhdGlvbikge1xuICAgIHZhciB0b0xvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjsgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBwYXRocyB3ZSd2ZSBzZWVuIGluIHNlc3Npb25TdG9yYWdlLlxuICAgIC8vIEluc3RlYWQsIHdlIGp1c3QgZGVmYXVsdCB0byAwIGZvciBwYXRocyB3ZSBkb24ndCBrbm93LlxuXG4gICAgdmFyIHRvSW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKHRvTG9jYXRpb24pKTtcbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuICAgIHZhciBmcm9tSW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKGZyb21Mb2NhdGlvbikpO1xuICAgIGlmIChmcm9tSW5kZXggPT09IC0xKSBmcm9tSW5kZXggPSAwO1xuICAgIHZhciBkZWx0YSA9IHRvSW5kZXggLSBmcm9tSW5kZXg7XG5cbiAgICBpZiAoZGVsdGEpIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IHRydWU7XG4gICAgICBnbyhkZWx0YSk7XG4gICAgfVxuICB9IC8vIEVuc3VyZSB0aGUgaGFzaCBpcyBlbmNvZGVkIHByb3Blcmx5IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlLlxuXG5cbiAgdmFyIHBhdGggPSBnZXRIYXNoUGF0aCgpO1xuICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKHBhdGgpO1xuICBpZiAocGF0aCAhPT0gZW5jb2RlZFBhdGgpIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gIHZhciBpbml0aWFsTG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbigpO1xuICB2YXIgYWxsUGF0aHMgPSBbY3JlYXRlUGF0aChpbml0aWFsTG9jYXRpb24pXTsgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcbiAgICByZXR1cm4gJyMnICsgZW5jb2RlUGF0aChiYXNlbmFtZSArIGNyZWF0ZVBhdGgobG9jYXRpb24pKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdIYXNoIGhpc3RvcnkgY2Fubm90IHB1c2ggc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIHBhdGggPSBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgoYmFzZW5hbWUgKyBwYXRoKTtcbiAgICAgIHZhciBoYXNoQ2hhbmdlZCA9IGdldEhhc2hQYXRoKCkgIT09IGVuY29kZWRQYXRoO1xuXG4gICAgICBpZiAoaGFzaENoYW5nZWQpIHtcbiAgICAgICAgLy8gV2UgY2Fubm90IHRlbGwgaWYgYSBoYXNoY2hhbmdlIHdhcyBjYXVzZWQgYnkgYSBQVVNILCBzbyB3ZSdkXG4gICAgICAgIC8vIHJhdGhlciBzZXRTdGF0ZSBoZXJlIGFuZCBpZ25vcmUgdGhlIGhhc2hjaGFuZ2UuIFRoZSBjYXZlYXQgaGVyZVxuICAgICAgICAvLyBpcyB0aGF0IG90aGVyIGhhc2ggaGlzdG9yaWVzIGluIHRoZSBwYWdlIHdpbGwgY29uc2lkZXIgaXQgYSBQT1AuXG4gICAgICAgIGlnbm9yZVBhdGggPSBwYXRoO1xuICAgICAgICBwdXNoSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aChoaXN0b3J5LmxvY2F0aW9uKSk7XG4gICAgICAgIHZhciBuZXh0UGF0aHMgPSBhbGxQYXRocy5zbGljZSgwLCBwcmV2SW5kZXggPT09IC0xID8gMCA6IHByZXZJbmRleCArIDEpO1xuICAgICAgICBuZXh0UGF0aHMucHVzaChwYXRoKTtcbiAgICAgICAgYWxsUGF0aHMgPSBuZXh0UGF0aHM7XG4gICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCBQVVNIIHRoZSBzYW1lIHBhdGg7IGEgbmV3IGVudHJ5IHdpbGwgbm90IGJlIGFkZGVkIHRvIHRoZSBoaXN0b3J5IHN0YWNrJykgOiB2b2lkIDA7XG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCByZXBsYWNlIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBwYXRoID0gY3JlYXRlUGF0aChsb2NhdGlvbik7XG4gICAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKGJhc2VuYW1lICsgcGF0aCk7XG4gICAgICB2YXIgaGFzaENoYW5nZWQgPSBnZXRIYXNoUGF0aCgpICE9PSBlbmNvZGVkUGF0aDtcblxuICAgICAgaWYgKGhhc2hDaGFuZ2VkKSB7XG4gICAgICAgIC8vIFdlIGNhbm5vdCB0ZWxsIGlmIGEgaGFzaGNoYW5nZSB3YXMgY2F1c2VkIGJ5IGEgUkVQTEFDRSwgc28gd2UnZFxuICAgICAgICAvLyByYXRoZXIgc2V0U3RhdGUgaGVyZSBhbmQgaWdub3JlIHRoZSBoYXNoY2hhbmdlLiBUaGUgY2F2ZWF0IGhlcmVcbiAgICAgICAgLy8gaXMgdGhhdCBvdGhlciBoYXNoIGhpc3RvcmllcyBpbiB0aGUgcGFnZSB3aWxsIGNvbnNpZGVyIGl0IGEgUE9QLlxuICAgICAgICBpZ25vcmVQYXRoID0gcGF0aDtcbiAgICAgICAgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHByZXZJbmRleCA9IGFsbFBhdGhzLmluZGV4T2YoY3JlYXRlUGF0aChoaXN0b3J5LmxvY2F0aW9uKSk7XG4gICAgICBpZiAocHJldkluZGV4ICE9PSAtMSkgYWxsUGF0aHNbcHJldkluZGV4XSA9IHBhdGg7XG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ28obikge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoY2FuR29XaXRob3V0UmVsb2FkLCAnSGFzaCBoaXN0b3J5IGdvKG4pIGNhdXNlcyBhIGZ1bGwgcGFnZSByZWxvYWQgaW4gdGhpcyBicm93c2VyJykgOiB2b2lkIDA7XG4gICAgZ2xvYmFsSGlzdG9yeS5nbyhuKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICBnbygtMSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgZ28oMSk7XG4gIH1cblxuICB2YXIgbGlzdGVuZXJDb3VudCA9IDA7XG5cbiAgZnVuY3Rpb24gY2hlY2tET01MaXN0ZW5lcnMoZGVsdGEpIHtcbiAgICBsaXN0ZW5lckNvdW50ICs9IGRlbHRhO1xuXG4gICAgaWYgKGxpc3RlbmVyQ291bnQgPT09IDEgJiYgZGVsdGEgPT09IDEpIHtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudCQxLCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9IGVsc2UgaWYgKGxpc3RlbmVyQ291bnQgPT09IDApIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudCQxLCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgaXNCbG9ja2VkID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gYmxvY2socHJvbXB0KSB7XG4gICAgaWYgKHByb21wdCA9PT0gdm9pZCAwKSB7XG4gICAgICBwcm9tcHQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgdW5ibG9jayA9IHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuXG4gICAgaWYgKCFpc0Jsb2NrZWQpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgICAgaXNCbG9ja2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGlzQmxvY2tlZCkge1xuICAgICAgICBpc0Jsb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdW5ibG9jaygpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICB2YXIgdW5saXN0ZW4gPSB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIHVubGlzdGVuKCk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZ2xvYmFsSGlzdG9yeS5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogaW5pdGlhbExvY2F0aW9uLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG5cbmZ1bmN0aW9uIGNsYW1wKG4sIGxvd2VyQm91bmQsIHVwcGVyQm91bmQpIHtcbiAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KG4sIGxvd2VyQm91bmQpLCB1cHBlckJvdW5kKTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgc3RvcmVzIGxvY2F0aW9ucyBpbiBtZW1vcnkuXG4gKi9cblxuXG5mdW5jdGlvbiBjcmVhdGVNZW1vcnlIaXN0b3J5KHByb3BzKSB7XG4gIGlmIChwcm9wcyA9PT0gdm9pZCAwKSB7XG4gICAgcHJvcHMgPSB7fTtcbiAgfVxuXG4gIHZhciBfcHJvcHMgPSBwcm9wcyxcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIF9wcm9wcyRpbml0aWFsRW50cmllcyA9IF9wcm9wcy5pbml0aWFsRW50cmllcyxcbiAgICAgIGluaXRpYWxFbnRyaWVzID0gX3Byb3BzJGluaXRpYWxFbnRyaWVzID09PSB2b2lkIDAgPyBbJy8nXSA6IF9wcm9wcyRpbml0aWFsRW50cmllcyxcbiAgICAgIF9wcm9wcyRpbml0aWFsSW5kZXggPSBfcHJvcHMuaW5pdGlhbEluZGV4LFxuICAgICAgaW5pdGlhbEluZGV4ID0gX3Byb3BzJGluaXRpYWxJbmRleCA9PT0gdm9pZCAwID8gMCA6IF9wcm9wcyRpbml0aWFsSW5kZXgsXG4gICAgICBfcHJvcHMka2V5TGVuZ3RoID0gX3Byb3BzLmtleUxlbmd0aCxcbiAgICAgIGtleUxlbmd0aCA9IF9wcm9wcyRrZXlMZW5ndGggPT09IHZvaWQgMCA/IDYgOiBfcHJvcHMka2V5TGVuZ3RoO1xuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO1xuXG4gIGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGhpc3RvcnkuZW50cmllcy5sZW5ndGg7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUtleSgpIHtcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIGtleUxlbmd0aCk7XG4gIH1cblxuICB2YXIgaW5kZXggPSBjbGFtcChpbml0aWFsSW5kZXgsIDAsIGluaXRpYWxFbnRyaWVzLmxlbmd0aCAtIDEpO1xuICB2YXIgZW50cmllcyA9IGluaXRpYWxFbnRyaWVzLm1hcChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICByZXR1cm4gdHlwZW9mIGVudHJ5ID09PSAnc3RyaW5nJyA/IGNyZWF0ZUxvY2F0aW9uKGVudHJ5LCB1bmRlZmluZWQsIGNyZWF0ZUtleSgpKSA6IGNyZWF0ZUxvY2F0aW9uKGVudHJ5LCB1bmRlZmluZWQsIGVudHJ5LmtleSB8fCBjcmVhdGVLZXkoKSk7XG4gIH0pOyAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgdmFyIGNyZWF0ZUhyZWYgPSBjcmVhdGVQYXRoO1xuXG4gIGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHB1c2ggd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgcHJldkluZGV4ID0gaGlzdG9yeS5pbmRleDtcbiAgICAgIHZhciBuZXh0SW5kZXggPSBwcmV2SW5kZXggKyAxO1xuICAgICAgdmFyIG5leHRFbnRyaWVzID0gaGlzdG9yeS5lbnRyaWVzLnNsaWNlKDApO1xuXG4gICAgICBpZiAobmV4dEVudHJpZXMubGVuZ3RoID4gbmV4dEluZGV4KSB7XG4gICAgICAgIG5leHRFbnRyaWVzLnNwbGljZShuZXh0SW5kZXgsIG5leHRFbnRyaWVzLmxlbmd0aCAtIG5leHRJbmRleCwgbG9jYXRpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV4dEVudHJpZXMucHVzaChsb2NhdGlvbik7XG4gICAgICB9XG5cbiAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgaW5kZXg6IG5leHRJbmRleCxcbiAgICAgICAgZW50cmllczogbmV4dEVudHJpZXNcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgcGF0aCA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcmVwbGFjZSB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIGhpc3RvcnkuZW50cmllc1toaXN0b3J5LmluZGV4XSA9IGxvY2F0aW9uO1xuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKG4pIHtcbiAgICB2YXIgbmV4dEluZGV4ID0gY2xhbXAoaGlzdG9yeS5pbmRleCArIG4sIDAsIGhpc3RvcnkuZW50cmllcy5sZW5ndGggLSAxKTtcbiAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG4gICAgdmFyIGxvY2F0aW9uID0gaGlzdG9yeS5lbnRyaWVzW25leHRJbmRleF07XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmIChvaykge1xuICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICAgIGluZGV4OiBuZXh0SW5kZXhcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBNaW1pYyB0aGUgYmVoYXZpb3Igb2YgRE9NIGhpc3RvcmllcyBieVxuICAgICAgICAvLyBjYXVzaW5nIGEgcmVuZGVyIGFmdGVyIGEgY2FuY2VsbGVkIFBPUC5cbiAgICAgICAgc2V0U3RhdGUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICBnbygtMSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgZ28oMSk7XG4gIH1cblxuICBmdW5jdGlvbiBjYW5HbyhuKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGhpc3RvcnkuaW5kZXggKyBuO1xuICAgIHJldHVybiBuZXh0SW5kZXggPj0gMCAmJiBuZXh0SW5kZXggPCBoaXN0b3J5LmVudHJpZXMubGVuZ3RoO1xuICB9XG5cbiAgZnVuY3Rpb24gYmxvY2socHJvbXB0KSB7XG4gICAgaWYgKHByb21wdCA9PT0gdm9pZCAwKSB7XG4gICAgICBwcm9tcHQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG4gIH1cblxuICBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICByZXR1cm4gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICB9XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBlbnRyaWVzLmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBlbnRyaWVzW2luZGV4XSxcbiAgICBpbmRleDogaW5kZXgsXG4gICAgZW50cmllczogZW50cmllcyxcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgY2FuR286IGNhbkdvLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuICByZXR1cm4gaGlzdG9yeTtcbn1cblxuZXhwb3J0IHsgY3JlYXRlQnJvd3Nlckhpc3RvcnksIGNyZWF0ZUhhc2hIaXN0b3J5LCBjcmVhdGVNZW1vcnlIaXN0b3J5LCBjcmVhdGVMb2NhdGlvbiwgbG9jYXRpb25zQXJlRXF1YWwsIHBhcnNlUGF0aCwgY3JlYXRlUGF0aCB9O1xuIiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgd2FybmluZyBmcm9tIFwid2FybmluZ1wiO1xuaW1wb3J0IGludmFyaWFudCBmcm9tIFwiaW52YXJpYW50XCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHB1dHRpbmcgaGlzdG9yeSBvbiBjb250ZXh0LlxuICovXG5cbnZhciBSb3V0ZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBSb3V0ZXIoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSb3V0ZXIpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLnN0YXRlID0ge1xuICAgICAgbWF0Y2g6IF90aGlzLmNvbXB1dGVNYXRjaChfdGhpcy5wcm9wcy5oaXN0b3J5LmxvY2F0aW9uLnBhdGhuYW1lKVxuICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgUm91dGVyLnByb3RvdHlwZS5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJvdXRlcjogX2V4dGVuZHMoe30sIHRoaXMuY29udGV4dC5yb3V0ZXIsIHtcbiAgICAgICAgaGlzdG9yeTogdGhpcy5wcm9wcy5oaXN0b3J5LFxuICAgICAgICByb3V0ZToge1xuICAgICAgICAgIGxvY2F0aW9uOiB0aGlzLnByb3BzLmhpc3RvcnkubG9jYXRpb24sXG4gICAgICAgICAgbWF0Y2g6IHRoaXMuc3RhdGUubWF0Y2hcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9O1xuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUuY29tcHV0ZU1hdGNoID0gZnVuY3Rpb24gY29tcHV0ZU1hdGNoKHBhdGhuYW1lKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGg6IFwiL1wiLFxuICAgICAgdXJsOiBcIi9cIixcbiAgICAgIHBhcmFtczoge30sXG4gICAgICBpc0V4YWN0OiBwYXRobmFtZSA9PT0gXCIvXCJcbiAgICB9O1xuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNoaWxkcmVuID0gX3Byb3BzLmNoaWxkcmVuLFxuICAgICAgICBoaXN0b3J5ID0gX3Byb3BzLmhpc3Rvcnk7XG5cblxuICAgIGludmFyaWFudChjaGlsZHJlbiA9PSBudWxsIHx8IFJlYWN0LkNoaWxkcmVuLmNvdW50KGNoaWxkcmVuKSA9PT0gMSwgXCJBIDxSb3V0ZXI+IG1heSBoYXZlIG9ubHkgb25lIGNoaWxkIGVsZW1lbnRcIik7XG5cbiAgICAvLyBEbyB0aGlzIGhlcmUgc28gd2UgY2FuIHNldFN0YXRlIHdoZW4gYSA8UmVkaXJlY3Q+IGNoYW5nZXMgdGhlXG4gICAgLy8gbG9jYXRpb24gaW4gY29tcG9uZW50V2lsbE1vdW50LiBUaGlzIGhhcHBlbnMgZS5nLiB3aGVuIGRvaW5nXG4gICAgLy8gc2VydmVyIHJlbmRlcmluZyB1c2luZyBhIDxTdGF0aWNSb3V0ZXI+LlxuICAgIHRoaXMudW5saXN0ZW4gPSBoaXN0b3J5Lmxpc3RlbihmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczIuc2V0U3RhdGUoe1xuICAgICAgICBtYXRjaDogX3RoaXMyLmNvbXB1dGVNYXRjaChoaXN0b3J5LmxvY2F0aW9uLnBhdGhuYW1lKVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICB3YXJuaW5nKHRoaXMucHJvcHMuaGlzdG9yeSA9PT0gbmV4dFByb3BzLmhpc3RvcnksIFwiWW91IGNhbm5vdCBjaGFuZ2UgPFJvdXRlciBoaXN0b3J5PlwiKTtcbiAgfTtcblxuICBSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy51bmxpc3RlbigpO1xuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucHJvcHMuY2hpbGRyZW47XG5cbiAgICByZXR1cm4gY2hpbGRyZW4gPyBSZWFjdC5DaGlsZHJlbi5vbmx5KGNoaWxkcmVuKSA6IG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIFJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgaGlzdG9yeTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGVcbn07XG5Sb3V0ZXIuY29udGV4dFR5cGVzID0ge1xuICByb3V0ZXI6IFByb3BUeXBlcy5vYmplY3Rcbn07XG5Sb3V0ZXIuY2hpbGRDb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IFJvdXRlcjsiLCIvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0c1xuaW1wb3J0IFJvdXRlciBmcm9tIFwicmVhY3Qtcm91dGVyL2VzL1JvdXRlclwiO1xuXG5leHBvcnQgZGVmYXVsdCBSb3V0ZXI7IiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgd2FybmluZyBmcm9tIFwid2FybmluZ1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IHsgY3JlYXRlSGFzaEhpc3RvcnkgYXMgY3JlYXRlSGlzdG9yeSB9IGZyb20gXCJoaXN0b3J5XCI7XG5pbXBvcnQgUm91dGVyIGZyb20gXCIuL1JvdXRlclwiO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgdXNlcyB3aW5kb3cubG9jYXRpb24uaGFzaC5cbiAqL1xuXG52YXIgSGFzaFJvdXRlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhIYXNoUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBIYXNoUm91dGVyKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSGFzaFJvdXRlcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuaGlzdG9yeSA9IGNyZWF0ZUhpc3RvcnkoX3RoaXMucHJvcHMpLCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIEhhc2hSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksIFwiPEhhc2hSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksIFwiICsgXCJ1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBIYXNoUm91dGVyIGFzIFJvdXRlciB9YC5cIik7XG4gIH07XG5cbiAgSGFzaFJvdXRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwgeyBoaXN0b3J5OiB0aGlzLmhpc3RvcnksIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuIH0pO1xuICB9O1xuXG4gIHJldHVybiBIYXNoUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5IYXNoUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICBoYXNoVHlwZTogUHJvcFR5cGVzLm9uZU9mKFtcImhhc2hiYW5nXCIsIFwibm9zbGFzaFwiLCBcInNsYXNoXCJdKSxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IEhhc2hSb3V0ZXI7IiwiaW1wb3J0IHBhdGhUb1JlZ2V4cCBmcm9tIFwicGF0aC10by1yZWdleHBcIjtcblxudmFyIHBhdHRlcm5DYWNoZSA9IHt9O1xudmFyIGNhY2hlTGltaXQgPSAxMDAwMDtcbnZhciBjYWNoZUNvdW50ID0gMDtcblxudmFyIGNvbXBpbGVQYXRoID0gZnVuY3Rpb24gY29tcGlsZVBhdGgocGF0dGVybiwgb3B0aW9ucykge1xuICB2YXIgY2FjaGVLZXkgPSBcIlwiICsgb3B0aW9ucy5lbmQgKyBvcHRpb25zLnN0cmljdCArIG9wdGlvbnMuc2Vuc2l0aXZlO1xuICB2YXIgY2FjaGUgPSBwYXR0ZXJuQ2FjaGVbY2FjaGVLZXldIHx8IChwYXR0ZXJuQ2FjaGVbY2FjaGVLZXldID0ge30pO1xuXG4gIGlmIChjYWNoZVtwYXR0ZXJuXSkgcmV0dXJuIGNhY2hlW3BhdHRlcm5dO1xuXG4gIHZhciBrZXlzID0gW107XG4gIHZhciByZSA9IHBhdGhUb1JlZ2V4cChwYXR0ZXJuLCBrZXlzLCBvcHRpb25zKTtcbiAgdmFyIGNvbXBpbGVkUGF0dGVybiA9IHsgcmU6IHJlLCBrZXlzOiBrZXlzIH07XG5cbiAgaWYgKGNhY2hlQ291bnQgPCBjYWNoZUxpbWl0KSB7XG4gICAgY2FjaGVbcGF0dGVybl0gPSBjb21waWxlZFBhdHRlcm47XG4gICAgY2FjaGVDb3VudCsrO1xuICB9XG5cbiAgcmV0dXJuIGNvbXBpbGVkUGF0dGVybjtcbn07XG5cbi8qKlxuICogUHVibGljIEFQSSBmb3IgbWF0Y2hpbmcgYSBVUkwgcGF0aG5hbWUgdG8gYSBwYXRoIHBhdHRlcm4uXG4gKi9cbnZhciBtYXRjaFBhdGggPSBmdW5jdGlvbiBtYXRjaFBhdGgocGF0aG5hbWUpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICB2YXIgcGFyZW50ID0gYXJndW1lbnRzWzJdO1xuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIikgb3B0aW9ucyA9IHsgcGF0aDogb3B0aW9ucyB9O1xuXG4gIHZhciBfb3B0aW9ucyA9IG9wdGlvbnMsXG4gICAgICBwYXRoID0gX29wdGlvbnMucGF0aCxcbiAgICAgIF9vcHRpb25zJGV4YWN0ID0gX29wdGlvbnMuZXhhY3QsXG4gICAgICBleGFjdCA9IF9vcHRpb25zJGV4YWN0ID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IF9vcHRpb25zJGV4YWN0LFxuICAgICAgX29wdGlvbnMkc3RyaWN0ID0gX29wdGlvbnMuc3RyaWN0LFxuICAgICAgc3RyaWN0ID0gX29wdGlvbnMkc3RyaWN0ID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IF9vcHRpb25zJHN0cmljdCxcbiAgICAgIF9vcHRpb25zJHNlbnNpdGl2ZSA9IF9vcHRpb25zLnNlbnNpdGl2ZSxcbiAgICAgIHNlbnNpdGl2ZSA9IF9vcHRpb25zJHNlbnNpdGl2ZSA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBfb3B0aW9ucyRzZW5zaXRpdmU7XG5cblxuICBpZiAocGF0aCA9PSBudWxsKSByZXR1cm4gcGFyZW50O1xuXG4gIHZhciBfY29tcGlsZVBhdGggPSBjb21waWxlUGF0aChwYXRoLCB7IGVuZDogZXhhY3QsIHN0cmljdDogc3RyaWN0LCBzZW5zaXRpdmU6IHNlbnNpdGl2ZSB9KSxcbiAgICAgIHJlID0gX2NvbXBpbGVQYXRoLnJlLFxuICAgICAga2V5cyA9IF9jb21waWxlUGF0aC5rZXlzO1xuXG4gIHZhciBtYXRjaCA9IHJlLmV4ZWMocGF0aG5hbWUpO1xuXG4gIGlmICghbWF0Y2gpIHJldHVybiBudWxsO1xuXG4gIHZhciB1cmwgPSBtYXRjaFswXSxcbiAgICAgIHZhbHVlcyA9IG1hdGNoLnNsaWNlKDEpO1xuXG4gIHZhciBpc0V4YWN0ID0gcGF0aG5hbWUgPT09IHVybDtcblxuICBpZiAoZXhhY3QgJiYgIWlzRXhhY3QpIHJldHVybiBudWxsO1xuXG4gIHJldHVybiB7XG4gICAgcGF0aDogcGF0aCwgLy8gdGhlIHBhdGggcGF0dGVybiB1c2VkIHRvIG1hdGNoXG4gICAgdXJsOiBwYXRoID09PSBcIi9cIiAmJiB1cmwgPT09IFwiXCIgPyBcIi9cIiA6IHVybCwgLy8gdGhlIG1hdGNoZWQgcG9ydGlvbiBvZiB0aGUgVVJMXG4gICAgaXNFeGFjdDogaXNFeGFjdCwgLy8gd2hldGhlciBvciBub3Qgd2UgbWF0Y2hlZCBleGFjdGx5XG4gICAgcGFyYW1zOiBrZXlzLnJlZHVjZShmdW5jdGlvbiAobWVtbywga2V5LCBpbmRleCkge1xuICAgICAgbWVtb1trZXkubmFtZV0gPSB2YWx1ZXNbaW5kZXhdO1xuICAgICAgcmV0dXJuIG1lbW87XG4gICAgfSwge30pXG4gIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBtYXRjaFBhdGg7IiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgd2FybmluZyBmcm9tIFwid2FybmluZ1wiO1xuaW1wb3J0IGludmFyaWFudCBmcm9tIFwiaW52YXJpYW50XCI7XG5pbXBvcnQgbWF0Y2hQYXRoIGZyb20gXCIuL21hdGNoUGF0aFwiO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciByZW5kZXJpbmcgdGhlIGZpcnN0IDxSb3V0ZT4gdGhhdCBtYXRjaGVzLlxuICovXG5cbnZhciBTd2l0Y2ggPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoU3dpdGNoLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTd2l0Y2goKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFN3aXRjaCk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIFN3aXRjaC5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIGludmFyaWFudCh0aGlzLmNvbnRleHQucm91dGVyLCBcIllvdSBzaG91bGQgbm90IHVzZSA8U3dpdGNoPiBvdXRzaWRlIGEgPFJvdXRlcj5cIik7XG4gIH07XG5cbiAgU3dpdGNoLnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICB3YXJuaW5nKCEobmV4dFByb3BzLmxvY2F0aW9uICYmICF0aGlzLnByb3BzLmxvY2F0aW9uKSwgJzxTd2l0Y2g+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gdW5jb250cm9sbGVkIHRvIGNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgaW5pdGlhbGx5IHVzZWQgbm8gXCJsb2NhdGlvblwiIHByb3AgYW5kIHRoZW4gcHJvdmlkZWQgb25lIG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJyk7XG5cbiAgICB3YXJuaW5nKCEoIW5leHRQcm9wcy5sb2NhdGlvbiAmJiB0aGlzLnByb3BzLmxvY2F0aW9uKSwgJzxTd2l0Y2g+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gY29udHJvbGxlZCB0byB1bmNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgcHJvdmlkZWQgYSBcImxvY2F0aW9uXCIgcHJvcCBpbml0aWFsbHkgYnV0IG9taXR0ZWQgaXQgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKTtcbiAgfTtcblxuICBTd2l0Y2gucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgcm91dGUgPSB0aGlzLmNvbnRleHQucm91dGVyLnJvdXRlO1xuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucHJvcHMuY2hpbGRyZW47XG5cbiAgICB2YXIgbG9jYXRpb24gPSB0aGlzLnByb3BzLmxvY2F0aW9uIHx8IHJvdXRlLmxvY2F0aW9uO1xuXG4gICAgdmFyIG1hdGNoID0gdm9pZCAwLFxuICAgICAgICBjaGlsZCA9IHZvaWQgMDtcbiAgICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgaWYgKG1hdGNoID09IG51bGwgJiYgUmVhY3QuaXNWYWxpZEVsZW1lbnQoZWxlbWVudCkpIHtcbiAgICAgICAgdmFyIF9lbGVtZW50JHByb3BzID0gZWxlbWVudC5wcm9wcyxcbiAgICAgICAgICAgIHBhdGhQcm9wID0gX2VsZW1lbnQkcHJvcHMucGF0aCxcbiAgICAgICAgICAgIGV4YWN0ID0gX2VsZW1lbnQkcHJvcHMuZXhhY3QsXG4gICAgICAgICAgICBzdHJpY3QgPSBfZWxlbWVudCRwcm9wcy5zdHJpY3QsXG4gICAgICAgICAgICBzZW5zaXRpdmUgPSBfZWxlbWVudCRwcm9wcy5zZW5zaXRpdmUsXG4gICAgICAgICAgICBmcm9tID0gX2VsZW1lbnQkcHJvcHMuZnJvbTtcblxuICAgICAgICB2YXIgcGF0aCA9IHBhdGhQcm9wIHx8IGZyb207XG5cbiAgICAgICAgY2hpbGQgPSBlbGVtZW50O1xuICAgICAgICBtYXRjaCA9IG1hdGNoUGF0aChsb2NhdGlvbi5wYXRobmFtZSwgeyBwYXRoOiBwYXRoLCBleGFjdDogZXhhY3QsIHN0cmljdDogc3RyaWN0LCBzZW5zaXRpdmU6IHNlbnNpdGl2ZSB9LCByb3V0ZS5tYXRjaCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gbWF0Y2ggPyBSZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGQsIHsgbG9jYXRpb246IGxvY2F0aW9uLCBjb21wdXRlZE1hdGNoOiBtYXRjaCB9KSA6IG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIFN3aXRjaDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuU3dpdGNoLmNvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIHJvdXRlOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWRcbiAgfSkuaXNSZXF1aXJlZFxufTtcblN3aXRjaC5wcm9wVHlwZXMgPSB7XG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgbG9jYXRpb246IFByb3BUeXBlcy5vYmplY3Rcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgU3dpdGNoOyIsIi8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzXG5pbXBvcnQgU3dpdGNoIGZyb20gXCJyZWFjdC1yb3V0ZXIvZXMvU3dpdGNoXCI7XG5cbmV4cG9ydCBkZWZhdWx0IFN3aXRjaDsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gXCJ3YXJuaW5nXCI7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gXCJpbnZhcmlhbnRcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCBtYXRjaFBhdGggZnJvbSBcIi4vbWF0Y2hQYXRoXCI7XG5cbnZhciBpc0VtcHR5Q2hpbGRyZW4gPSBmdW5jdGlvbiBpc0VtcHR5Q2hpbGRyZW4oY2hpbGRyZW4pIHtcbiAgcmV0dXJuIFJlYWN0LkNoaWxkcmVuLmNvdW50KGNoaWxkcmVuKSA9PT0gMDtcbn07XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIG1hdGNoaW5nIGEgc2luZ2xlIHBhdGggYW5kIHJlbmRlcmluZy5cbiAqL1xuXG52YXIgUm91dGUgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUm91dGUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFJvdXRlKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUm91dGUpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLnN0YXRlID0ge1xuICAgICAgbWF0Y2g6IF90aGlzLmNvbXB1dGVNYXRjaChfdGhpcy5wcm9wcywgX3RoaXMuY29udGV4dC5yb3V0ZXIpXG4gICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBSb3V0ZS5wcm90b3R5cGUuZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgIHJldHVybiB7XG4gICAgICByb3V0ZXI6IF9leHRlbmRzKHt9LCB0aGlzLmNvbnRleHQucm91dGVyLCB7XG4gICAgICAgIHJvdXRlOiB7XG4gICAgICAgICAgbG9jYXRpb246IHRoaXMucHJvcHMubG9jYXRpb24gfHwgdGhpcy5jb250ZXh0LnJvdXRlci5yb3V0ZS5sb2NhdGlvbixcbiAgICAgICAgICBtYXRjaDogdGhpcy5zdGF0ZS5tYXRjaFxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH07XG4gIH07XG5cbiAgUm91dGUucHJvdG90eXBlLmNvbXB1dGVNYXRjaCA9IGZ1bmN0aW9uIGNvbXB1dGVNYXRjaChfcmVmLCByb3V0ZXIpIHtcbiAgICB2YXIgY29tcHV0ZWRNYXRjaCA9IF9yZWYuY29tcHV0ZWRNYXRjaCxcbiAgICAgICAgbG9jYXRpb24gPSBfcmVmLmxvY2F0aW9uLFxuICAgICAgICBwYXRoID0gX3JlZi5wYXRoLFxuICAgICAgICBzdHJpY3QgPSBfcmVmLnN0cmljdCxcbiAgICAgICAgZXhhY3QgPSBfcmVmLmV4YWN0LFxuICAgICAgICBzZW5zaXRpdmUgPSBfcmVmLnNlbnNpdGl2ZTtcblxuICAgIGlmIChjb21wdXRlZE1hdGNoKSByZXR1cm4gY29tcHV0ZWRNYXRjaDsgLy8gPFN3aXRjaD4gYWxyZWFkeSBjb21wdXRlZCB0aGUgbWF0Y2ggZm9yIHVzXG5cbiAgICBpbnZhcmlhbnQocm91dGVyLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGU+IG9yIHdpdGhSb3V0ZXIoKSBvdXRzaWRlIGEgPFJvdXRlcj5cIik7XG5cbiAgICB2YXIgcm91dGUgPSByb3V0ZXIucm91dGU7XG5cbiAgICB2YXIgcGF0aG5hbWUgPSAobG9jYXRpb24gfHwgcm91dGUubG9jYXRpb24pLnBhdGhuYW1lO1xuXG4gICAgcmV0dXJuIG1hdGNoUGF0aChwYXRobmFtZSwgeyBwYXRoOiBwYXRoLCBzdHJpY3Q6IHN0cmljdCwgZXhhY3Q6IGV4YWN0LCBzZW5zaXRpdmU6IHNlbnNpdGl2ZSB9LCByb3V0ZS5tYXRjaCk7XG4gIH07XG5cbiAgUm91dGUucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICB3YXJuaW5nKCEodGhpcy5wcm9wcy5jb21wb25lbnQgJiYgdGhpcy5wcm9wcy5yZW5kZXIpLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgY29tcG9uZW50PiBhbmQgPFJvdXRlIHJlbmRlcj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSByZW5kZXI+IHdpbGwgYmUgaWdub3JlZFwiKTtcblxuICAgIHdhcm5pbmcoISh0aGlzLnByb3BzLmNvbXBvbmVudCAmJiB0aGlzLnByb3BzLmNoaWxkcmVuICYmICFpc0VtcHR5Q2hpbGRyZW4odGhpcy5wcm9wcy5jaGlsZHJlbikpLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgY29tcG9uZW50PiBhbmQgPFJvdXRlIGNoaWxkcmVuPiBpbiB0aGUgc2FtZSByb3V0ZTsgPFJvdXRlIGNoaWxkcmVuPiB3aWxsIGJlIGlnbm9yZWRcIik7XG5cbiAgICB3YXJuaW5nKCEodGhpcy5wcm9wcy5yZW5kZXIgJiYgdGhpcy5wcm9wcy5jaGlsZHJlbiAmJiAhaXNFbXB0eUNoaWxkcmVuKHRoaXMucHJvcHMuY2hpbGRyZW4pKSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIHJlbmRlcj4gYW5kIDxSb3V0ZSBjaGlsZHJlbj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSBjaGlsZHJlbj4gd2lsbCBiZSBpZ25vcmVkXCIpO1xuICB9O1xuXG4gIFJvdXRlLnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMsIG5leHRDb250ZXh0KSB7XG4gICAgd2FybmluZyghKG5leHRQcm9wcy5sb2NhdGlvbiAmJiAhdGhpcy5wcm9wcy5sb2NhdGlvbiksICc8Um91dGU+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gdW5jb250cm9sbGVkIHRvIGNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgaW5pdGlhbGx5IHVzZWQgbm8gXCJsb2NhdGlvblwiIHByb3AgYW5kIHRoZW4gcHJvdmlkZWQgb25lIG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJyk7XG5cbiAgICB3YXJuaW5nKCEoIW5leHRQcm9wcy5sb2NhdGlvbiAmJiB0aGlzLnByb3BzLmxvY2F0aW9uKSwgJzxSb3V0ZT4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSBjb250cm9sbGVkIHRvIHVuY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBwcm92aWRlZCBhIFwibG9jYXRpb25cIiBwcm9wIGluaXRpYWxseSBidXQgb21pdHRlZCBpdCBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpO1xuXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBtYXRjaDogdGhpcy5jb21wdXRlTWF0Y2gobmV4dFByb3BzLCBuZXh0Q29udGV4dC5yb3V0ZXIpXG4gICAgfSk7XG4gIH07XG5cbiAgUm91dGUucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgbWF0Y2ggPSB0aGlzLnN0YXRlLm1hdGNoO1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBjaGlsZHJlbiA9IF9wcm9wcy5jaGlsZHJlbixcbiAgICAgICAgY29tcG9uZW50ID0gX3Byb3BzLmNvbXBvbmVudCxcbiAgICAgICAgcmVuZGVyID0gX3Byb3BzLnJlbmRlcjtcbiAgICB2YXIgX2NvbnRleHQkcm91dGVyID0gdGhpcy5jb250ZXh0LnJvdXRlcixcbiAgICAgICAgaGlzdG9yeSA9IF9jb250ZXh0JHJvdXRlci5oaXN0b3J5LFxuICAgICAgICByb3V0ZSA9IF9jb250ZXh0JHJvdXRlci5yb3V0ZSxcbiAgICAgICAgc3RhdGljQ29udGV4dCA9IF9jb250ZXh0JHJvdXRlci5zdGF0aWNDb250ZXh0O1xuXG4gICAgdmFyIGxvY2F0aW9uID0gdGhpcy5wcm9wcy5sb2NhdGlvbiB8fCByb3V0ZS5sb2NhdGlvbjtcbiAgICB2YXIgcHJvcHMgPSB7IG1hdGNoOiBtYXRjaCwgbG9jYXRpb246IGxvY2F0aW9uLCBoaXN0b3J5OiBoaXN0b3J5LCBzdGF0aWNDb250ZXh0OiBzdGF0aWNDb250ZXh0IH07XG5cbiAgICBpZiAoY29tcG9uZW50KSByZXR1cm4gbWF0Y2ggPyBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbXBvbmVudCwgcHJvcHMpIDogbnVsbDtcblxuICAgIGlmIChyZW5kZXIpIHJldHVybiBtYXRjaCA/IHJlbmRlcihwcm9wcykgOiBudWxsO1xuXG4gICAgaWYgKHR5cGVvZiBjaGlsZHJlbiA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gY2hpbGRyZW4ocHJvcHMpO1xuXG4gICAgaWYgKGNoaWxkcmVuICYmICFpc0VtcHR5Q2hpbGRyZW4oY2hpbGRyZW4pKSByZXR1cm4gUmVhY3QuQ2hpbGRyZW4ub25seShjaGlsZHJlbik7XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICByZXR1cm4gUm91dGU7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblJvdXRlLnByb3BUeXBlcyA9IHtcbiAgY29tcHV0ZWRNYXRjaDogUHJvcFR5cGVzLm9iamVjdCwgLy8gcHJpdmF0ZSwgZnJvbSA8U3dpdGNoPlxuICBwYXRoOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBleGFjdDogUHJvcFR5cGVzLmJvb2wsXG4gIHN0cmljdDogUHJvcFR5cGVzLmJvb2wsXG4gIHNlbnNpdGl2ZTogUHJvcFR5cGVzLmJvb2wsXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmZ1bmMsXG4gIHJlbmRlcjogUHJvcFR5cGVzLmZ1bmMsXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm5vZGVdKSxcbiAgbG9jYXRpb246IFByb3BUeXBlcy5vYmplY3Rcbn07XG5Sb3V0ZS5jb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBoaXN0b3J5OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgcm91dGU6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICBzdGF0aWNDb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0XG4gIH0pXG59O1xuUm91dGUuY2hpbGRDb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IFJvdXRlOyIsIi8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzXG5pbXBvcnQgUm91dGUgZnJvbSBcInJlYWN0LXJvdXRlci9lcy9Sb3V0ZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBSb3V0ZTsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IGludmFyaWFudCBmcm9tIFwiaW52YXJpYW50XCI7XG5pbXBvcnQgeyBjcmVhdGVMb2NhdGlvbiB9IGZyb20gXCJoaXN0b3J5XCI7XG5cbnZhciBpc01vZGlmaWVkRXZlbnQgPSBmdW5jdGlvbiBpc01vZGlmaWVkRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuICEhKGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuYWx0S2V5IHx8IGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQuc2hpZnRLZXkpO1xufTtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcmVuZGVyaW5nIGEgaGlzdG9yeS1hd2FyZSA8YT4uXG4gKi9cblxudmFyIExpbmsgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoTGluaywgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTGluaygpIHtcbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExpbmspO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLmhhbmRsZUNsaWNrID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMub25DbGljaykgX3RoaXMucHJvcHMub25DbGljayhldmVudCk7XG5cbiAgICAgIGlmICghZXZlbnQuZGVmYXVsdFByZXZlbnRlZCAmJiAvLyBvbkNsaWNrIHByZXZlbnRlZCBkZWZhdWx0XG4gICAgICBldmVudC5idXR0b24gPT09IDAgJiYgLy8gaWdub3JlIGV2ZXJ5dGhpbmcgYnV0IGxlZnQgY2xpY2tzXG4gICAgICAhX3RoaXMucHJvcHMudGFyZ2V0ICYmIC8vIGxldCBicm93c2VyIGhhbmRsZSBcInRhcmdldD1fYmxhbmtcIiBldGMuXG4gICAgICAhaXNNb2RpZmllZEV2ZW50KGV2ZW50KSAvLyBpZ25vcmUgY2xpY2tzIHdpdGggbW9kaWZpZXIga2V5c1xuICAgICAgKSB7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgIHZhciBoaXN0b3J5ID0gX3RoaXMuY29udGV4dC5yb3V0ZXIuaGlzdG9yeTtcbiAgICAgICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICAgICAgcmVwbGFjZSA9IF90aGlzJHByb3BzLnJlcGxhY2UsXG4gICAgICAgICAgICAgIHRvID0gX3RoaXMkcHJvcHMudG87XG5cblxuICAgICAgICAgIGlmIChyZXBsYWNlKSB7XG4gICAgICAgICAgICBoaXN0b3J5LnJlcGxhY2UodG8pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBoaXN0b3J5LnB1c2godG8pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgTGluay5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICByZXBsYWNlID0gX3Byb3BzLnJlcGxhY2UsXG4gICAgICAgIHRvID0gX3Byb3BzLnRvLFxuICAgICAgICBpbm5lclJlZiA9IF9wcm9wcy5pbm5lclJlZixcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbXCJyZXBsYWNlXCIsIFwidG9cIiwgXCJpbm5lclJlZlwiXSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcblxuICAgIGludmFyaWFudCh0aGlzLmNvbnRleHQucm91dGVyLCBcIllvdSBzaG91bGQgbm90IHVzZSA8TGluaz4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpO1xuXG4gICAgaW52YXJpYW50KHRvICE9PSB1bmRlZmluZWQsICdZb3UgbXVzdCBzcGVjaWZ5IHRoZSBcInRvXCIgcHJvcGVydHknKTtcblxuICAgIHZhciBoaXN0b3J5ID0gdGhpcy5jb250ZXh0LnJvdXRlci5oaXN0b3J5O1xuXG4gICAgdmFyIGxvY2F0aW9uID0gdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gY3JlYXRlTG9jYXRpb24odG8sIG51bGwsIG51bGwsIGhpc3RvcnkubG9jYXRpb24pIDogdG87XG5cbiAgICB2YXIgaHJlZiA9IGhpc3RvcnkuY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJhXCIsIF9leHRlbmRzKHt9LCBwcm9wcywgeyBvbkNsaWNrOiB0aGlzLmhhbmRsZUNsaWNrLCBocmVmOiBocmVmLCByZWY6IGlubmVyUmVmIH0pKTtcbiAgfTtcblxuICByZXR1cm4gTGluaztcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuTGluay5wcm9wVHlwZXMgPSB7XG4gIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICB0YXJnZXQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHJlcGxhY2U6IFByb3BUeXBlcy5ib29sLFxuICB0bzogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pLmlzUmVxdWlyZWQsXG4gIGlubmVyUmVmOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMuZnVuY10pXG59O1xuTGluay5kZWZhdWx0UHJvcHMgPSB7XG4gIHJlcGxhY2U6IGZhbHNlXG59O1xuTGluay5jb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBoaXN0b3J5OiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgcHVzaDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICAgIHJlcGxhY2U6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgICBjcmVhdGVIcmVmOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG4gICAgfSkuaXNSZXF1aXJlZFxuICB9KS5pc1JlcXVpcmVkXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IExpbms7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IExpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcblxuLypcbkV4cG9ydCBhIGBQb3N0SW5kZXhJdGVtYCBwcmVzZW50YXRpb25hbCBjb21wb25lbnQgdGhhdCB0YWtlcyBpbiBhIGBwb3N0YCBhbmQgdGhlIFxuYGRlbGV0ZVBvc3RgIGFjdGlvbiB2aWEgcHJvcHMuIFRoZSBjb21wb25lbnQgc2hvdWxkIHJlbmRlciBhbiBgbGlgIGNvbnRhaW5pbmcgXG50aGUgZm9sbG93aW5nOlxuXG4xLiBBIGxpbmsgdG8gdGhlIHBvc3QncyBzaG93IHBhZ2Ugd2l0aCB0ZXh0IG9mIHRoZSBwb3N0J3MgdGl0bGVcbjIuIEEgbGluayB0byB0aGUgcG9zdCdzIGVkaXQgcGFnZSB3aXRoIHRleHQgJ0VkaXQnLlxuMy4gQSBidXR0b24gdG8gZGVsZXRlIHRoZSBwb3N0LlxuKi9cblxuY29uc3QgUG9zdEluZGV4SXRlbSA9IHByb3BzID0+IChcbiAgPGxpPlxuICAgIDxMaW5rIHRvPXtgL3Bvc3RzLyR7cHJvcHMucG9zdC5pZH1gfT57cHJvcHMucG9zdC50aXRsZX08L0xpbms+XG4gICAgPExpbmsgdG89e2AvcG9zdHMvJHtwcm9wcy5wb3N0LmlkfS9lZGl0YH0+RWRpdDwvTGluaz5cbiAgICA8YnV0dG9uIG9uQ2xpY2s9eygpID0+IHByb3BzLmRlbGV0ZVBvc3QocHJvcHMucG9zdC5pZCl9PkQ8L2J1dHRvbj5cbiAgPC9saT5cbik7XG5cbmV4cG9ydCBkZWZhdWx0IFBvc3RJbmRleEl0ZW07XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG4vKlxuRXhwb3J0IGEgYFBvc3RGb3JtYCBwcmVzZW50YXRpb25hbCBjb21wb25lbnQgdGhhdCBjcmVhdGVzIGEgZm9ybSB0byBlaXRoZXJcbmNyZWF0ZSBvciBlZGl0IGEgcG9zdCAoaXQgd2lsbCBiZSB1c2VkIGJ5IHR3byBzZXBhcmF0ZSBjb250YWluZXJzKS4gVGhlIGZvcm1cbnNob3VsZCBpbmRpY2F0ZSB3aGV0aGVyIGl0IGlzIGEgY3JlYXRlIG9yIGVkaXQgZm9ybSBiYXNlZCBvbiB0aGUgYGZvcm1UeXBlYFxucHJvcC4gVGhlIGZvcm0gc2hvdWxkIGluaXRpYWxpemUgc3RhdGUgdG8gdGhlIGBwb3N0YCBwYXNzZWQgaW4gZnJvbSBwcm9wcy4gVXNlXG5jb250cm9sbGVkIGlucHV0cyBhbmQgdHJpZ2dlciB0aGUgYGFjdGlvbmAgcGFzc2VkIGluIGZyb20gdGhlIGNvbnRhaW5lciB1cG9uXG5zdWJtaXNzaW9uLiBVc2UgYSB0ZXh0IGlucHV0IGZvciB0aGUgdGl0bGUgYW5kIGEgdGV4dGFyZWEgZm9yIHRoZSBib2R5LlxuKi9cblxuY2xhc3MgUG9zdEZvcm0gZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0gdGhpcy5wcm9wcy5wb3N0O1xuXG4gICAgdGhpcy5oYW5kbGVTdWJtaXQgPSB0aGlzLmhhbmRsZVN1Ym1pdC5iaW5kKHRoaXMpO1xuICB9XG5cbiAgaGFuZGxlU3VibWl0KGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgdGhpcy5wcm9wcy5hY3Rpb24odGhpcy5zdGF0ZSk7XG4gIH1cblxuICB1cGRhdGUoZmllbGQpIHtcbiAgICByZXR1cm4gZSA9PiB0aGlzLnNldFN0YXRlKHsgW2ZpZWxkXTogZS5jdXJyZW50VGFyZ2V0LnZhbHVlIH0pO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2PlxuICAgICAgICA8aDM+e3RoaXMucHJvcHMuZm9ybVR5cGV9PC9oMz5cbiAgICAgICAgPGZvcm0gb25TdWJtaXQ9e3RoaXMuaGFuZGxlU3VibWl0fT5cbiAgICAgICAgICA8bGFiZWw+XG4gICAgICAgICAgICBUaXRsZVxuICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgIHR5cGU9J3RleHQnXG4gICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLnRpdGxlfVxuICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy51cGRhdGUoJ3RpdGxlJyl9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgPGxhYmVsPlxuICAgICAgICAgICAgQm9keVxuICAgICAgICAgICAgPHRleHRhcmVhXG4gICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLmJvZHl9XG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLnVwZGF0ZSgnYm9keScpfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgIDxidXR0b24gdHlwZT0nc3VibWl0JyB2YWx1ZT17dGhpcy5wcm9wcy5mb3JtVHlwZX0gLz5cbiAgICAgICAgPC9mb3JtPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBQb3N0Rm9ybTtcbiIsImltcG9ydCAqIGFzIFBvc3RBcGlVdGlsIGZyb20gJy4uL3V0aWwvcG9zdF9hcGlfdXRpbCc7XG5cbi8qXG5FeHBvcnQgdGhlIGZvbGxvd2luZyBhY3Rpb24gY29uc3RhbnRzOlxuXG4xLiBgUkVDRUlWRV9BTExfUE9TVFNgIChjb3JyZXNwb25kaW5nIGFjdGlvbiBzaG91bGQgaGF2ZSBhIGBwb3N0c2AgcGF5bG9hZClcbjIuIGBSRUNFSVZFX1BPU1RgIChjb3JyZXNwb25kaW5nIGFjdGlvbiBzaG91bGQgaGF2ZSBhIGBwb3N0YCBwYXlsb2FkKVxuMy4gYFJFTU9WRV9QT1NUYCAoY29ycmVzcG9uZGluZyBhY3Rpb24gc2hvdWxkIGhhdmUgYSBgcG9zdElkYCBwYXlsb2FkKVxuXG5FeHBvcnQgdGhlIGZvbGxvd2luZyB0aHVuayBhY3Rpb24gY3JlYXRvcnMgd2l0aCB0aGUgc3BlY2lmaWVkIHBhcmFtZXRlcnM6XG5cbjEuIGBmZXRjaFBvc3RzYFxuMi4gYGZldGNoUG9zdChwb3N0SWQpYFxuMy4gYGNyZWF0ZVBvc3QocG9zdClgXG40LiBgdXBkYXRlUG9zdChwb3N0KWBcbjUuIGBkZWxldGVQb3N0KHBvc3RJZClgXG4qL1xuXG5leHBvcnQgY29uc3QgUkVDRUlWRV9BTExfUE9TVFMgPSAnUkVDRUlWRV9BTExfUE9TVFMnO1xuZXhwb3J0IGNvbnN0IFJFQ0VJVkVfUE9TVCA9ICdSRUNFSVZFX1BPU1QnO1xuZXhwb3J0IGNvbnN0IFJFTU9WRV9QT1NUID0gJ1JFTU9WRV9QT1NUJztcblxuY29uc3QgcmVjZWl2ZUFsbFBvc3RzID0gcG9zdHMgPT4gKHtcbiAgdHlwZTogUkVDRUlWRV9BTExfUE9TVFMsXG4gIHBvc3RzXG59KTtcblxuY29uc3QgcmVjZWl2ZVBvc3QgPSBwb3N0ID0+ICh7XG4gIHR5cGU6IFJFQ0VJVkVfUE9TVCxcbiAgcG9zdFxufSk7XG5cbmNvbnN0IHJlbW92ZVBvc3QgPSBwb3N0SWQgPT4gKHtcbiAgdHlwZTogUkVNT1ZFX1BPU1QsXG4gIHBvc3RJZFxufSk7XG5cbmV4cG9ydCBjb25zdCBmZXRjaFBvc3RzID0gKCkgPT4gZGlzcGF0Y2ggPT4gKFxuICBQb3N0QXBpVXRpbC5mZXRjaFBvc3RzKClcbiAgICAudGhlbihwb3N0cyA9PiBkaXNwYXRjaCh7IHR5cGU6IFwiUkVDRUlWRV9BTExfUE9TVFNcIiwgcG9zdHMgfSkpXG4pO1xuXG5leHBvcnQgY29uc3QgZmV0Y2hQb3N0ID0gcG9zdElkID0+IGRpc3BhdGNoID0+IChcbiAgUG9zdEFwaVV0aWwuZmV0Y2hQb3N0KHBvc3RJZClcbiAgICAudGhlbihwb3N0ID0+IGRpc3BhdGNoKHJlY2VpdmVQb3N0KHBvc3QpKSlcbik7XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVQb3N0ID0gcG9zdCA9PiBkaXNwYXRjaCA9PiAoXG4gIFBvc3RBcGlVdGlsLmNyZWF0ZVBvc3QocG9zdClcbiAgICAudGhlbihwb3N0ID0+IGRpc3BhdGNoKHJlY2VpdmVQb3N0KHBvc3QpKSlcbik7XG5cbmV4cG9ydCBjb25zdCB1cGRhdGVQb3N0ID0gcG9zdCA9PiBkaXNwYXRjaCA9PiAoXG4gIFBvc3RBcGlVdGlsLnVwZGF0ZVBvc3QocG9zdClcbiAgICAudGhlbihwb3N0ID0+IGRpc3BhdGNoKHJlY2VpdmVQb3N0KHBvc3QpKSlcbik7XG5cbmV4cG9ydCBjb25zdCBkZWxldGVQb3N0ID0gcG9zdElkID0+IGRpc3BhdGNoID0+IChcbiAgUG9zdEFwaVV0aWwuZGVsZXRlUG9zdChwb3N0SWQpXG4gICAgLnRoZW4oKCkgPT4gZGlzcGF0Y2gocmVtb3ZlUG9zdChwb3N0SWQpKSlcbik7IiwiLypcbkV4cG9ydCB0aGUgZm9sbG93aW5nIEFQSSBVdGlsIGZ1bmN0aW9ucyB3aXRoIHRoZSBzcGVjaWZpZWQgcGFyYW1ldGVyczpcblxuMS4gYGZldGNoUG9zdHNgXG4yLiBgZmV0Y2hQb3N0KHBvc3RJZClgXG4zLiBgY3JlYXRlUG9zdChwb3N0KWBcbjQuIGB1cGRhdGVQb3N0KHBvc3QpYFxuNS4gYGRlbGV0ZVBvc3QocG9zdElkKWBcbiovXG5cbmV4cG9ydCBjb25zdCBmZXRjaFBvc3RzID0gKCkgPT4gKFxuICAkLmFqYXgoe1xuICAgIHVybDogYGFwaS9wb3N0cy9gXG4gIH0pXG4pO1xuXG5leHBvcnQgY29uc3QgZmV0Y2hQb3N0ID0gcG9zdElkID0+IChcbiAgJC5hamF4KHtcbiAgICB1cmw6IGAvYXBpL3Bvc3RzLyR7cG9zdElkfS9gXG4gIH0pXG4pO1xuXG5leHBvcnQgY29uc3QgY3JlYXRlUG9zdCA9IHBvc3QgPT4gKFxuICAkLmFqYXgoe1xuICAgIHVybDogYGFwaS9wb3N0cy9gLFxuICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgIGRhdGE6IHsgcG9zdCB9XG4gIH0pXG4pO1xuXG5leHBvcnQgY29uc3QgdXBkYXRlUG9zdCA9IHBvc3QgPT4gKFxuICAkLmFqYXgoe1xuICAgIHVybDogYC9hcGkvcG9zdHMvJHtwb3N0LmlkfWAsXG4gICAgbWV0aG9kOiAncGF0Y2gnLFxuICAgIGRhdGE6IHsgcG9zdCB9XG4gIH0pXG4pO1xuXG5leHBvcnQgY29uc3QgZGVsZXRlUG9zdCA9IHBvc3RJZCA9PiAoXG4gICQuYWpheCh7XG4gICAgdXJsOiBgL2FwaS9wb3N0cy8ke3Bvc3RJZH0vYCxcbiAgICBtZXRob2Q6ICdERUxFVEUnXG4gIH0pXG4pIiwiaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7IHdpdGhSb3V0ZXIgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCBQb3N0Rm9ybSBmcm9tICcuL3Bvc3RfZm9ybSc7XG5pbXBvcnQgeyBjcmVhdGVQb3N0IH0gZnJvbSAnLi4vLi4vYWN0aW9ucy9wb3N0X2FjdGlvbnMnO1xuXG4vKlxuRXhwb3J0IGEgY29udGFpbmVyIGNvbXBvbmVudCBmb3IgdGhlIGBQb3N0Rm9ybWAgdGhhdCB3aWxsIGJlIHVzZWQgdG8gY3JlYXRlIGFcbm5ldyBwb3N0LiBNYXAgaW4gYSBwb3N0IG9iamVjdCB3aXRoIGVtcHR5IHZhbHVlcyBmb3IgZWFjaCBmaWVsZCBhcyBhIGBwb3N0YCBwcm9wXG5hbG9uZyB3aXRoIGEgYGZvcm1UeXBlYCBwcm9wIHNldCB0byB0aGUgc3RyaW5nICdDcmVhdGUgUG9zdCcuIEFkZGl0aW9uYWxseSwgbWFwIFxuaW4gYSBmdW5jdGlvbiB0aGF0IHdpbGwgZGlzcGF0Y2ggdGhlIGFwcHJvcHJpYXRlIGFjdGlvbiB0byB0aGUgc3RvcmUgb24gZm9ybSBcbnN1Ym1pc3Npb24gYXMgYW4gYGFjdGlvbmAgcHJvcC5cbiovXG5cbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IHN0YXRlID0+ICh7XG4gIHBvc3Q6IHtcbiAgICB0aXRsZTogJycsXG4gICAgYm9keTogJydcbiAgfSxcbiAgZm9ybVR5cGU6ICdDcmVhdGUgUG9zdCdcbn0pO1xuXG5jb25zdCBtYXBEaXNwYXRjaFRvUHJvcHMgPSBkaXNwYXRjaCA9PiAoe1xuICBhY3Rpb246IHBvc3QgPT4gZGlzcGF0Y2goY3JlYXRlUG9zdChwb3N0KSlcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzKShQb3N0Rm9ybSk7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQb3N0SW5kZXhJdGVtIGZyb20gJy4vcG9zdF9pbmRleF9pdGVtJztcbmltcG9ydCBDcmVhdGVQb3N0Rm9ybUNvbnRhaW5lciBmcm9tICcuL2NyZWF0ZV9wb3N0X2Zvcm1fY29udGFpbmVyJztcblxuLypcbkV4cG9ydCBhIGBQb3N0SW5kZXhgIHByZXNlbnRhdGlvbmFsIGNvbXBvbmVudCB0aGF0IHJlbmRlcnMgYSBsaXN0IChgdWxgKSBvZlxuYFBvc3RJbmRleEl0ZW1zYC4gVGhpcyBjb21wb25lbnQgc2hvdWxkIHJlY2VpdmUgYHBvc3RzYCBmcm9tIHRoZSBzdG9yZSBhcyBhIHByb3BcbnZpYSBpdHMgY29udGFpbmVyIGFuZCBmZXRjaCB0aGVtIG9uY2UgaXQgaGFzIHN1Y2Nlc3NmdWxseSBtb3VudGVkIHRvIHRoZSBET00uXG5CZWxvdyB0aGUgYHVsYCwgcmVuZGVyIHRoZSBgQ3JlYXRlUG9zdEZvcm1Db250YWluZXJgIGNvbXBvbmVudC5cbiovXG5cbmNsYXNzIFBvc3RJbmRleCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMucHJvcHMuZmV0Y2hQb3N0cygpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgcG9zdHMsIGRlbGV0ZVBvc3QgfSA9IHRoaXMucHJvcHM7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdj5cbiAgICAgICAgPHVsPlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHBvc3RzLm1hcChwb3N0ID0+IChcbiAgICAgICAgICAgICAgPFBvc3RJbmRleEl0ZW1cbiAgICAgICAgICAgICAgICBwb3N0PXtwb3N0fVxuICAgICAgICAgICAgICAgIGRlbGV0ZVBvc3Q9e2RlbGV0ZVBvc3R9XG4gICAgICAgICAgICAgICAga2V5PXtwb3N0LmlkfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKSlcbiAgICAgICAgICB9XG4gICAgICAgIDwvdWw+XG4gICAgICAgIDxDcmVhdGVQb3N0Rm9ybUNvbnRhaW5lciAvPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBQb3N0SW5kZXg7IiwiaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCBQb3N0SW5kZXggZnJvbSAnLi9wb3N0X2luZGV4JztcbmltcG9ydCB7IGZldGNoUG9zdHMsIGRlbGV0ZVBvc3QgfSBmcm9tICcuLi8uLi9hY3Rpb25zL3Bvc3RfYWN0aW9ucyc7XG5cbi8qXG5FeHBvcnQgYSBjb250YWluZXIgY29tcG9uZW50IGZvciB0aGUgYFBvc3RJbmRleGAgdGhhdCBtYXBzIGFuIGFycmF5IG9mIGFsbCBwb3N0cyAgXG5mcm9tIHRoZSBzdG9yZSBhcyBhIGBwb3N0c2AgcHJvcC4gQWRkaXRpb25hbGx5LCBpdCBzaG91bGQgbWFwIGluIGZ1bmN0aW9ucyB0aGF0XG53aWxsIGRpc3BhdGNoIGBmZXRjaFBvc3RzYCBhbmQgYGRlbGV0ZVBvc3RgIHRvIHRoZSBzdG9yZSBhcyBwcm9wcyBvZiB0aGUgc2FtZVxubmFtZS5cbiovXG5cbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IHN0YXRlID0+ICh7XG4gIHBvc3RzOiBPYmplY3QudmFsdWVzKHN0YXRlLnBvc3RzKVxufSk7XG5cbmNvbnN0IG1hcERpc3BhdGNoVG9Qcm9wcyA9IGRpc3BhdGNoID0+ICh7XG4gIGZldGNoUG9zdHM6ICgpID0+IGRpc3BhdGNoKGZldGNoUG9zdHMoKSksXG4gIGRlbGV0ZVBvc3Q6IHBvc3RJZCA9PiBkaXNwYXRjaChkZWxldGVQb3N0KHBvc3RJZCkpXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcykoUG9zdEluZGV4KTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuXG4vKlxuRXhwb3J0IGEgYFBvc3RTaG93YCBwcmVzZW50YXRpb25hbCBjb21wb25lbnQgdGhhdCByZW5kZXJzIGEgcG9zdCdzIGluZm9ybWF0aW9uXG4odGl0bGUgYW5kIGJvZHkpLiBUaGlzIGNvbXBvbmVudCBzaG91bGQgcmVjZWl2ZSB0aGUgYHBvc3RgIGZyb20gdGhlIHN0b3JlIGFzIFxucHJvcHMgdmlhIGl0cyBjb250YWluZXIgYW5kIGZldGNoIGl0IG9uY2UgaXQgaGFzIHN1Y2Nlc3NmdWxseSBtb3VudGVkIHRvIHRoZSBcbkRPTS4gQWRkaXRpb25hbGx5LCB0aGlzIGNvbXBvbmVudCBzaG91bGQgY29udGFpbiBhIGxpbmsgYmFjayB0byB0aGUgYFBvc3RJbmRleGAuXG4qL1xuXG5jbGFzcyBQb3N0U2hvdyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMucHJvcHMuZmV0Y2hQb3N0KHRoaXMucHJvcHMubWF0Y2gucGFyYW1zLnBvc3RJZCk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBwb3N0IH0gPSB0aGlzLnByb3BzO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXY+XG4gICAgICAgIDxoMT57cG9zdC50aXRsZX08L2gxPlxuICAgICAgICA8cD57cG9zdC5ib2R5fTwvcD5cbiAgICAgICAgPExpbmsgdG89XCIvXCIgLz5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUG9zdFNob3c7XG4iLCJpbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IFBvc3RTaG93IGZyb20gJy4vcG9zdF9zaG93JztcbmltcG9ydCB7IGZldGNoUG9zdCB9IGZyb20gJy4uLy4uL2FjdGlvbnMvcG9zdF9hY3Rpb25zJztcblxuLypcbkV4cG9ydCBhIGNvbnRhaW5lciBjb21wb25lbnQgZm9yIHRoZSBgUG9zdFNob3dgIHRoYXQgbWFwcyBpbiB0aGUgYXBwcm9wcmlhdGVcbnBvc3QgZnJvbSB0aGUgc3RvcmUgYXMgYSBgcG9zdGAgcHJvcC4gQWRkaXRpb25hbGx5LCBpdCBzaG91bGQgbWFwIGluXG5hIGZ1bmN0aW9uIHRoYXQgd2lsbCBkaXNwYXRjaCBgZmV0Y2hQb3N0YCB0byB0aGUgc3RvcmUgYXMgYSBwcm9wIG9mIHRoZSBzYW1lXG5uYW1lLlxuKi9cblxuY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gKHN0YXRlLCBvd25Qcm9wcykgPT4gKHtcbiAgcG9zdDogc3RhdGUucG9zdHNbb3duUHJvcHMubWF0Y2gucGFyYW1zLnBvc3RJZF1cbn0pO1xuXG5jb25zdCBtYXBEaXNwYXRjaFRvUHJvcHMgPSBkaXNwYXRjaCA9PiAoe1xuICBmZXRjaFBvc3Q6IHBvc3RJZCA9PiBkaXNwYXRjaChmZXRjaFBvc3QocG9zdElkKSlcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzKShQb3N0U2hvdyk7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgUG9zdEZvcm0gZnJvbSAnLi9wb3N0X2Zvcm0nO1xuaW1wb3J0IHsgZmV0Y2hQb3N0LCB1cGRhdGVQb3N0IH0gZnJvbSAnLi4vLi4vYWN0aW9ucy9wb3N0X2FjdGlvbnMnO1xuXG4vKlxuRXhwb3J0IGEgY29udGFpbmVyIGNvbXBvbmVudCBmb3IgdGhlIGBFZGl0UG9zdEZvcm1gIGNvbXBvbmVudCBnaXZlbiBiZWxvdyB0aGF0XG53aWxsIGJlIHVzZWQgdG8gZWRpdCBhbiBleGlzdGluZyBwb3N0LiBUaGUgYEVkaXRQb3N0Rm9ybWAgY29tcG9uZW50IHNob3VsZCBmZXRjaFxudGhlIHBvc3QgYmVpbmcgZWRpdGVkIHdoZW4gaXQgc3VjY2Vzc2Z1bGx5IG1vdW50cyB0byB0aGUgRE9NIGFuZCB3aWxsIG9ubHlcbnJlbmRlciB0aGUgYFBvc3RGb3JtYCBvbmNlIGl0IGhhcyByZWNlaXZlZCB0aGF0IHBvc3QuXG5cbkluIHRoZSBjb250YWluZXIsIHBhc3MgaW4gdGhlIHBvc3QgYmVpbmcgZWRpdGVkIGFzIGEgYHBvc3RgIHByb3AgYWxvbmcgd2l0aCBhXG5gZm9ybVR5cGVgIHByb3Agc2V0IHRvIHRoZSBzdHJpbmcgJ1VwZGF0ZSBQb3N0Jy4gVGhlIGVkaXQgZm9ybSBzaG91bGQgcHJlLWZpbGxcbmVhY2ggZmllbGQgd2l0aCB0aGUgcG9zdCdzIHZhbHVlcy4gQWRkaXRpb25hbGx5LCBtYXAgaW4gYSBmdW5jdGlvbiB0aGF0IHdpbGxcbmRpc3BhdGNoIGBmZXRjaFBvc3RgIGFzIGEgcHJvcCBvZiB0aGUgc2FtZSBuYW1lLCBhbmQgb25lIHRoYXQgd2lsbCBkaXNwYXRjaCB0aGVcbmFwcHJvcHJpYXRlIGFjdGlvbiB0byB0aGUgc3RvcmUgb24gZm9ybSBzdWJtaXNzaW9uIGFzIGFuIGBhY3Rpb25gIHByb3AuXG5cbioqRG8gTk9UIG1vZGlmeSB0aGUgYHJlbmRlcmAgZnVuY3Rpb24gcHJvdmlkZWQgZm9yIHRoZSBgRWRpdFBvc3RGb3JtYC4qKlxuKi9cblxuY2xhc3MgRWRpdFBvc3RGb3JtIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5wcm9wcy5mZXRjaFBvc3QodGhpcy5wcm9wcy5tYXRjaC5wYXJhbXMucG9zdElkKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICAvLyBETyBOT1QgTU9ESUZZIFRISVMgRlVOQ1RJT05cbiAgICBjb25zdCB7IGFjdGlvbiwgZm9ybVR5cGUsIHBvc3QgfSA9IHRoaXMucHJvcHM7XG5cbiAgICAvLyBIaW50OiBUaGUgcG9zdCB3aWxsIG5vdCBleGlzdCBvbiB0aGUgZmlyc3QgcmVuZGVyIC0gd2hhdCBkbyB3ZSBuZWVkIHRvIGRvXG4gICAgLy8gdG8gZ2V0IGl0P1xuICAgIGlmICghcG9zdCkgcmV0dXJuIG51bGw7XG4gICAgcmV0dXJuIChcbiAgICAgIDxQb3N0Rm9ybVxuICAgICAgICBhY3Rpb249e2FjdGlvbn1cbiAgICAgICAgZm9ybVR5cGU9e2Zvcm1UeXBlfVxuICAgICAgICBwb3N0PXtwb3N0fSAvPlxuICAgICk7XG4gIH1cbn1cblxuY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gKHN0YXRlLCBvd25Qcm9wcykgPT4gKHtcbiAgcG9zdDogc3RhdGUucG9zdHNbb3duUHJvcHMubWF0Y2gucGFyYW1zLnBvc3RJZF0sXG4gIGZvcm1UeXBlOiAnVXBkYXRlIFBvc3QnXG59KTtcblxuY29uc3QgbWFwRGlzcGF0Y2hUb1Byb3BzID0gZGlzcGF0Y2ggPT4gKHtcbiAgZmV0Y2hQb3N0OiBwb3N0SWQgPT4gZGlzcGF0Y2goZmV0Y2hQb3N0KHBvc3RJZCkpLFxuICBhY3Rpb246IHBvc3QgPT4gZGlzcGF0Y2godXBkYXRlUG9zdChwb3N0KSlcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzKShFZGl0UG9zdEZvcm0pOyIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IFJvdXRlLCBTd2l0Y2ggfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xuXG5pbXBvcnQgUG9zdEluZGV4Q29udGFpbmVyIGZyb20gXCIuL3Bvc3RzL3Bvc3RfaW5kZXhfY29udGFpbmVyXCI7XG5pbXBvcnQgUG9zdFNob3dDb250YWluZXIgZnJvbSBcIi4vcG9zdHMvcG9zdF9zaG93X2NvbnRhaW5lclwiO1xuaW1wb3J0IEVkaXRQb3N0Rm9ybUNvbnRhaW5lciBmcm9tIFwiLi9wb3N0cy9lZGl0X3Bvc3RfZm9ybV9jb250YWluZXJcIjtcblxuLy8gTkI6IHRoaXMgZmlsZSBpcyBjb21wbGV0ZSAtIHlvdSBkbyBub3QgdG8gd3JpdGUvZWRpdCBhbnl0aGluZyFcbmNvbnN0IEFwcCA9ICgpID0+IChcbiAgPGRpdj5cbiAgICA8aDE+UmVhY3QgMTwvaDE+XG4gICAgPFN3aXRjaD5cbiAgICAgIDxSb3V0ZSBleGFjdCBwYXRoPVwiL1wiIGNvbXBvbmVudD17UG9zdEluZGV4Q29udGFpbmVyfSAvPlxuICAgICAgPFJvdXRlIGV4YWN0IHBhdGg9XCIvcG9zdHMvOnBvc3RJZFwiIGNvbXBvbmVudD17UG9zdFNob3dDb250YWluZXJ9IC8+XG4gICAgICA8Um91dGUgcGF0aD1cIi9wb3N0cy86cG9zdElkL2VkaXRcIiBjb21wb25lbnQ9e0VkaXRQb3N0Rm9ybUNvbnRhaW5lcn0gLz5cbiAgICA8L1N3aXRjaD5cbiAgPC9kaXY+XG4pO1xuXG5leHBvcnQgZGVmYXVsdCBBcHA7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgUHJvdmlkZXIgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgeyBIYXNoUm91dGVyIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5cbmltcG9ydCBBcHAgZnJvbSAnLi9hcHAnO1xuaW1wb3J0IFBvc3RJbmRleENvbnRhaW5lciBmcm9tICcuL3Bvc3RzL3Bvc3RfaW5kZXhfY29udGFpbmVyJztcbmltcG9ydCBQb3N0U2hvd0NvbnRhaW5lciBmcm9tICcuL3Bvc3RzL3Bvc3Rfc2hvd19jb250YWluZXInO1xuXG4vLyBOQjogdGhpcyBmaWxlIGlzIGNvbXBsZXRlIC0geW91IGRvIG5vdCB0byB3cml0ZS9lZGl0IGFueXRoaW5nIVxuY29uc3QgUm9vdCA9ICh7IHN0b3JlIH0pID0+IChcbiAgPFByb3ZpZGVyIHN0b3JlPXtzdG9yZX0+XG4gICAgPEhhc2hSb3V0ZXI+XG4gICAgICA8QXBwIHN0b3JlPXtzdG9yZX0vPlxuICAgIDwvSGFzaFJvdXRlcj5cbiAgPC9Qcm92aWRlcj5cbik7XG5cbmV4cG9ydCBkZWZhdWx0IFJvb3Q7XG4iLCJpbXBvcnQge1xuICBSRUNFSVZFX0FMTF9QT1NUUyxcbiAgUkVDRUlWRV9QT1NULFxuICBSRU1PVkVfUE9TVCxcbn0gZnJvbSAnLi4vYWN0aW9ucy9wb3N0X2FjdGlvbnMnO1xuaW1wb3J0IG1lcmdlIGZyb20gJ2xvZGFzaC9tZXJnZSc7XG5cbi8qXG5FeHBvcnQgYSBgUG9zdHNSZWR1Y2VyYCB0aGF0IHRha2VzIGluIHRoZSBvbGQgc3RhdGUgYW5kIGFwcHJvcHJpYXRlbHkgaGFuZGxlc1xuYWxsIHBvc3QgYWN0aW9ucy5cbiovXG5cbmNvbnN0IFBvc3RzUmVkdWNlciA9IChvbGRTdGF0ZSA9IHt9LCBhY3Rpb24pID0+IHtcbiAgT2JqZWN0LmZyZWV6ZShvbGRTdGF0ZSk7XG5cbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgUkVDRUlWRV9BTExfUE9TVFM6XG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgb2xkU3RhdGUsIGFjdGlvbi5wb3N0cylcbiAgICBjYXNlIFJFQ0VJVkVfUE9TVDpcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBvbGRTdGF0ZSwgeyBbYWN0aW9uLnBvc3QuaWRdOiBhY3Rpb24ucG9zdCB9KVxuICAgIGNhc2UgUkVNT1ZFX1BPU1Q6XG4gICAgICBsZXQgbmV4dFN0YXRlID0gT2JqZWN0LmFzc2lnbih7fSwgb2xkU3RhdGUpO1xuICAgICAgZGVsZXRlIG5leHRTdGF0ZVthY3Rpb24ucG9zdElkXVxuICAgICAgcmV0dXJuIG5leHRTdGF0ZTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIG9sZFN0YXRlO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBQb3N0c1JlZHVjZXI7XG4iLCJpbXBvcnQgeyBjb21iaW5lUmVkdWNlcnMgfSBmcm9tICdyZWR1eCc7XG5pbXBvcnQgUG9zdHNSZWR1Y2VyIGZyb20gJy4vcG9zdHNfcmVkdWNlcic7XG5cbi8qXG5FeHBvcnQgYSBgUm9vdFJlZHVjZXJgIHRoYXQgc2V0cyB1cCBhIGBwb3N0c2Agc2xpY2Ugb2Ygc3RhdGUsIHdoaWNoIGRlbGVnYXRlc1xudG8gdGhlIGBQb3N0c1JlZHVjZXJgLlxuKi9cblxuY29uc3QgUm9vdFJlZHVjZXIgPSBjb21iaW5lUmVkdWNlcnMoe1xuICBwb3N0czogUG9zdHNSZWR1Y2VyXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgUm9vdFJlZHVjZXI7IiwiZnVuY3Rpb24gY3JlYXRlVGh1bmtNaWRkbGV3YXJlKGV4dHJhQXJndW1lbnQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIGRpc3BhdGNoID0gX3JlZi5kaXNwYXRjaCxcbiAgICAgICAgZ2V0U3RhdGUgPSBfcmVmLmdldFN0YXRlO1xuICAgIHJldHVybiBmdW5jdGlvbiAobmV4dCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgaWYgKHR5cGVvZiBhY3Rpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICByZXR1cm4gYWN0aW9uKGRpc3BhdGNoLCBnZXRTdGF0ZSwgZXh0cmFBcmd1bWVudCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV4dChhY3Rpb24pO1xuICAgICAgfTtcbiAgICB9O1xuICB9O1xufVxuXG52YXIgdGh1bmsgPSBjcmVhdGVUaHVua01pZGRsZXdhcmUoKTtcbnRodW5rLndpdGhFeHRyYUFyZ3VtZW50ID0gY3JlYXRlVGh1bmtNaWRkbGV3YXJlO1xuXG5leHBvcnQgZGVmYXVsdCB0aHVuazsiLCJpbXBvcnQgeyBjcmVhdGVTdG9yZSwgYXBwbHlNaWRkbGV3YXJlIH0gZnJvbSAncmVkdXgnO1xuaW1wb3J0IFJvb3RSZWR1Y2VyIGZyb20gJy4uL3JlZHVjZXJzL3Jvb3RfcmVkdWNlcic7XG5pbXBvcnQgdGh1bmsgZnJvbSAncmVkdXgtdGh1bmsnO1xuXG4vKlxuRXhwb3J0IGEgYGNvbmZpZ3VyZVN0b3JlYCBmdW5jdGlvbiB0aGF0IHRha2VzIGluIGEgYHByZWxvYWRlZFN0YXRlYCBwYXJhbWV0ZXJcbmFuZCByZXR1cm5zIGEgc3RvcmUgY3JlYXRlZCB3aXRoIHRoZSBgUm9vdFJlZHVjZXJgLCBgcHJlbG9hZGVkU3RhdGVgLCBhbmRcbmB0aHVua2AgbWlkZGxld2FyZS5cbiovXG5cbmNvbnN0IGNvbmZpZ3VyZVN0b3JlID0gKHByZWxvYWRlZFN0YXRlID0ge30pID0+IChcbiAgY3JlYXRlU3RvcmUoUm9vdFJlZHVjZXIsIHByZWxvYWRlZFN0YXRlLCBhcHBseU1pZGRsZXdhcmUodGh1bmspKVxuKTtcblxuZXhwb3J0IGRlZmF1bHQgY29uZmlndXJlU3RvcmU7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IFJvb3QgZnJvbSAnLi9jb21wb25lbnRzL3Jvb3QnO1xuaW1wb3J0IGNvbmZpZ3VyZVN0b3JlIGZyb20gJy4vc3RvcmUvc3RvcmUnO1xuXG4vKlxuV3JpdGUgYW4gZW50cnkgcG9pbnQgZmlsZSB0aGF0IHJlbmRlcnMgdGhlIGBSb290YCBjb21wb25lbnQsIHdpdGggYSBgc3RvcmVgIFxucHJvcCBwYXNzZWQgaW4sIGluc2lkZSB0aGUgZGl2IHdpdGggaWQgJ3Jvb3QnLlxuKi9cblxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsICgpID0+IHtcbiAgY29uc3Qgcm9vdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyb290Jyk7XG4gIGNvbnN0IHN0b3JlID0gY29uZmlndXJlU3RvcmUoKTtcblxuICBSZWFjdERPTS5yZW5kZXIoPFJvb3Qgc3RvcmU9e3N0b3JlfSAvPiwgcm9vdCk7XG59KTsiXSwic291cmNlUm9vdCI6IiJ9